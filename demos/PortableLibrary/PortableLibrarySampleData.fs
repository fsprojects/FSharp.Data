module PortableLibrarySampleData

let authorsXml = """<authors topic="Philosophy of Science">
  <author name="Paul Feyerabend" born="1924" />
  <author name="Thomas Kuhn" />
</authors>"""

let gitHubJson = """
[
  {
    "url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/89",
    "labels_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/89/labels{/name}",
    "comments_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/89/comments",
    "events_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/89/events",
    "html_url": "https://github.com/tpetricek/FSharp.Data/issues/89",
    "id": 11091705,
    "number": 89,
    "title": "Experimental package",
    "user": {
      "login": "ovatsus",
      "id": 738761,
      "avatar_url": "https://secure.gravatar.com/avatar/e6ae26138cd96ab168c1808f2af693f0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "e6ae26138cd96ab168c1808f2af693f0",
      "url": "https://api.github.com/users/ovatsus",
      "html_url": "https://github.com/ovatsus",
      "followers_url": "https://api.github.com/users/ovatsus/followers",
      "following_url": "https://api.github.com/users/ovatsus/following",
      "gists_url": "https://api.github.com/users/ovatsus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ovatsus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ovatsus/subscriptions",
      "organizations_url": "https://api.github.com/users/ovatsus/orgs",
      "repos_url": "https://api.github.com/users/ovatsus/repos",
      "events_url": "https://api.github.com/users/ovatsus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ovatsus/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-02-17T18:45:56Z",
    "updated_at": "2013-02-17T18:45:56Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/tpetricek/FSharp.Data/pull/89",
      "diff_url": "https://github.com/tpetricek/FSharp.Data/pull/89.diff",
      "patch_url": "https://github.com/tpetricek/FSharp.Data/pull/89.patch"
    },
    "body": "List of changes:\r\n* Fixed a couple of bugs in AssemblyReplacer that only applied to Apiary\r\n* The api has changed and the json now has `request` and `responses` instead of `incoming` and `outgoing`\r\n* The json generator had JsonDcument hardcoded on some places, adapted it so it works with apiary\r\n* Added the replace.ToRuntime and replace.ToDesigntime where needed\r\n* Instead of referencing the non experimental dll, the minimum needed files are reincluded in the experimental .fsproj. This was needed otherwise AssemblyReplacer wouldn't work. It still only has the Apiary provider, the extra stuff is internal\r\n* Changed the sample to cope with the new signatures generated by json provider\r\n* Added the new type of signature tests for Apiary also"
  },
  {
    "url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/85",
    "labels_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/85/labels{/name}",
    "comments_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/85/comments",
    "events_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/85/events",
    "html_url": "https://github.com/tpetricek/FSharp.Data/issues/85",
    "id": 11067374,
    "number": 85,
    "title": "Added ability to override or add headers to CSV provider",
    "user": {
      "login": "colinbull",
      "id": 585546,
      "avatar_url": "https://secure.gravatar.com/avatar/d9dd4f2053c161a94581a0d0d366d03d?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "d9dd4f2053c161a94581a0d0d366d03d",
      "url": "https://api.github.com/users/colinbull",
      "html_url": "https://github.com/colinbull",
      "followers_url": "https://api.github.com/users/colinbull/followers",
      "following_url": "https://api.github.com/users/colinbull/following",
      "gists_url": "https://api.github.com/users/colinbull/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/colinbull/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/colinbull/subscriptions",
      "organizations_url": "https://api.github.com/users/colinbull/orgs",
      "repos_url": "https://api.github.com/users/colinbull/repos",
      "events_url": "https://api.github.com/users/colinbull/events{/privacy}",
      "received_events_url": "https://api.github.com/users/colinbull/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 5,
    "created_at": "2013-02-16T13:46:43Z",
    "updated_at": "2013-02-17T14:12:12Z",
    "closed_at": null,
    "pull_request": {
      "html_url": "https://github.com/tpetricek/FSharp.Data/pull/85",
      "diff_url": "https://github.com/tpetricek/FSharp.Data/pull/85.diff",
      "patch_url": "https://github.com/tpetricek/FSharp.Data/pull/85.patch"
    },
    "body": "Can now override the headers provided in a CSV file or add them if they don't exist. Also added the ability to change the amount of rows are skipped. This is required because 1 row was always skipped which caused some problems for header less CSV's. "
  },
  {
    "url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/80",
    "labels_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/80/labels{/name}",
    "comments_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/80/comments",
    "events_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/80/events",
    "html_url": "https://github.com/tpetricek/FSharp.Data/issues/80",
    "id": 11036707,
    "number": 80,
    "title": "Freebase provider fetching too much data - AllowLocalQueryEvaluation=false not working?",
    "user": {
      "login": "ovatsus",
      "id": 738761,
      "avatar_url": "https://secure.gravatar.com/avatar/e6ae26138cd96ab168c1808f2af693f0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "e6ae26138cd96ab168c1808f2af693f0",
      "url": "https://api.github.com/users/ovatsus",
      "html_url": "https://github.com/ovatsus",
      "followers_url": "https://api.github.com/users/ovatsus/followers",
      "following_url": "https://api.github.com/users/ovatsus/following",
      "gists_url": "https://api.github.com/users/ovatsus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ovatsus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ovatsus/subscriptions",
      "organizations_url": "https://api.github.com/users/ovatsus/orgs",
      "repos_url": "https://api.github.com/users/ovatsus/repos",
      "events_url": "https://api.github.com/users/ovatsus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ovatsus/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-02-15T14:09:54Z",
    "updated_at": "2013-02-15T14:09:54Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "In this query\r\n\r\n    let people = \r\n        query {\r\n            for p in data2.Commons.People.Persons do\r\n            where (p.Name.ApproximatelyMatches \"^Evelyn \")\r\n            where (p.Gender <> null)\r\n            groupBy p.Gender.Name into g\r\n            select (g.Key, g.Count())\r\n        } |> Seq.toList\r\n\r\nI was expecting to get only a single MQL query, something like this (from http://infotrope.net/2009/09/10/gendered-names-in-freebase/)\r\n<pre>\r\n[{\r\n    \"id\":   null,\r\n    \"type\": \"/people/gender\",\r\n    \"!/people/person/gender\": [{\r\n    \"type\":   \"/people/person\",\r\n    \"name~=\": \"^Evelyn \",\r\n    \"return\": \"count\"\r\n    }]\r\n}]\r\n</pre>\r\n\r\nBut there are 465 mql queries being made, 1 for the query itself and 464 for each person that matches the where clauses, even though I'm not including any person data in the select, just a string. It seems the group by is being done locally, but I have AllowLocalQueryEvaluation=false, and didn't get any error"
  },
  {
    "url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/79",
    "labels_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/79/labels{/name}",
    "comments_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/79/comments",
    "events_url": "https://api.github.com/repos/tpetricek/FSharp.Data/issues/79/events",
    "html_url": "https://github.com/tpetricek/FSharp.Data/issues/79",
    "id": 11036400,
    "number": 79,
    "title": "Freebase query error when comparing to null",
    "user": {
      "login": "ovatsus",
      "id": 738761,
      "avatar_url": "https://secure.gravatar.com/avatar/e6ae26138cd96ab168c1808f2af693f0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png",
      "gravatar_id": "e6ae26138cd96ab168c1808f2af693f0",
      "url": "https://api.github.com/users/ovatsus",
      "html_url": "https://github.com/ovatsus",
      "followers_url": "https://api.github.com/users/ovatsus/followers",
      "following_url": "https://api.github.com/users/ovatsus/following",
      "gists_url": "https://api.github.com/users/ovatsus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ovatsus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ovatsus/subscriptions",
      "organizations_url": "https://api.github.com/users/ovatsus/orgs",
      "repos_url": "https://api.github.com/users/ovatsus/repos",
      "events_url": "https://api.github.com/users/ovatsus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ovatsus/received_events",
      "type": "User"
    },
    "labels": [

    ],
    "state": "open",
    "assignee": null,
    "milestone": null,
    "comments": 0,
    "created_at": "2013-02-15T14:00:09Z",
    "updated_at": "2013-02-15T14:00:09Z",
    "closed_at": null,
    "pull_request": {
      "html_url": null,
      "diff_url": null,
      "patch_url": null
    },
    "body": "This query works fine:\r\n\r\n    query {\r\n        for p in data.Commons.People.Persons do\r\n        where (p.Name.ApproximatelyMatches \"^Evelyn \")\r\n        where (p.Gender <> null)\r\n        select p\r\n    }\r\n\r\nbut this one fails with an error:\r\n\r\n    query {\r\n        for p in data2.Commons.People.Persons do\r\n        where (p.Name.ApproximatelyMatches \"^Evelyn \")\r\n        where (p.Gender = null)\r\n        select p\r\n    }\r\n\r\n>System.Exception: unknown qualification - not a lambda - p => (p.GetPropertyByIdTyped(\"/people/person\", \"/people/person/gender\") == null), Lambda, true\r\n   at Microsoft.FSharp.Linq.RuntimeHelpers.LeafExpressionConverter.EvaluateQuotation(FSharpExpr e)\r\n   at Microsoft.FSharp.Linq.QueryModule.EvalNonNestedInner(CanEliminate canElim, FSharpExpr queryProducingSequence)\r\n   at Microsoft.FSharp.Linq.QueryModule.EvalNonNestedOuter(CanEliminate canElim, FSharpExpr tm)"
  }
]"""