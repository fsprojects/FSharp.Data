[{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data.html","title":"FSharp.Data","content":"JsonSchemaExtensions \nCsvProvider \nHtmlProvider \nJsonProvider \nJsonSchemaValidationResult \nWorldBankData \nWorldBankDataProvider \nXmlProvider \nJsonExtensions \nJsonValue \nJsonExtensions \nJsonSaveOptions \nJsonValue \nCssSelectorExtensions \nHtmlActivePatterns \nHtmlAttribute \nHtmlAutoOpens \nHtmlDocument \nHtmlExtensions \nHtmlNode \nHtmlAttribute \nHtmlAttributeExtensions \nHtmlDocument \nHtmlDocumentExtensions \nHtmlNode \nHtmlNodeExtensions \nHttpContentTypes \nHttpEncodings \nHttpMethod \nHttpRequestHeaders \nHttpResponseHeaders \nHttpStatusCodes \nMimeTypes \nHttp \nHttpRequestBody \nHttpResponse \nHttpResponseBody \nHttpResponseWithStream \nMultipartFileItem \nMultipartFormDataItem \nMultipartItem \nXElementExtensions \nCsvExtensions \nCsvFile \nCsvRow \nStringExtensions \nInferenceMode \nTextConversions","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime.html","title":"FSharp.Data.Runtime","content":"JsonSchema \nJsonConversions \nJsonRuntime \nJsonValueOptionAndPath \nHtmlInference \nHtmlRuntime \nHtmlDefinitionList \nHtmlList \nHtmlObjectDescription \nHtmlTable \nHtmlTableCell \nXmlSchema \nXmlRuntime \nCsvInference \nCsvFile\u003C\u0027RowType\u003E \nIO \nNameUtils \nStructuralInference \nTextRuntime","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes.html","title":"FSharp.Data.Runtime.BaseTypes","content":"IJsonDocument \nJsonDocument \nHtmlDocument \nHtmlList\u003C\u0027ItemType\u003E \nHtmlTable\u003C\u0027RowType\u003E \nXmlElement","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes.html","title":"FSharp.Data.Runtime.StructuralTypes","content":"Bit \nBit0 \nBit1 \nInferedMultiplicity \nInferedProperty \nInferedType \nInferedTypeTag \nTypeWrapper","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank.html","title":"FSharp.Data.Runtime.WorldBank","content":"Implementation \nCountry \nCountryCollection\u003C\u0027T\u003E \nICountry \nICountryCollection \nIIndicators \nIIndicatorsDescriptions \nIRegion \nIRegionCollection \nITopic \nITopicCollection \nIWorldBankData \nIndicator \nIndicatorDescription \nIndicators \nIndicatorsDescriptions \nRegion \nRegionCollection\u003C\u0027T\u003E \nTopic \nTopicCollection\u003C\u0027T\u003E \nWorldBankData","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation.html","title":"ProviderImplementation","content":"JsonInference \nXsdModel \nXsdParsing","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemaextensions.html","title":"JsonSchemaExtensions","content":"JsonSchemaExtensions \n \nJsonSchemaExtensions.ParseJsonSchema \nParseJsonSchema \nJsonSchemaExtensions.LoadJsonSchema \nLoadJsonSchema \nJsonSchemaExtensions.ValidateJsonAgainstSchema \nValidateJsonAgainstSchema","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemaextensions.html#ParseJsonSchema","title":"JsonSchemaExtensions.ParseJsonSchema","content":"JsonSchemaExtensions.ParseJsonSchema \nParseJsonSchema \n Parse a JSON Schema from a string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemaextensions.html#LoadJsonSchema","title":"JsonSchemaExtensions.LoadJsonSchema","content":"JsonSchemaExtensions.LoadJsonSchema \nLoadJsonSchema \n Parse a JSON Schema from a file","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemaextensions.html#ValidateJsonAgainstSchema","title":"JsonSchemaExtensions.ValidateJsonAgainstSchema","content":"JsonSchemaExtensions.ValidateJsonAgainstSchema \nValidateJsonAgainstSchema \n Validate a JSON value against a schema","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html","title":"CsvProvider","content":"CsvProvider \nTyped representation of a CSV file. \nCsvProvider.Sample \nSample \nCsvProvider.Separators \nSeparators \nCsvProvider.InferRows \nInferRows \nCsvProvider.Schema \nSchema \nCsvProvider.HasHeaders \nHasHeaders \nCsvProvider.IgnoreErrors \nIgnoreErrors \nCsvProvider.SkipRows \nSkipRows \nCsvProvider.AssumeMissingValues \nAssumeMissingValues \nCsvProvider.PreferOptionals \nPreferOptionals \nCsvProvider.Quote \nQuote \nCsvProvider.MissingValues \nMissingValues \nCsvProvider.CacheRows \nCacheRows \nCsvProvider.Culture \nCulture \nCsvProvider.Encoding \nEncoding \nCsvProvider.ResolutionFolder \nResolutionFolder \nCsvProvider.EmbeddedResource \nEmbeddedResource","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Sample","title":"CsvProvider.Sample","content":"CsvProvider.Sample \nSample \nLocation of a CSV sample file or a string containing a sample CSV document.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Separators","title":"CsvProvider.Separators","content":"CsvProvider.Separators \nSeparators \nColumn delimiter(s). Defaults to ,.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#InferRows","title":"CsvProvider.InferRows","content":"CsvProvider.InferRows \nInferRows \nNumber of rows to use for inference. Defaults to 1000. If this is zero, all rows are used.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Schema","title":"CsvProvider.Schema","content":"CsvProvider.Schema \nSchema \n\u003Cpre\u003EOptional column types, in a comma separated list. Valid types are int, int64, bool, float, decimal, date, datetimeoffset, timespan, guid, string, int?, int64?, bool?, float?, decimal?, date?, datetimeoffset?, timespan?, guid?, int option, int64 option, bool option, float option, decimal option, date option, datetimeoffset option, timespan option, guid option and string option.\n           You can also specify a unit and the name of the column like this: Name (type\u003Cunit\u003E), or you can override only the name. If you don\u0027t want to specify all the columns, you can reference the columns by name like this: ColumnName=type.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#HasHeaders","title":"CsvProvider.HasHeaders","content":"CsvProvider.HasHeaders \nHasHeaders \nWhether the sample contains the names of the columns as its first line.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#IgnoreErrors","title":"CsvProvider.IgnoreErrors","content":"CsvProvider.IgnoreErrors \nIgnoreErrors \nWhether to ignore rows that have the wrong number of columns or which can\u0027t be parsed using the inferred or specified schema. Otherwise an exception is thrown when these rows are encountered.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#SkipRows","title":"CsvProvider.SkipRows","content":"CsvProvider.SkipRows \nSkipRows \nSkips the first n rows of the CSV file.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#AssumeMissingValues","title":"CsvProvider.AssumeMissingValues","content":"CsvProvider.AssumeMissingValues \nAssumeMissingValues \nWhen set to true, the type provider will assume all columns can have missing values, even if in the provided sample all values are present. Defaults to false.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#PreferOptionals","title":"CsvProvider.PreferOptionals","content":"CsvProvider.PreferOptionals \nPreferOptionals \nWhen set to true, inference will prefer to use the option type instead of nullable types, double.NaN or \u0022\u0022 for missing values. Defaults to false.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Quote","title":"CsvProvider.Quote","content":"CsvProvider.Quote \nQuote \nThe quotation mark (for surrounding values containing the delimiter). Defaults to \u0022.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#MissingValues","title":"CsvProvider.MissingValues","content":"CsvProvider.MissingValues \nMissingValues \nThe set of strings recognized as missing values specified as a comma-separated string (e.g., \u0022NA,N/A\u0022). Defaults to NaN,NA,N/A,#N/A,:,-,TBA,TBD.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#CacheRows","title":"CsvProvider.CacheRows","content":"CsvProvider.CacheRows \nCacheRows \nWhether the rows should be caches so they can be iterated multiple times. Defaults to true. Disable for large datasets.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Culture","title":"CsvProvider.Culture","content":"CsvProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#Encoding","title":"CsvProvider.Encoding","content":"CsvProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless charset is specified in the Content-Type response header.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#ResolutionFolder","title":"CsvProvider.ResolutionFolder","content":"CsvProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvprovider.html#EmbeddedResource","title":"CsvProvider.EmbeddedResource","content":"CsvProvider.EmbeddedResource \nEmbeddedResource \n\u003Cpre\u003EWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.csv\u0027). This is useful when exposing types generated by the type provider.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html","title":"HtmlProvider","content":"HtmlProvider \nTyped representation of an HTML file. \nHtmlProvider.Sample \nSample \nHtmlProvider.PreferOptionals \nPreferOptionals \nHtmlProvider.IncludeLayoutTables \nIncludeLayoutTables \nHtmlProvider.MissingValues \nMissingValues \nHtmlProvider.Culture \nCulture \nHtmlProvider.Encoding \nEncoding \nHtmlProvider.ResolutionFolder \nResolutionFolder \nHtmlProvider.EmbeddedResource \nEmbeddedResource","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#Sample","title":"HtmlProvider.Sample","content":"HtmlProvider.Sample \nSample \nLocation of an HTML sample file or a string containing a sample HTML document.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#PreferOptionals","title":"HtmlProvider.PreferOptionals","content":"HtmlProvider.PreferOptionals \nPreferOptionals \nWhen set to true, inference will prefer to use the option type instead of nullable types, double.NaN or \u0022\u0022 for missing values. Defaults to false.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#IncludeLayoutTables","title":"HtmlProvider.IncludeLayoutTables","content":"HtmlProvider.IncludeLayoutTables \nIncludeLayoutTables \nIncludes tables that are potentially layout tables (with cellpadding=0 and cellspacing=0 attributes)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#MissingValues","title":"HtmlProvider.MissingValues","content":"HtmlProvider.MissingValues \nMissingValues \nThe set of strings recognized as missing values. Defaults to NaN,NA,N/A,#N/A,:,-,TBA,TBD.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#Culture","title":"HtmlProvider.Culture","content":"HtmlProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#Encoding","title":"HtmlProvider.Encoding","content":"HtmlProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless charset is specified in the Content-Type response header.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#ResolutionFolder","title":"HtmlProvider.ResolutionFolder","content":"HtmlProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlprovider.html#EmbeddedResource","title":"HtmlProvider.EmbeddedResource","content":"HtmlProvider.EmbeddedResource \nEmbeddedResource \n\u003Cpre\u003EWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.html\u0027). This is useful when exposing types generated by the type provider.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html","title":"JsonProvider","content":"JsonProvider \nTyped representation of a JSON document. \nJsonProvider.Sample \nSample \nJsonProvider.SampleIsList \nSampleIsList \nJsonProvider.RootName \nRootName \nJsonProvider.Culture \nCulture \nJsonProvider.Encoding \nEncoding \nJsonProvider.ResolutionFolder \nResolutionFolder \nJsonProvider.EmbeddedResource \nEmbeddedResource \nJsonProvider.InferTypesFromValues \nInferTypesFromValues \nJsonProvider.PreferDictionaries \nPreferDictionaries \nJsonProvider.InferenceMode \nInferenceMode \nJsonProvider.Schema \nSchema","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Sample","title":"JsonProvider.Sample","content":"JsonProvider.Sample \nSample \nLocation of a JSON sample file or a string containing a sample JSON document.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#SampleIsList","title":"JsonProvider.SampleIsList","content":"JsonProvider.SampleIsList \nSampleIsList \nIf true, sample should be a list of individual samples for the inference.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#RootName","title":"JsonProvider.RootName","content":"JsonProvider.RootName \nRootName \nThe name to be used to the root type. Defaults to \u0060Root\u0060.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Culture","title":"JsonProvider.Culture","content":"JsonProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Encoding","title":"JsonProvider.Encoding","content":"JsonProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless \u0060charset\u0060 is specified in the \u0060Content-Type\u0060 response header.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#ResolutionFolder","title":"JsonProvider.ResolutionFolder","content":"JsonProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#EmbeddedResource","title":"JsonProvider.EmbeddedResource","content":"JsonProvider.EmbeddedResource \nEmbeddedResource \n\u003Cpre\u003EWhen specified, the type provider first attempts to load the sample from the specified resource\n              (e.g. \u0027MyCompany.MyAssembly, resource_name.json\u0027). This is useful when exposing types generated by the type provider.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#InferTypesFromValues","title":"JsonProvider.InferTypesFromValues","content":"JsonProvider.InferTypesFromValues \nInferTypesFromValues \n              This parameter is deprecated. Please use InferenceMode instead.\n              If true, turns on additional type inference from values.\n              (e.g. type inference infers string values such as \u0022123\u0022 as ints and values constrained to 0 and 1 as booleans.)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#PreferDictionaries","title":"JsonProvider.PreferDictionaries","content":"JsonProvider.PreferDictionaries \nPreferDictionaries \nIf true, json records are interpreted as dictionaries when the names of all the fields are inferred (by type inference rules) into the same non-string primitive type.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#InferenceMode","title":"JsonProvider.InferenceMode","content":"JsonProvider.InferenceMode \nInferenceMode \n\u003Cpre\u003EPossible values:\n              | NoInference -\u003E Inference is disabled. All values are inferred as the most basic type permitted for the value (i.e. string or number or bool).\n              | ValuesOnly -\u003E Types of values are inferred from the Sample. Inline schema support is disabled. This is the default.\n              | ValuesAndInlineSchemasHints -\u003E Types of values are inferred from both values and inline schemas. Inline schemas are special string values that can define a type and/or unit of measure. Supported syntax: typeof\u003Ctype\u003E or typeof{type} or typeof\u003Ctype\u003Cmeasure\u003E\u003E or typeof{type{measure}}. Valid measures are the default SI units, and valid types are int, int64, bool, float, decimal, date, datetimeoffset, timespan, guid and string.\n              | ValuesAndInlineSchemasOverrides -\u003E Same as ValuesAndInlineSchemasHints, but value inferred types are ignored when an inline schema is present.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonprovider.html#Schema","title":"JsonProvider.Schema","content":"JsonProvider.Schema \nSchema \nLocation of a JSON Schema file or a string containing a JSON Schema document. When specified, Sample and SampleIsList must not be used.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemavalidationresult.html","title":"JsonSchemaValidationResult","content":"JsonSchemaValidationResult \n Represents the result of validating a JSON value against a schema \nJsonSchemaValidationResult.Valid \nValid \nJsonSchemaValidationResult.Invalid \nInvalid","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemavalidationresult.html#Valid","title":"JsonSchemaValidationResult.Valid","content":"JsonSchemaValidationResult.Valid \nValid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonschemavalidationresult.html#Invalid","title":"JsonSchemaValidationResult.Invalid","content":"JsonSchemaValidationResult.Invalid \nInvalid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdata.html","title":"WorldBankData","content":"WorldBankData \n\u003Cpre\u003E\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdataprovider.html","title":"WorldBankDataProvider","content":"WorldBankDataProvider \nTyped representation of WorldBank data with additional configuration parameters. See https://www.worldbank.org for terms and conditions. \nWorldBankDataProvider.Sources \nSources \nWorldBankDataProvider.Asynchronous \nAsynchronous","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdataprovider.html#Sources","title":"WorldBankDataProvider.Sources","content":"WorldBankDataProvider.Sources \nSources \n\u003Cpre\u003EThe World Bank data sources to include, separated by semicolons. Defaults to World Development Indicators;Global Financial Development.\n                        If an empty string is specified, includes all data sources.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-worldbankdataprovider.html#Asynchronous","title":"WorldBankDataProvider.Asynchronous","content":"WorldBankDataProvider.Asynchronous \nAsynchronous \nGenerate asynchronous calls. Defaults to false.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html","title":"XmlProvider","content":"XmlProvider \nTyped representation of a XML file. \nXmlProvider.Sample \nSample \nXmlProvider.SampleIsList \nSampleIsList \nXmlProvider.Global \nGlobal \nXmlProvider.Culture \nCulture \nXmlProvider.Encoding \nEncoding \nXmlProvider.ResolutionFolder \nResolutionFolder \nXmlProvider.EmbeddedResource \nEmbeddedResource \nXmlProvider.InferTypesFromValues \nInferTypesFromValues \nXmlProvider.Schema \nSchema \nXmlProvider.InferenceMode \nInferenceMode","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Sample","title":"XmlProvider.Sample","content":"XmlProvider.Sample \nSample \nLocation of a XML sample file or a string containing a sample XML document.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#SampleIsList","title":"XmlProvider.SampleIsList","content":"XmlProvider.SampleIsList \nSampleIsList \nIf true, the children of the root in the sample document represent individual samples for the inference.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Global","title":"XmlProvider.Global","content":"XmlProvider.Global \nGlobal \nIf true, the inference unifies all XML elements with the same name.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Culture","title":"XmlProvider.Culture","content":"XmlProvider.Culture \nCulture \nThe culture used for parsing numbers and dates. Defaults to the invariant culture.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Encoding","title":"XmlProvider.Encoding","content":"XmlProvider.Encoding \nEncoding \nThe encoding used to read the sample. You can specify either the character set name or the codepage number. Defaults to UTF8 for files, and to ISO-8859-1 the for HTTP requests, unless charset is specified in the Content-Type response header.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#ResolutionFolder","title":"XmlProvider.ResolutionFolder","content":"XmlProvider.ResolutionFolder \nResolutionFolder \nA directory that is used when resolving relative file references (at design time and in hosted execution).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#EmbeddedResource","title":"XmlProvider.EmbeddedResource","content":"XmlProvider.EmbeddedResource \nEmbeddedResource \n\u003Cpre\u003EWhen specified, the type provider first attempts to load the sample from the specified resource \n              (e.g. \u0027MyCompany.MyAssembly, resource_name.xml\u0027). This is useful when exposing types generated by the type provider.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#InferTypesFromValues","title":"XmlProvider.InferTypesFromValues","content":"XmlProvider.InferTypesFromValues \nInferTypesFromValues \n              This parameter is deprecated. Please use InferenceMode instead.\n              If true, turns on additional type inference from values. \n              (e.g. type inference infers string values such as \u0022123\u0022 as ints and values constrained to 0 and 1 as booleans. The XmlProvider also infers string values as JSON.)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#Schema","title":"XmlProvider.Schema","content":"XmlProvider.Schema \nSchema \nLocation of a schema file or a string containing xsd.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xmlprovider.html#InferenceMode","title":"XmlProvider.InferenceMode","content":"XmlProvider.InferenceMode \nInferenceMode \n\u003Cpre\u003EPossible values:\n              | NoInference -\u003E Inference is disabled. All values are inferred as the most basic type permitted for the value (usually string).\n              | ValuesOnly -\u003E Types of values are inferred from the Sample. Inline schema support is disabled. This is the default.\n              | ValuesAndInlineSchemasHints -\u003E Types of values are inferred from both values and inline schemas. Inline schemas are special string values that can define a type and/or unit of measure. Supported syntax: typeof\u003Ctype\u003E or typeof{type} or typeof\u003Ctype\u003Cmeasure\u003E\u003E or typeof{type{measure}}. Valid measures are the default SI units, and valid types are int, int64, bool, float, decimal, date, datetimeoffset, timespan, guid and string.\n              | ValuesAndInlineSchemasOverrides -\u003E Same as ValuesAndInlineSchemasHints, but value inferred types are ignored when an inline schema is present.\n              Note inline schemas are not used from Xsd documents.\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html","title":"JsonExtensions","content":"JsonExtensions \n Provides the dynamic operator for getting a property of a JSON object \nJsonExtensions.(?) \n(?) \nJsonExtensions.Properties \nProperties \nJsonExtensions.Properties \nProperties","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html#(?)","title":"JsonExtensions.(?)","content":"JsonExtensions.(?) \n(?) \n Get a property of a JSON object","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html#Properties","title":"JsonExtensions.Properties","content":"JsonExtensions.Properties \nProperties \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensionsmodule.html#Properties","title":"JsonExtensions.Properties","content":"JsonExtensions.Properties \nProperties \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvaluemodule.html","title":"JsonValue","content":"JsonValue \n \nJsonValue.Object \nObject \nJsonValue.(|Object|_|) \n(|Object|_|)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvaluemodule.html#Object","title":"JsonValue.Object","content":"JsonValue.Object \nObject \n Constructor to create a \u0060JsonValue.Record of (string * JsonValue)[]\u0060 as a \u0060JsonValue.Object of Map\u003Cstring, JsonValue\u003E\u0060 for\n backwards compatibility reaons","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvaluemodule.html#(|Object|_|)","title":"JsonValue.(|Object|_|)","content":"JsonValue.(|Object|_|) \n(|Object|_|) \n Active Pattern to view a \u0060JsonValue.Record of (string * JsonValue)[]\u0060 as a \u0060JsonValue.Object of Map\u003Cstring, JsonValue\u003E\u0060 for\n backwards compatibility reaons","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html","title":"JsonExtensions","content":"JsonExtensions \n Extension methods that can be used to work with JsonValue in a less safe, but more convenient way.\n This module also provides the dynamic operator. \nJsonExtensions.AsArray \nAsArray \nJsonExtensions.AsBoolean \nAsBoolean \nJsonExtensions.AsDateTime \nAsDateTime \nJsonExtensions.AsDateTimeOffset \nAsDateTimeOffset \nJsonExtensions.AsDecimal \nAsDecimal \nJsonExtensions.AsFloat \nAsFloat \nJsonExtensions.AsGuid \nAsGuid \nJsonExtensions.AsInteger \nAsInteger \nJsonExtensions.AsInteger64 \nAsInteger64 \nJsonExtensions.AsString \nAsString \nJsonExtensions.AsTimeSpan \nAsTimeSpan \nJsonExtensions.GetEnumerator \nGetEnumerator \nJsonExtensions.GetProperty \nGetProperty \nJsonExtensions.InnerText \nInnerText \nJsonExtensions.Item \nItem \nJsonExtensions.Item \nItem \nJsonExtensions.Properties \nProperties \nJsonExtensions.TryGetProperty \nTryGetProperty","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsArray","title":"JsonExtensions.AsArray","content":"JsonExtensions.AsArray \nAsArray \n Get all the elements of a JSON value.\n Returns an empty array if the value is not a JSON array.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsBoolean","title":"JsonExtensions.AsBoolean","content":"JsonExtensions.AsBoolean \nAsBoolean \n Get the boolean value of an element (assuming that the value is a boolean)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsDateTime","title":"JsonExtensions.AsDateTime","content":"JsonExtensions.AsDateTime \nAsDateTime \n Get the datetime value of an element (assuming that the value is a string\n containing well-formed ISO date or MSFT JSON date)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsDateTimeOffset","title":"JsonExtensions.AsDateTimeOffset","content":"JsonExtensions.AsDateTimeOffset \nAsDateTimeOffset \n Get the datetime offset value of an element (assuming that the value is a string\n containing well-formed ISO date time with offset or MSFT JSON datetime with offset)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsDecimal","title":"JsonExtensions.AsDecimal","content":"JsonExtensions.AsDecimal \nAsDecimal \n Get a number as a decimal (assuming that the value fits in decimal)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsFloat","title":"JsonExtensions.AsFloat","content":"JsonExtensions.AsFloat \nAsFloat \n Get a number as a float (assuming that the value is convertible to a float)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsGuid","title":"JsonExtensions.AsGuid","content":"JsonExtensions.AsGuid \nAsGuid \n Get the guid value of an element (assuming that the value is a guid)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsInteger","title":"JsonExtensions.AsInteger","content":"JsonExtensions.AsInteger \nAsInteger \n Get a number as an integer (assuming that the value fits in integer)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsInteger64","title":"JsonExtensions.AsInteger64","content":"JsonExtensions.AsInteger64 \nAsInteger64 \n Get a number as a 64-bit integer (assuming that the value fits in 64-bit integer)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsString","title":"JsonExtensions.AsString","content":"JsonExtensions.AsString \nAsString \n Get the string value of an element (assuming that the value is a scalar)\n Returns the empty string for JsonValue.Null","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#AsTimeSpan","title":"JsonExtensions.AsTimeSpan","content":"JsonExtensions.AsTimeSpan \nAsTimeSpan \n Get the timespan value of an element (assuming that the value is a string\n containing well-formed time span)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#GetEnumerator","title":"JsonExtensions.GetEnumerator","content":"JsonExtensions.GetEnumerator \nGetEnumerator \n Get all the elements of a JSON value (assuming that the value is an array)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#GetProperty","title":"JsonExtensions.GetProperty","content":"JsonExtensions.GetProperty \nGetProperty \n Get property of a JSON object. Fails if the value is not an object\n or if the property is not present","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#InnerText","title":"JsonExtensions.InnerText","content":"JsonExtensions.InnerText \nInnerText \n Get inner text of an element","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#Item","title":"JsonExtensions.Item","content":"JsonExtensions.Item \nItem \n Try to get the value at the specified index, if the value is a JSON array.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#Item","title":"JsonExtensions.Item","content":"JsonExtensions.Item \nItem \n Assuming the value is an object, get value with the specified name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#Properties","title":"JsonExtensions.Properties","content":"JsonExtensions.Properties \nProperties \n Get a sequence of key-value pairs representing the properties of an object","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonextensions.html#TryGetProperty","title":"JsonExtensions.TryGetProperty","content":"JsonExtensions.TryGetProperty \nTryGetProperty \n Try to get a property of a JSON value.\n Returns None if the value is not an object or if the property is not present.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html","title":"JsonSaveOptions","content":"JsonSaveOptions \n Specifies the formatting behaviour of JSON values \nJsonSaveOptions.None \nNone \nJsonSaveOptions.DisableFormatting \nDisableFormatting \nJsonSaveOptions.CompactSpaceAfterComma \nCompactSpaceAfterComma","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html#None","title":"JsonSaveOptions.None","content":"JsonSaveOptions.None \nNone \n Format (indent) the JsonValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html#DisableFormatting","title":"JsonSaveOptions.DisableFormatting","content":"JsonSaveOptions.DisableFormatting \nDisableFormatting \n Print the JsonValue in one line in a compact way","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonsaveoptions.html#CompactSpaceAfterComma","title":"JsonSaveOptions.CompactSpaceAfterComma","content":"JsonSaveOptions.CompactSpaceAfterComma \nCompactSpaceAfterComma \n Print the JsonValue in one line in a compact way,\n but place a single space after every comma\n https://github.com/fsprojects/FSharp.Data/issues/1482","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html","title":"JsonValue","content":"JsonValue \n Represents a JSON value. Large numbers that do not fit in the\n Decimal type are represented using the Float case, while\n smaller numbers are represented as decimals to avoid precision loss. \nJsonValue.Post \nPost \nJsonValue.Request \nRequest \nJsonValue.RequestAsync \nRequestAsync \nJsonValue.ToString \nToString \nJsonValue.ToString \nToString \nJsonValue.WriteTo \nWriteTo \nJsonValue._Print \n_Print \nJsonValue.AsyncLoad \nAsyncLoad \nJsonValue.Load \nLoad \nJsonValue.Load \nLoad \nJsonValue.Load \nLoad \nJsonValue.Parse \nParse \nJsonValue.ParseMultiple \nParseMultiple \nJsonValue.TryParse \nTryParse \nJsonValue.String \nString \nJsonValue.Number \nNumber \nJsonValue.Float \nFloat \nJsonValue.Record \nRecord \nJsonValue.Array \nArray \nJsonValue.Boolean \nBoolean \nJsonValue.Null \nNull","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Post","title":"JsonValue.Post","content":"JsonValue.Post \nPost \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Request","title":"JsonValue.Request","content":"JsonValue.Request \nRequest \n Sends the JSON to the specified URL synchronously. Defaults to a POST request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#RequestAsync","title":"JsonValue.RequestAsync","content":"JsonValue.RequestAsync \nRequestAsync \n Sends the JSON to the specified URL asynchronously. Defaults to a POST request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#ToString","title":"JsonValue.ToString","content":"JsonValue.ToString \nToString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#ToString","title":"JsonValue.ToString","content":"JsonValue.ToString \nToString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#WriteTo","title":"JsonValue.WriteTo","content":"JsonValue.WriteTo \nWriteTo \n Serializes the JsonValue to the specified System.IO.TextWriter.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#_Print","title":"JsonValue._Print","content":"JsonValue._Print \n_Print \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#AsyncLoad","title":"JsonValue.AsyncLoad","content":"JsonValue.AsyncLoad \nAsyncLoad \n Loads JSON from the specified uri asynchronously","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Load","title":"JsonValue.Load","content":"JsonValue.Load \nLoad \n Loads JSON from the specified uri","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Load","title":"JsonValue.Load","content":"JsonValue.Load \nLoad \n Loads JSON from the specified reader","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Load","title":"JsonValue.Load","content":"JsonValue.Load \nLoad \n Loads JSON from the specified stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Parse","title":"JsonValue.Parse","content":"JsonValue.Parse \nParse \n Parses the specified JSON string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#ParseMultiple","title":"JsonValue.ParseMultiple","content":"JsonValue.ParseMultiple \nParseMultiple \n Parses the specified string into multiple JSON values","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#TryParse","title":"JsonValue.TryParse","content":"JsonValue.TryParse \nTryParse \n Attempts to parse the specified JSON string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#String","title":"JsonValue.String","content":"JsonValue.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Number","title":"JsonValue.Number","content":"JsonValue.Number \nNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Float","title":"JsonValue.Float","content":"JsonValue.Float \nFloat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Record","title":"JsonValue.Record","content":"JsonValue.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Array","title":"JsonValue.Array","content":"JsonValue.Array \nArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Boolean","title":"JsonValue.Boolean","content":"JsonValue.Boolean \nBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-jsonvalue.html#Null","title":"JsonValue.Null","content":"JsonValue.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions.html","title":"CssSelectorExtensions","content":"CssSelectorExtensions \n \nCssSelectorExtensions.CssSelectorExtensions \nCssSelectorExtensions","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html","title":"CssSelectorExtensions","content":"CssSelectorExtensions \n \nCssSelectorExtensions.CssSelect \nCssSelect \nCssSelectorExtensions.CssSelect \nCssSelect \nCssSelectorExtensions.CssSelect \nCssSelect","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html#CssSelect","title":"CssSelectorExtensions.CssSelect","content":"CssSelectorExtensions.CssSelect \nCssSelect \n Gets descendants matched by Css selector","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html#CssSelect","title":"CssSelectorExtensions.CssSelect","content":"CssSelectorExtensions.CssSelect \nCssSelect \n Gets descendants matched by Css selector","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-cssselectorextensions-cssselectorextensions.html#CssSelect","title":"CssSelectorExtensions.CssSelect","content":"CssSelectorExtensions.CssSelect \nCssSelect \n Gets descendants matched by Css selector","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlactivepatterns.html","title":"HtmlActivePatterns","content":"HtmlActivePatterns \n \nHtmlActivePatterns.(|HtmlElement|HtmlText|HtmlComment|HtmlCData|) \n(|HtmlElement|HtmlText|HtmlComment|HtmlCData|) \nHtmlActivePatterns.(|HtmlAttribute|) \n(|HtmlAttribute|)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlactivepatterns.html#(|HtmlElement|HtmlText|HtmlComment|HtmlCData|)","title":"HtmlActivePatterns.(|HtmlElement|HtmlText|HtmlComment|HtmlCData|)","content":"HtmlActivePatterns.(|HtmlElement|HtmlText|HtmlComment|HtmlCData|) \n(|HtmlElement|HtmlText|HtmlComment|HtmlCData|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlactivepatterns.html#(|HtmlAttribute|)","title":"HtmlActivePatterns.(|HtmlAttribute|)","content":"HtmlActivePatterns.(|HtmlAttribute|) \n(|HtmlAttribute|) \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributemodule.html","title":"HtmlAttribute","content":"HtmlAttribute \n \nHtmlAttribute.name \nname \nHtmlAttribute.value \nvalue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributemodule.html#name","title":"HtmlAttribute.name","content":"HtmlAttribute.name \nname \n Gets the name of the given attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributemodule.html#value","title":"HtmlAttribute.value","content":"HtmlAttribute.value \nvalue \n Gets the value of the given attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html","title":"HtmlAutoOpens","content":"HtmlAutoOpens \n \nHtmlAutoOpens.Parse \nParse \nHtmlAutoOpens.Load \nLoad \nHtmlAutoOpens.Load \nLoad \nHtmlAutoOpens.AsyncLoad \nAsyncLoad \nHtmlAutoOpens.Load \nLoad \nHtmlAutoOpens.Parse \nParse \nHtmlAutoOpens.ParseRooted \nParseRooted","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#Parse","title":"HtmlAutoOpens.Parse","content":"HtmlAutoOpens.Parse \nParse \n Parses the specified HTML string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#Load","title":"HtmlAutoOpens.Load","content":"HtmlAutoOpens.Load \nLoad \n Loads HTML from the specified stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#Load","title":"HtmlAutoOpens.Load","content":"HtmlAutoOpens.Load \nLoad \n Loads HTML from the specified reader","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#AsyncLoad","title":"HtmlAutoOpens.AsyncLoad","content":"HtmlAutoOpens.AsyncLoad \nAsyncLoad \n Loads HTML from the specified uri asynchronously","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#Load","title":"HtmlAutoOpens.Load","content":"HtmlAutoOpens.Load \nLoad \n Loads HTML from the specified uri","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#Parse","title":"HtmlAutoOpens.Parse","content":"HtmlAutoOpens.Parse \nParse \n Parses the specified HTML string to a list of HTML nodes","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlautoopens.html#ParseRooted","title":"HtmlAutoOpens.ParseRooted","content":"HtmlAutoOpens.ParseRooted \nParseRooted \n Parses the specified HTML string to a list of HTML nodes","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html","title":"HtmlDocument","content":"HtmlDocument \n \nHtmlDocument.docType \ndocType \nHtmlDocument.elements \nelements \nHtmlDocument.elementsNamed \nelementsNamed \nHtmlDocument.descendants \ndescendants \nHtmlDocument.descendantsNamed \ndescendantsNamed \nHtmlDocument.descendantsWithPath \ndescendantsWithPath \nHtmlDocument.descendantsNamedWithPath \ndescendantsNamedWithPath \nHtmlDocument.body \nbody \nHtmlDocument.tryGetBody \ntryGetBody \nHtmlDocument.html \nhtml \nHtmlDocument.tryGetHtml \ntryGetHtml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#docType","title":"HtmlDocument.docType","content":"HtmlDocument.docType \ndocType \n Returns the doctype of the document","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#elements","title":"HtmlDocument.elements","content":"HtmlDocument.elements \nelements \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#elementsNamed","title":"HtmlDocument.elementsNamed","content":"HtmlDocument.elementsNamed \nelementsNamed \n\n Returns all of the root elements of the document that match the set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendants","title":"HtmlDocument.descendants","content":"HtmlDocument.descendants \ndescendants \n\n Gets all of the descendants of this document that statisfy the given predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendantsNamed","title":"HtmlDocument.descendantsNamed","content":"HtmlDocument.descendantsNamed \ndescendantsNamed \n\n Finds all of the descendant nodes of this document that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendantsWithPath","title":"HtmlDocument.descendantsWithPath","content":"HtmlDocument.descendantsWithPath \ndescendantsWithPath \n\n Gets all of the descendants of this document that statisfy the given predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#descendantsNamedWithPath","title":"HtmlDocument.descendantsNamedWithPath","content":"HtmlDocument.descendantsNamedWithPath \ndescendantsNamedWithPath \n\n Finds all of the descendant nodes of this document that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#body","title":"HtmlDocument.body","content":"HtmlDocument.body \nbody \n\n Finds the body element of the given document,\n this throws an exception if no body element exists.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#tryGetBody","title":"HtmlDocument.tryGetBody","content":"HtmlDocument.tryGetBody \ntryGetBody \n\n Tries to find the body element of the given document.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#html","title":"HtmlDocument.html","content":"HtmlDocument.html \nhtml \n\n Finds the html element of the given document,\n this throws an exception if no html element exists.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentmodule.html#tryGetHtml","title":"HtmlDocument.tryGetHtml","content":"HtmlDocument.tryGetHtml \ntryGetHtml \n\n Tries to find the html element of the given document.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlextensionsmodule.html","title":"HtmlExtensions","content":"HtmlExtensions \n \nHtmlExtensions.(?) \n(?)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlextensionsmodule.html#(?)","title":"HtmlExtensions.(?)","content":"HtmlExtensions.(?) \n(?) \n Gets the value of an attribute from an HTML element","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html","title":"HtmlNode","content":"HtmlNode \n \nHtmlNode.name \nname \nHtmlNode.elements \nelements \nHtmlNode.elementsNamed \nelementsNamed \nHtmlNode.descendants \ndescendants \nHtmlNode.descendantsAndSelf \ndescendantsAndSelf \nHtmlNode.descendantsNamed \ndescendantsNamed \nHtmlNode.descendantsAndSelfNamed \ndescendantsAndSelfNamed \nHtmlNode.descendantsWithPath \ndescendantsWithPath \nHtmlNode.descendantsAndSelfWithPath \ndescendantsAndSelfWithPath \nHtmlNode.descendantsNamedWithPath \ndescendantsNamedWithPath \nHtmlNode.descendantsAndSelfNamedWithPath \ndescendantsAndSelfNamedWithPath \nHtmlNode.attributes \nattributes \nHtmlNode.tryGetAttribute \ntryGetAttribute \nHtmlNode.attribute \nattribute \nHtmlNode.attributeValue \nattributeValue \nHtmlNode.hasAttribute \nhasAttribute \nHtmlNode.hasName \nhasName \nHtmlNode.hasId \nhasId \nHtmlNode.hasClass \nhasClass \nHtmlNode.innerTextExcluding \ninnerTextExcluding \nHtmlNode.innerText \ninnerText \nHtmlNode.directInnerText \ndirectInnerText \nHtmlNode.cssSelect \ncssSelect","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#name","title":"HtmlNode.name","content":"HtmlNode.name \nname \n Gets the given nodes name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#elements","title":"HtmlNode.elements","content":"HtmlNode.elements \nelements \n Gets all of the nodes immediately under this node","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#elementsNamed","title":"HtmlNode.elementsNamed","content":"HtmlNode.elementsNamed \nelementsNamed \n\n Finds all of the elements nodes of this node that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendants","title":"HtmlNode.descendants","content":"HtmlNode.descendants \ndescendants \n\n Gets all of the descendants of this node that statisfy the given predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelf","title":"HtmlNode.descendantsAndSelf","content":"HtmlNode.descendantsAndSelf \ndescendantsAndSelf \n\n Gets all of the descendants of this node that statisfy the given predicate\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsNamed","title":"HtmlNode.descendantsNamed","content":"HtmlNode.descendantsNamed \ndescendantsNamed \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelfNamed","title":"HtmlNode.descendantsAndSelfNamed","content":"HtmlNode.descendantsAndSelfNamed \ndescendantsAndSelfNamed \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsWithPath","title":"HtmlNode.descendantsWithPath","content":"HtmlNode.descendantsWithPath \ndescendantsWithPath \n\n Gets all of the descendants of this node that statisfy the given predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelfWithPath","title":"HtmlNode.descendantsAndSelfWithPath","content":"HtmlNode.descendantsAndSelfWithPath \ndescendantsAndSelfWithPath \n\n Gets all of the descendants of this node that statisfy the given predicate\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsNamedWithPath","title":"HtmlNode.descendantsNamedWithPath","content":"HtmlNode.descendantsNamedWithPath \ndescendantsNamedWithPath \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#descendantsAndSelfNamedWithPath","title":"HtmlNode.descendantsAndSelfNamedWithPath","content":"HtmlNode.descendantsAndSelfNamedWithPath \ndescendantsAndSelfNamedWithPath \n\n Finds all of the descendant nodes of this nodes that match the given set of names\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#attributes","title":"HtmlNode.attributes","content":"HtmlNode.attributes \nattributes \n Gets all of the attributes of this node","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#tryGetAttribute","title":"HtmlNode.tryGetAttribute","content":"HtmlNode.tryGetAttribute \ntryGetAttribute \n\n Tries to return an attribute that exists on the current node\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#attribute","title":"HtmlNode.attribute","content":"HtmlNode.attribute \nattribute \n\n Returns the attribute with the given name. If the\n attribute does not exist then this will throw an exception\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#attributeValue","title":"HtmlNode.attributeValue","content":"HtmlNode.attributeValue \nattributeValue \n\n Return the value of the named attribute, or an empty string if not found.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasAttribute","title":"HtmlNode.hasAttribute","content":"HtmlNode.hasAttribute \nhasAttribute \n\n Returns true if the current node has an attribute that\n matches both the name and the value\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasName","title":"HtmlNode.hasName","content":"HtmlNode.hasName \nhasName \n Returns true if the current node has the specified name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasId","title":"HtmlNode.hasId","content":"HtmlNode.hasId \nhasId \n Returns true if the current node has the specified id","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#hasClass","title":"HtmlNode.hasClass","content":"HtmlNode.hasClass \nhasClass \n Returns true if the current node has the specified class","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#innerTextExcluding","title":"HtmlNode.innerTextExcluding","content":"HtmlNode.innerTextExcluding \ninnerTextExcluding \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#innerText","title":"HtmlNode.innerText","content":"HtmlNode.innerText \ninnerText \n\n Returns the inner text of the current node\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#directInnerText","title":"HtmlNode.directInnerText","content":"HtmlNode.directInnerText \ndirectInnerText \n\n Returns the direct inner text of the current node\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodemodule.html#cssSelect","title":"HtmlNode.cssSelect","content":"HtmlNode.cssSelect \ncssSelect \n Gets descendants matched by Css selector","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattribute.html","title":"HtmlAttribute","content":"HtmlAttribute \nRepresents an HTML attribute. The name is always normalized to lowercase \nHtmlAttribute.New \nNew","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattribute.html#New","title":"HtmlAttribute.New","content":"HtmlAttribute.New \nNew \n\n Creates an html attribute\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributeextensions.html","title":"HtmlAttributeExtensions","content":"HtmlAttributeExtensions \n \nHtmlAttributeExtensions.Name \nName \nHtmlAttributeExtensions.Value \nValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributeextensions.html#Name","title":"HtmlAttributeExtensions.Name","content":"HtmlAttributeExtensions.Name \nName \n Gets the name of the current attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlattributeextensions.html#Value","title":"HtmlAttributeExtensions.Value","content":"HtmlAttributeExtensions.Value \nValue \n Gets the value of the current attribute","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html","title":"HtmlDocument","content":"HtmlDocument \n \nHtmlDocument._Print \n_Print \nHtmlDocument.New \nNew \nHtmlDocument.New \nNew","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#_Print","title":"HtmlDocument._Print","content":"HtmlDocument._Print \n_Print \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#New","title":"HtmlDocument.New","content":"HtmlDocument.New \nNew \n\n Creates an html document\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocument.html#New","title":"HtmlDocument.New","content":"HtmlDocument.New \nNew \n\n Creates an html document\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html","title":"HtmlDocumentExtensions","content":"HtmlDocumentExtensions \n \nHtmlDocumentExtensions.Body \nBody \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.Descendants \nDescendants \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlDocumentExtensions.Elements \nElements \nHtmlDocumentExtensions.Elements \nElements \nHtmlDocumentExtensions.Elements \nElements \nHtmlDocumentExtensions.Html \nHtml \nHtmlDocumentExtensions.TryGetBody \nTryGetBody \nHtmlDocumentExtensions.TryGetHtml \nTryGetHtml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Body","title":"HtmlDocumentExtensions.Body","content":"HtmlDocumentExtensions.Body \nBody \n Finds the body element of the given document,\n this throws an exception if no body element exists.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given name\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given name\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given set of names\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Finds all of the descendant nodes of this document that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n Gets all of the descendants of this document\n Recurses on match","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Gets all of the descendants of this document that statisfy the given predicate\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Descendants","title":"HtmlDocumentExtensions.Descendants","content":"HtmlDocumentExtensions.Descendants \nDescendants \n\n Gets all of the descendants of this document that statisfy the given predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given name\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given name\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given set of names\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Finds all of the descendant nodes of this document that match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n Gets all of the descendants of this document\n Recurses on match","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of this document that statisfy the given predicate\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#DescendantsWithPath","title":"HtmlDocumentExtensions.DescendantsWithPath","content":"HtmlDocumentExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of this document that statisfy the given predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Elements","title":"HtmlDocumentExtensions.Elements","content":"HtmlDocumentExtensions.Elements \nElements \n\n Returns all of the root elements in the current document that match the name\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Elements","title":"HtmlDocumentExtensions.Elements","content":"HtmlDocumentExtensions.Elements \nElements \n\n Returns all of the root elements in the current document that match the set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Elements","title":"HtmlDocumentExtensions.Elements","content":"HtmlDocumentExtensions.Elements \nElements \n\n Returns all of the root elements of the current document\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#Html","title":"HtmlDocumentExtensions.Html","content":"HtmlDocumentExtensions.Html \nHtml \n Finds the html element of the given document,\n this throws an exception if no html element exists.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#TryGetBody","title":"HtmlDocumentExtensions.TryGetBody","content":"HtmlDocumentExtensions.TryGetBody \nTryGetBody \n Tries to find the body element of the given document.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmldocumentextensions.html#TryGetHtml","title":"HtmlDocumentExtensions.TryGetHtml","content":"HtmlDocumentExtensions.TryGetHtml \nTryGetHtml \n Tries to find the html element of the given document.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html","title":"HtmlNode","content":"HtmlNode \n \nHtmlNode._Print \n_Print \nHtmlNode.NewCData \nNewCData \nHtmlNode.NewComment \nNewComment \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewElement \nNewElement \nHtmlNode.NewText \nNewText","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#_Print","title":"HtmlNode._Print","content":"HtmlNode._Print \n_Print \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewCData","title":"HtmlNode.NewCData","content":"HtmlNode.NewCData \nNewCData \n\n Creates a CData element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewComment","title":"HtmlNode.NewComment","content":"HtmlNode.NewComment \nNewComment \n\n Creates a comment element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewElement","title":"HtmlNode.NewElement","content":"HtmlNode.NewElement \nNewElement \n\n Creates an html element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnode.html#NewText","title":"HtmlNode.NewText","content":"HtmlNode.NewText \nNewText \n\n Creates a text content element\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html","title":"HtmlNodeExtensions","content":"HtmlNodeExtensions \n \nHtmlNodeExtensions.Attribute \nAttribute \nHtmlNodeExtensions.AttributeValue \nAttributeValue \nHtmlNodeExtensions.Attributes \nAttributes \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.Descendants \nDescendants \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \nHtmlNodeExtensions.DirectInnerText \nDirectInnerText \nHtmlNodeExtensions.Elements \nElements \nHtmlNodeExtensions.Elements \nElements \nHtmlNodeExtensions.Elements \nElements \nHtmlNodeExtensions.HasAttribute \nHasAttribute \nHtmlNodeExtensions.HasClass \nHasClass \nHtmlNodeExtensions.HasId \nHasId \nHtmlNodeExtensions.HasName \nHasName \nHtmlNodeExtensions.InnerText \nInnerText \nHtmlNodeExtensions.Name \nName \nHtmlNodeExtensions.TryGetAttribute \nTryGetAttribute","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Attribute","title":"HtmlNodeExtensions.Attribute","content":"HtmlNodeExtensions.Attribute \nAttribute \n\n Returns the attribute with the given name. If the\n attribute does not exist then this will throw an exception\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#AttributeValue","title":"HtmlNodeExtensions.AttributeValue","content":"HtmlNodeExtensions.AttributeValue \nAttributeValue \n\n Return the value of the named attribute, or an empty string if not found.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Attributes","title":"HtmlNodeExtensions.Attributes","content":"HtmlNodeExtensions.Attributes \nAttributes \n Gets all of the attributes of this node","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given name\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given name\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given set of names\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node, which match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n Gets all of the descendants of the current node\n Recurses on match","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node that satisfy the predicate\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Descendants","title":"HtmlNodeExtensions.Descendants","content":"HtmlNodeExtensions.Descendants \nDescendants \n\n Gets all of the descendants of the current node that satisfy the predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n Gets all of the descendants of the current node\n The current node is also considered in the comparison\n Recurses on match","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelf","title":"HtmlNodeExtensions.DescendantsAndSelf","content":"HtmlNodeExtensions.DescendantsAndSelf \nDescendantsAndSelf \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given name\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n Gets all of the descendants of the current node\n The current node is also considered in the comparison\n Recurses on match","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsAndSelfWithPath","title":"HtmlNodeExtensions.DescendantsAndSelfWithPath","content":"HtmlNodeExtensions.DescendantsAndSelfWithPath \nDescendantsAndSelfWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n The current node is also considered in the comparison\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given name\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given name\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node, which match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n Gets all of the descendants of the current node\n Recurses on match","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n Recurses on match\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DescendantsWithPath","title":"HtmlNodeExtensions.DescendantsWithPath","content":"HtmlNodeExtensions.DescendantsWithPath \nDescendantsWithPath \n\n Gets all of the descendants of the current node that satisfy the predicate\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#DirectInnerText","title":"HtmlNodeExtensions.DirectInnerText","content":"HtmlNodeExtensions.DirectInnerText \nDirectInnerText \n Returns the direct inner text of the current node","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Elements","title":"HtmlNodeExtensions.Elements","content":"HtmlNodeExtensions.Elements \nElements \n\n Gets all of the elements of the current node, which match the given name\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Elements","title":"HtmlNodeExtensions.Elements","content":"HtmlNodeExtensions.Elements \nElements \n\n Gets all of the elements of the current node, which match the given set of names\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Elements","title":"HtmlNodeExtensions.Elements","content":"HtmlNodeExtensions.Elements \nElements \n Gets all of the nodes immediately under this node","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasAttribute","title":"HtmlNodeExtensions.HasAttribute","content":"HtmlNodeExtensions.HasAttribute \nHasAttribute \n\n Returns true if the current node has an attribute that\n matches both the name and the value\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasClass","title":"HtmlNodeExtensions.HasClass","content":"HtmlNodeExtensions.HasClass \nHasClass \n Returns true if the current node has the specified class","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasId","title":"HtmlNodeExtensions.HasId","content":"HtmlNodeExtensions.HasId \nHasId \n Returns true if the current node has the specified id","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#HasName","title":"HtmlNodeExtensions.HasName","content":"HtmlNodeExtensions.HasName \nHasName \n Returns true if the current node has the specified name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#InnerText","title":"HtmlNodeExtensions.InnerText","content":"HtmlNodeExtensions.InnerText \nInnerText \n Returns the inner text of the current node","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#Name","title":"HtmlNodeExtensions.Name","content":"HtmlNodeExtensions.Name \nName \n Gets the given nodes name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-htmlnodeextensions.html#TryGetAttribute","title":"HtmlNodeExtensions.TryGetAttribute","content":"HtmlNodeExtensions.TryGetAttribute \nTryGetAttribute \n\n Tries to select an attribute with the given name from the current node.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html","title":"HttpContentTypes","content":"HttpContentTypes \n Constants for common HTTP content types \nHttpContentTypes.Any \nAny \nHttpContentTypes.Text \nText \nHttpContentTypes.Binary \nBinary \nHttpContentTypes.Zip \nZip \nHttpContentTypes.GZip \nGZip \nHttpContentTypes.FormValues \nFormValues \nHttpContentTypes.Json \nJson \nHttpContentTypes.JavaScript \nJavaScript \nHttpContentTypes.Xml \nXml \nHttpContentTypes.Rss \nRss \nHttpContentTypes.Atom \nAtom \nHttpContentTypes.Rdf \nRdf \nHttpContentTypes.Html \nHtml \nHttpContentTypes.XHtml \nXHtml \nHttpContentTypes.Soap \nSoap \nHttpContentTypes.Csv \nCsv \nHttpContentTypes.JsonRpc \nJsonRpc \nHttpContentTypes.Multipart \nMultipart","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Any","title":"HttpContentTypes.Any","content":"HttpContentTypes.Any \nAny \n */*","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Text","title":"HttpContentTypes.Text","content":"HttpContentTypes.Text \nText \n plain/text","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Binary","title":"HttpContentTypes.Binary","content":"HttpContentTypes.Binary \nBinary \n application/octet-stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Zip","title":"HttpContentTypes.Zip","content":"HttpContentTypes.Zip \nZip \n application/octet-stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#GZip","title":"HttpContentTypes.GZip","content":"HttpContentTypes.GZip \nGZip \n application/octet-stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#FormValues","title":"HttpContentTypes.FormValues","content":"HttpContentTypes.FormValues \nFormValues \n application/x-www-form-urlencoded","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Json","title":"HttpContentTypes.Json","content":"HttpContentTypes.Json \nJson \n application/json","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#JavaScript","title":"HttpContentTypes.JavaScript","content":"HttpContentTypes.JavaScript \nJavaScript \n application/javascript","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Xml","title":"HttpContentTypes.Xml","content":"HttpContentTypes.Xml \nXml \n application/xml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Rss","title":"HttpContentTypes.Rss","content":"HttpContentTypes.Rss \nRss \n application/rss\u002Bxml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Atom","title":"HttpContentTypes.Atom","content":"HttpContentTypes.Atom \nAtom \n application/atom\u002Bxml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Rdf","title":"HttpContentTypes.Rdf","content":"HttpContentTypes.Rdf \nRdf \n application/rdf\u002Bxml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Html","title":"HttpContentTypes.Html","content":"HttpContentTypes.Html \nHtml \n text/html","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#XHtml","title":"HttpContentTypes.XHtml","content":"HttpContentTypes.XHtml \nXHtml \n application/xhtml\u002Bxml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Soap","title":"HttpContentTypes.Soap","content":"HttpContentTypes.Soap \nSoap \n application/soap\u002Bxml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Csv","title":"HttpContentTypes.Csv","content":"HttpContentTypes.Csv \nCsv \n text/csv","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#JsonRpc","title":"HttpContentTypes.JsonRpc","content":"HttpContentTypes.JsonRpc \nJsonRpc \n application/json-rpc","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpcontenttypes.html#Multipart","title":"HttpContentTypes.Multipart","content":"HttpContentTypes.Multipart \nMultipart \n multipart/form-data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpencodings.html","title":"HttpEncodings","content":"HttpEncodings \n Constants for common HTTP encodings \nHttpEncodings.PostDefaultEncoding \nPostDefaultEncoding \nHttpEncodings.ResponseDefaultEncoding \nResponseDefaultEncoding","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpencodings.html#PostDefaultEncoding","title":"HttpEncodings.PostDefaultEncoding","content":"HttpEncodings.PostDefaultEncoding \nPostDefaultEncoding \n ISO-8859-1","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpencodings.html#ResponseDefaultEncoding","title":"HttpEncodings.ResponseDefaultEncoding","content":"HttpEncodings.ResponseDefaultEncoding \nResponseDefaultEncoding \n ISO-8859-1","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html","title":"HttpMethod","content":"HttpMethod \n The method to use in an HTTP request \nHttpMethod.Options \nOptions \nHttpMethod.Get \nGet \nHttpMethod.Head \nHead \nHttpMethod.Post \nPost \nHttpMethod.Put \nPut \nHttpMethod.Delete \nDelete \nHttpMethod.Trace \nTrace \nHttpMethod.Connect \nConnect \nHttpMethod.PropFind \nPropFind \nHttpMethod.PropPatch \nPropPatch \nHttpMethod.MkCol \nMkCol \nHttpMethod.Copy \nCopy \nHttpMethod.Move \nMove \nHttpMethod.Lock \nLock \nHttpMethod.Unlock \nUnlock \nHttpMethod.Patch \nPatch","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Options","title":"HttpMethod.Options","content":"HttpMethod.Options \nOptions \n Request information about the communication options available on the request/response chain identified by the URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Get","title":"HttpMethod.Get","content":"HttpMethod.Get \nGet \n Retrieve whatever information (in the form of an entity) is identified by the URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Head","title":"HttpMethod.Head","content":"HttpMethod.Head \nHead \n Identical to GET except that the server MUST NOT return a message-body in the response","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Post","title":"HttpMethod.Post","content":"HttpMethod.Post \nPost \n Requests that the server accepts the entity enclosed in the request as a\n new subordinate of the resource identified by the Request-URI in the Request-Line","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Put","title":"HttpMethod.Put","content":"HttpMethod.Put \nPut \n Requests that the enclosed entity be stored under the supplied Request-URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Delete","title":"HttpMethod.Delete","content":"HttpMethod.Delete \nDelete \n Requests that the origin server deletes the resource identified by the Request-URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Trace","title":"HttpMethod.Trace","content":"HttpMethod.Trace \nTrace \n Used to invoke a remote, application-layer loop- back of the request message","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Connect","title":"HttpMethod.Connect","content":"HttpMethod.Connect \nConnect \n Reserved for use with a proxy that can dynamically switch to being a tunnel","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#PropFind","title":"HttpMethod.PropFind","content":"HttpMethod.PropFind \nPropFind \n Retrieves properties defined on the resource identified by the request URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#PropPatch","title":"HttpMethod.PropPatch","content":"HttpMethod.PropPatch \nPropPatch \n Processes instructions specified in the request body to set and/or remove properties defined on the resource identified by the request URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#MkCol","title":"HttpMethod.MkCol","content":"HttpMethod.MkCol \nMkCol \n Creates a new collection resource at the location specified by the Request URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Copy","title":"HttpMethod.Copy","content":"HttpMethod.Copy \nCopy \n Creates a duplicate of the source resource, identified by the Request-URI, in the destination resource, identified by the URI in the Destination header","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Move","title":"HttpMethod.Move","content":"HttpMethod.Move \nMove \n Logical equivalent of a copy, followed by consistency maintenance processing, followed by a delete of the source where all three actions are performed atomically","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Lock","title":"HttpMethod.Lock","content":"HttpMethod.Lock \nLock \n Used to take out a lock of any access type on the resource identified by the request URI.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Unlock","title":"HttpMethod.Unlock","content":"HttpMethod.Unlock \nUnlock \n Removes the lock identified by the lock token from the request URI, and all other resources included in the lock","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpmethod.html#Patch","title":"HttpMethod.Patch","content":"HttpMethod.Patch \nPatch \n Requests that the origin server applies partial modifications contained in the entity enclosed in the request to the resource identified by the request URI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html","title":"HttpRequestHeaders","content":"HttpRequestHeaders \n Headers that can be sent in an HTTP request \nHttpRequestHeaders.Accept \nAccept \nHttpRequestHeaders.AcceptCharset \nAcceptCharset \nHttpRequestHeaders.AcceptDatetime \nAcceptDatetime \nHttpRequestHeaders.AcceptEncoding \nAcceptEncoding \nHttpRequestHeaders.AcceptLanguage \nAcceptLanguage \nHttpRequestHeaders.Allow \nAllow \nHttpRequestHeaders.Authorization \nAuthorization \nHttpRequestHeaders.BasicAuth \nBasicAuth \nHttpRequestHeaders.CacheControl \nCacheControl \nHttpRequestHeaders.Connection \nConnection \nHttpRequestHeaders.ContentDisposition \nContentDisposition \nHttpRequestHeaders.ContentEncoding \nContentEncoding \nHttpRequestHeaders.ContentLanguage \nContentLanguage \nHttpRequestHeaders.ContentLocation \nContentLocation \nHttpRequestHeaders.ContentMD5 \nContentMD5 \nHttpRequestHeaders.ContentRange \nContentRange \nHttpRequestHeaders.ContentType \nContentType \nHttpRequestHeaders.ContentTypeWithEncoding \nContentTypeWithEncoding \nHttpRequestHeaders.Date \nDate \nHttpRequestHeaders.Expect \nExpect \nHttpRequestHeaders.Expires \nExpires \nHttpRequestHeaders.From \nFrom \nHttpRequestHeaders.Host \nHost \nHttpRequestHeaders.IfMatch \nIfMatch \nHttpRequestHeaders.IfModifiedSince \nIfModifiedSince \nHttpRequestHeaders.IfNoneMatch \nIfNoneMatch \nHttpRequestHeaders.IfRange \nIfRange \nHttpRequestHeaders.IfUnmodifiedSince \nIfUnmodifiedSince \nHttpRequestHeaders.KeepAlive \nKeepAlive \nHttpRequestHeaders.LastModified \nLastModified \nHttpRequestHeaders.MaxForwards \nMaxForwards \nHttpRequestHeaders.Origin \nOrigin \nHttpRequestHeaders.Pragma \nPragma \nHttpRequestHeaders.Prefer \nPrefer \nHttpRequestHeaders.ProxyAuthorization \nProxyAuthorization \nHttpRequestHeaders.Range \nRange \nHttpRequestHeaders.Referer \nReferer \nHttpRequestHeaders.TE \nTE \nHttpRequestHeaders.Trailer \nTrailer \nHttpRequestHeaders.TransferEncoding \nTransferEncoding \nHttpRequestHeaders.Translate \nTranslate \nHttpRequestHeaders.Upgrade \nUpgrade \nHttpRequestHeaders.UserAgent \nUserAgent \nHttpRequestHeaders.Via \nVia \nHttpRequestHeaders.Warning \nWarning \nHttpRequestHeaders.XHTTPMethodOverride \nXHTTPMethodOverride","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Accept","title":"HttpRequestHeaders.Accept","content":"HttpRequestHeaders.Accept \nAccept \n Content-Types that are acceptable for the response","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptCharset","title":"HttpRequestHeaders.AcceptCharset","content":"HttpRequestHeaders.AcceptCharset \nAcceptCharset \n Character sets that are acceptable","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptDatetime","title":"HttpRequestHeaders.AcceptDatetime","content":"HttpRequestHeaders.AcceptDatetime \nAcceptDatetime \n Acceptable version in time","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptEncoding","title":"HttpRequestHeaders.AcceptEncoding","content":"HttpRequestHeaders.AcceptEncoding \nAcceptEncoding \n List of acceptable encodings. See HTTP compression.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#AcceptLanguage","title":"HttpRequestHeaders.AcceptLanguage","content":"HttpRequestHeaders.AcceptLanguage \nAcceptLanguage \n List of acceptable human languages for response","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Allow","title":"HttpRequestHeaders.Allow","content":"HttpRequestHeaders.Allow \nAllow \n The Allow header, which specifies the set of HTTP methods supported.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Authorization","title":"HttpRequestHeaders.Authorization","content":"HttpRequestHeaders.Authorization \nAuthorization \n Authentication credentials for HTTP authentication","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#BasicAuth","title":"HttpRequestHeaders.BasicAuth","content":"HttpRequestHeaders.BasicAuth \nBasicAuth \n Authentication header using Basic Auth encoding","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#CacheControl","title":"HttpRequestHeaders.CacheControl","content":"HttpRequestHeaders.CacheControl \nCacheControl \n Used to specify directives that MUST be obeyed by all caching mechanisms along the request/response chain","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Connection","title":"HttpRequestHeaders.Connection","content":"HttpRequestHeaders.Connection \nConnection \n What type of connection the user-agent would prefer","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentDisposition","title":"HttpRequestHeaders.ContentDisposition","content":"HttpRequestHeaders.ContentDisposition \nContentDisposition \n Describes the placement of the content. Valid dispositions are: inline, attachment, form-data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentEncoding","title":"HttpRequestHeaders.ContentEncoding","content":"HttpRequestHeaders.ContentEncoding \nContentEncoding \n The type of encoding used on the data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentLanguage","title":"HttpRequestHeaders.ContentLanguage","content":"HttpRequestHeaders.ContentLanguage \nContentLanguage \n The language the content is in","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentLocation","title":"HttpRequestHeaders.ContentLocation","content":"HttpRequestHeaders.ContentLocation \nContentLocation \n An alternate location for the returned data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentMD5","title":"HttpRequestHeaders.ContentMD5","content":"HttpRequestHeaders.ContentMD5 \nContentMD5 \n A Base64-encoded binary MD5 sum of the content of the request body","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentRange","title":"HttpRequestHeaders.ContentRange","content":"HttpRequestHeaders.ContentRange \nContentRange \n Where in a full body message this partial message belongs","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentType","title":"HttpRequestHeaders.ContentType","content":"HttpRequestHeaders.ContentType \nContentType \n The MIME type of the body of the request (used with POST and PUT requests)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ContentTypeWithEncoding","title":"HttpRequestHeaders.ContentTypeWithEncoding","content":"HttpRequestHeaders.ContentTypeWithEncoding \nContentTypeWithEncoding \n The MIME type of the body of the request (used with POST and PUT requests) with an explicit encoding","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Date","title":"HttpRequestHeaders.Date","content":"HttpRequestHeaders.Date \nDate \n The date and time that the message was sent","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Expect","title":"HttpRequestHeaders.Expect","content":"HttpRequestHeaders.Expect \nExpect \n Indicates that particular server behaviors are required by the client","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Expires","title":"HttpRequestHeaders.Expires","content":"HttpRequestHeaders.Expires \nExpires \n Gives the date/time after which the response is considered stale","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#From","title":"HttpRequestHeaders.From","content":"HttpRequestHeaders.From \nFrom \n The email address of the user making the request","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Host","title":"HttpRequestHeaders.Host","content":"HttpRequestHeaders.Host \nHost \n The domain name of the server (for virtual hosting), and the TCP port number on which the server is listening.\n The port number may be omitted if the port is the standard port for the service requested.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfMatch","title":"HttpRequestHeaders.IfMatch","content":"HttpRequestHeaders.IfMatch \nIfMatch \n Only perform the action if the client supplied entity matches the same entity on the server.\n This is mainly for methods like PUT to only update a resource if it has not been modified since the user last updated it. If-Match: \u0022737060cd8c284d8af7ad3082f209582d\u0022 Permanent","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfModifiedSince","title":"HttpRequestHeaders.IfModifiedSince","content":"HttpRequestHeaders.IfModifiedSince \nIfModifiedSince \n Allows a 304 Not Modified to be returned if content is unchanged","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfNoneMatch","title":"HttpRequestHeaders.IfNoneMatch","content":"HttpRequestHeaders.IfNoneMatch \nIfNoneMatch \n Allows a 304 Not Modified to be returned if content is unchanged","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfRange","title":"HttpRequestHeaders.IfRange","content":"HttpRequestHeaders.IfRange \nIfRange \n If the entity is unchanged, send me the part(s) that I am missing; otherwise, send me the entire new entity","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#IfUnmodifiedSince","title":"HttpRequestHeaders.IfUnmodifiedSince","content":"HttpRequestHeaders.IfUnmodifiedSince \nIfUnmodifiedSince \n Only send the response if the entity has not been modified since a specific time","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#KeepAlive","title":"HttpRequestHeaders.KeepAlive","content":"HttpRequestHeaders.KeepAlive \nKeepAlive \n Specifies a parameter used into order to maintain a persistent connection","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#LastModified","title":"HttpRequestHeaders.LastModified","content":"HttpRequestHeaders.LastModified \nLastModified \n Specifies the date and time at which the accompanying body data was last modified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#MaxForwards","title":"HttpRequestHeaders.MaxForwards","content":"HttpRequestHeaders.MaxForwards \nMaxForwards \n Limit the number of times the message can be forwarded through proxies or gateways","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Origin","title":"HttpRequestHeaders.Origin","content":"HttpRequestHeaders.Origin \nOrigin \n Initiates a request for cross-origin resource sharing (asks server for an \u0027Access-Control-Allow-Origin\u0027 response header)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Pragma","title":"HttpRequestHeaders.Pragma","content":"HttpRequestHeaders.Pragma \nPragma \n Implementation-specific headers that may have various effects anywhere along the request-response chain.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Prefer","title":"HttpRequestHeaders.Prefer","content":"HttpRequestHeaders.Prefer \nPrefer \n Optional instructions to the server to control request processing. See RFC https://tools.ietf.org/html/rfc7240 for more details","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#ProxyAuthorization","title":"HttpRequestHeaders.ProxyAuthorization","content":"HttpRequestHeaders.ProxyAuthorization \nProxyAuthorization \n Authorization credentials for connecting to a proxy.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Range","title":"HttpRequestHeaders.Range","content":"HttpRequestHeaders.Range \nRange \n Request only part of an entity. Bytes are numbered from 0","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Referer","title":"HttpRequestHeaders.Referer","content":"HttpRequestHeaders.Referer \nReferer \n This is the address of the previous web page from which a link to the currently requested page was followed. (The word \u0022referrer\u0022 is misspelled in the RFC as well as in most implementations.)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#TE","title":"HttpRequestHeaders.TE","content":"HttpRequestHeaders.TE \nTE \n The transfer encodings the user agent is willing to accept: the same values as for the response header\n Transfer-Encoding can be used, plus the \u0022trailers\u0022 value (related to the \u0022chunked\u0022 transfer method) to\n notify the server it expects to receive additional headers (the trailers) after the last, zero-sized, chunk.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Trailer","title":"HttpRequestHeaders.Trailer","content":"HttpRequestHeaders.Trailer \nTrailer \n The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#TransferEncoding","title":"HttpRequestHeaders.TransferEncoding","content":"HttpRequestHeaders.TransferEncoding \nTransferEncoding \n The TransferEncoding header indicates the form of encoding used to safely transfer the entity to the user.  The valid directives are one of: chunked, compress, deflate, gzip, or identity.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Translate","title":"HttpRequestHeaders.Translate","content":"HttpRequestHeaders.Translate \nTranslate \n Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Upgrade","title":"HttpRequestHeaders.Upgrade","content":"HttpRequestHeaders.Upgrade \nUpgrade \n Specifies additional communications protocols that the client supports.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#UserAgent","title":"HttpRequestHeaders.UserAgent","content":"HttpRequestHeaders.UserAgent \nUserAgent \n The user agent string of the user agent","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Via","title":"HttpRequestHeaders.Via","content":"HttpRequestHeaders.Via \nVia \n Informs the server of proxies through which the request was sent","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#Warning","title":"HttpRequestHeaders.Warning","content":"HttpRequestHeaders.Warning \nWarning \n A general warning about possible problems with the entity body","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestheaders.html#XHTTPMethodOverride","title":"HttpRequestHeaders.XHTTPMethodOverride","content":"HttpRequestHeaders.XHTTPMethodOverride \nXHTTPMethodOverride \n Override HTTP method.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html","title":"HttpResponseHeaders","content":"HttpResponseHeaders \n Headers that can be received in an HTTP response \nHttpResponseHeaders.AccessControlAllowOrigin \nAccessControlAllowOrigin \nHttpResponseHeaders.AcceptRanges \nAcceptRanges \nHttpResponseHeaders.Age \nAge \nHttpResponseHeaders.Allow \nAllow \nHttpResponseHeaders.CacheControl \nCacheControl \nHttpResponseHeaders.Connection \nConnection \nHttpResponseHeaders.ContentEncoding \nContentEncoding \nHttpResponseHeaders.ContentLanguage \nContentLanguage \nHttpResponseHeaders.ContentLength \nContentLength \nHttpResponseHeaders.ContentLocation \nContentLocation \nHttpResponseHeaders.ContentMD5 \nContentMD5 \nHttpResponseHeaders.ContentDisposition \nContentDisposition \nHttpResponseHeaders.ContentRange \nContentRange \nHttpResponseHeaders.ContentType \nContentType \nHttpResponseHeaders.Date \nDate \nHttpResponseHeaders.ETag \nETag \nHttpResponseHeaders.Expires \nExpires \nHttpResponseHeaders.LastModified \nLastModified \nHttpResponseHeaders.Link \nLink \nHttpResponseHeaders.Location \nLocation \nHttpResponseHeaders.P3P \nP3P \nHttpResponseHeaders.Pragma \nPragma \nHttpResponseHeaders.ProxyAuthenticate \nProxyAuthenticate \nHttpResponseHeaders.Refresh \nRefresh \nHttpResponseHeaders.RetryAfter \nRetryAfter \nHttpResponseHeaders.Server \nServer \nHttpResponseHeaders.SetCookie \nSetCookie \nHttpResponseHeaders.Status \nStatus \nHttpResponseHeaders.StrictTransportSecurity \nStrictTransportSecurity \nHttpResponseHeaders.Trailer \nTrailer \nHttpResponseHeaders.TransferEncoding \nTransferEncoding \nHttpResponseHeaders.Vary \nVary \nHttpResponseHeaders.Via \nVia \nHttpResponseHeaders.Warning \nWarning \nHttpResponseHeaders.WWWAuthenticate \nWWWAuthenticate","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#AccessControlAllowOrigin","title":"HttpResponseHeaders.AccessControlAllowOrigin","content":"HttpResponseHeaders.AccessControlAllowOrigin \nAccessControlAllowOrigin \n Specifying which web sites can participate in cross-origin resource sharing","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#AcceptRanges","title":"HttpResponseHeaders.AcceptRanges","content":"HttpResponseHeaders.AcceptRanges \nAcceptRanges \n What partial content range types this server supports","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Age","title":"HttpResponseHeaders.Age","content":"HttpResponseHeaders.Age \nAge \n The age the object has been in a proxy cache in seconds","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Allow","title":"HttpResponseHeaders.Allow","content":"HttpResponseHeaders.Allow \nAllow \n Valid actions for a specified resource. To be used for a 405 Method not allowed","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#CacheControl","title":"HttpResponseHeaders.CacheControl","content":"HttpResponseHeaders.CacheControl \nCacheControl \n Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Connection","title":"HttpResponseHeaders.Connection","content":"HttpResponseHeaders.Connection \nConnection \n Options that are desired for the connection","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentEncoding","title":"HttpResponseHeaders.ContentEncoding","content":"HttpResponseHeaders.ContentEncoding \nContentEncoding \n The type of encoding used on the data. See HTTP compression.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentLanguage","title":"HttpResponseHeaders.ContentLanguage","content":"HttpResponseHeaders.ContentLanguage \nContentLanguage \n The language the content is in","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentLength","title":"HttpResponseHeaders.ContentLength","content":"HttpResponseHeaders.ContentLength \nContentLength \n The length of the response body in octets (8-bit bytes)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentLocation","title":"HttpResponseHeaders.ContentLocation","content":"HttpResponseHeaders.ContentLocation \nContentLocation \n An alternate location for the returned data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentMD5","title":"HttpResponseHeaders.ContentMD5","content":"HttpResponseHeaders.ContentMD5 \nContentMD5 \n A Base64-encoded binary MD5 sum of the content of the response","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentDisposition","title":"HttpResponseHeaders.ContentDisposition","content":"HttpResponseHeaders.ContentDisposition \nContentDisposition \n An opportunity to raise a \u0022File Download\u0022 dialogue box for a known MIME type with binary format or suggest a filename for dynamic content. Quotes are necessary with special characters.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentRange","title":"HttpResponseHeaders.ContentRange","content":"HttpResponseHeaders.ContentRange \nContentRange \n Where in a full body message this partial message belongs","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ContentType","title":"HttpResponseHeaders.ContentType","content":"HttpResponseHeaders.ContentType \nContentType \n The MIME type of this content","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Date","title":"HttpResponseHeaders.Date","content":"HttpResponseHeaders.Date \nDate \n The date and time that the message was sent (in \u0022HTTP-date\u0022 format as defined by RFC 2616)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ETag","title":"HttpResponseHeaders.ETag","content":"HttpResponseHeaders.ETag \nETag \n An identifier for a specific version of a resource, often a message digest","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Expires","title":"HttpResponseHeaders.Expires","content":"HttpResponseHeaders.Expires \nExpires \n Gives the date/time after which the response is considered stale","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#LastModified","title":"HttpResponseHeaders.LastModified","content":"HttpResponseHeaders.LastModified \nLastModified \n The last modified date for the requested object","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Link","title":"HttpResponseHeaders.Link","content":"HttpResponseHeaders.Link \nLink \n Used to express a typed relationship with another resource, where the relation type is defined by RFC 5988","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Location","title":"HttpResponseHeaders.Location","content":"HttpResponseHeaders.Location \nLocation \n Used in redirection, or when a new resource has been created.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#P3P","title":"HttpResponseHeaders.P3P","content":"HttpResponseHeaders.P3P \nP3P \n This header is supposed to set P3P policy","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Pragma","title":"HttpResponseHeaders.Pragma","content":"HttpResponseHeaders.Pragma \nPragma \n Implementation-specific headers that may have various effects anywhere along the request-response chain.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#ProxyAuthenticate","title":"HttpResponseHeaders.ProxyAuthenticate","content":"HttpResponseHeaders.ProxyAuthenticate \nProxyAuthenticate \n Request authentication to access the proxy.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Refresh","title":"HttpResponseHeaders.Refresh","content":"HttpResponseHeaders.Refresh \nRefresh \n Used in redirection, or when a new resource has been created. This refresh redirects after 5 seconds.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#RetryAfter","title":"HttpResponseHeaders.RetryAfter","content":"HttpResponseHeaders.RetryAfter \nRetryAfter \n If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date.[28]","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Server","title":"HttpResponseHeaders.Server","content":"HttpResponseHeaders.Server \nServer \n A name for the server","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#SetCookie","title":"HttpResponseHeaders.SetCookie","content":"HttpResponseHeaders.SetCookie \nSetCookie \n An HTTP cookie","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Status","title":"HttpResponseHeaders.Status","content":"HttpResponseHeaders.Status \nStatus \n The HTTP status of the response","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#StrictTransportSecurity","title":"HttpResponseHeaders.StrictTransportSecurity","content":"HttpResponseHeaders.StrictTransportSecurity \nStrictTransportSecurity \n A HSTS Policy informing the HTTP client how long to cache the HTTPS only policy and whether this applies to subdomains.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Trailer","title":"HttpResponseHeaders.Trailer","content":"HttpResponseHeaders.Trailer \nTrailer \n The Trailer general field value indicates that the given set of header fields is present in the trailer of a message encoded with chunked transfer-coding.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#TransferEncoding","title":"HttpResponseHeaders.TransferEncoding","content":"HttpResponseHeaders.TransferEncoding \nTransferEncoding \n The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Vary","title":"HttpResponseHeaders.Vary","content":"HttpResponseHeaders.Vary \nVary \n Tells downstream proxies how to match future request headers to decide whether the cached response can be used rather than requesting a fresh one from the origin server.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Via","title":"HttpResponseHeaders.Via","content":"HttpResponseHeaders.Via \nVia \n Informs the client of proxies through which the response was sent.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#Warning","title":"HttpResponseHeaders.Warning","content":"HttpResponseHeaders.Warning \nWarning \n A general warning about possible problems with the entity body.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponseheaders.html#WWWAuthenticate","title":"HttpResponseHeaders.WWWAuthenticate","content":"HttpResponseHeaders.WWWAuthenticate \nWWWAuthenticate \n Indicates the authentication scheme that should be used to access the requested entity.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html","title":"HttpStatusCodes","content":"HttpStatusCodes \n Status codes that can be received in an HTTP response \nHttpStatusCodes.Continue \nContinue \nHttpStatusCodes.SwitchingProtocols \nSwitchingProtocols \nHttpStatusCodes.Processing \nProcessing \nHttpStatusCodes.EarlyHints \nEarlyHints \nHttpStatusCodes.OK \nOK \nHttpStatusCodes.Created \nCreated \nHttpStatusCodes.Accepted \nAccepted \nHttpStatusCodes.NonAuthoritativeInformation \nNonAuthoritativeInformation \nHttpStatusCodes.NoContent \nNoContent \nHttpStatusCodes.ResetContent \nResetContent \nHttpStatusCodes.PartialContent \nPartialContent \nHttpStatusCodes.MultiStatus \nMultiStatus \nHttpStatusCodes.AlreadyReported \nAlreadyReported \nHttpStatusCodes.IMUsed \nIMUsed \nHttpStatusCodes.MultipleChoices \nMultipleChoices \nHttpStatusCodes.MovedPermanently \nMovedPermanently \nHttpStatusCodes.Found \nFound \nHttpStatusCodes.SeeOther \nSeeOther \nHttpStatusCodes.NotModified \nNotModified \nHttpStatusCodes.UseProxy \nUseProxy \nHttpStatusCodes.SwitchProxy \nSwitchProxy \nHttpStatusCodes.TemporaryRedirect \nTemporaryRedirect \nHttpStatusCodes.PermanentRedirect \nPermanentRedirect \nHttpStatusCodes.BadRequest \nBadRequest \nHttpStatusCodes.Unauthorized \nUnauthorized \nHttpStatusCodes.PaymentRequired \nPaymentRequired \nHttpStatusCodes.Forbidden \nForbidden \nHttpStatusCodes.NotFound \nNotFound \nHttpStatusCodes.MethodNotAllowed \nMethodNotAllowed \nHttpStatusCodes.NotAcceptable \nNotAcceptable \nHttpStatusCodes.ProxyAuthenticationRequired \nProxyAuthenticationRequired \nHttpStatusCodes.RequestTimeout \nRequestTimeout \nHttpStatusCodes.Conflict \nConflict \nHttpStatusCodes.Gone \nGone \nHttpStatusCodes.LengthRequired \nLengthRequired \nHttpStatusCodes.PreconditionFailed \nPreconditionFailed \nHttpStatusCodes.PayloadTooLarge \nPayloadTooLarge \nHttpStatusCodes.URITooLong \nURITooLong \nHttpStatusCodes.UnsupportedMediaType \nUnsupportedMediaType \nHttpStatusCodes.RangeNotSatisfiable \nRangeNotSatisfiable \nHttpStatusCodes.ExpectationFailed \nExpectationFailed \nHttpStatusCodes.MisdirectedRequest \nMisdirectedRequest \nHttpStatusCodes.UnprocessableEntity \nUnprocessableEntity \nHttpStatusCodes.Locked \nLocked \nHttpStatusCodes.FailedDependency \nFailedDependency \nHttpStatusCodes.UpgradeRequired \nUpgradeRequired \nHttpStatusCodes.PreconditionRequired \nPreconditionRequired \nHttpStatusCodes.TooManyRequests \nTooManyRequests \nHttpStatusCodes.RequestHeaderFieldsTooLarge \nRequestHeaderFieldsTooLarge \nHttpStatusCodes.UnavailableForLegalReasons \nUnavailableForLegalReasons \nHttpStatusCodes.InternalServerError \nInternalServerError \nHttpStatusCodes.NotImplemented \nNotImplemented \nHttpStatusCodes.BadGateway \nBadGateway \nHttpStatusCodes.ServiceUnavailable \nServiceUnavailable \nHttpStatusCodes.GatewayTimeout \nGatewayTimeout \nHttpStatusCodes.HTTPVersionNotSupported \nHTTPVersionNotSupported \nHttpStatusCodes.VariantAlsoNegotiates \nVariantAlsoNegotiates \nHttpStatusCodes.InsufficientStorage \nInsufficientStorage \nHttpStatusCodes.LoopDetected \nLoopDetected \nHttpStatusCodes.NotExtended \nNotExtended \nHttpStatusCodes.NetworkAuthenticationRequired \nNetworkAuthenticationRequired","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Continue","title":"HttpStatusCodes.Continue","content":"HttpStatusCodes.Continue \nContinue \n The server has received the request headers and the client should proceed to send the request body.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#SwitchingProtocols","title":"HttpStatusCodes.SwitchingProtocols","content":"HttpStatusCodes.SwitchingProtocols \nSwitchingProtocols \n The requester has asked the server to switch protocols and the server has agreed to do so.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Processing","title":"HttpStatusCodes.Processing","content":"HttpStatusCodes.Processing \nProcessing \n This code indicates that the server has received and is processing the request, but no response is available yet.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#EarlyHints","title":"HttpStatusCodes.EarlyHints","content":"HttpStatusCodes.EarlyHints \nEarlyHints \n Used to return some response headers before final HTTP message.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#OK","title":"HttpStatusCodes.OK","content":"HttpStatusCodes.OK \nOK \n Standard response for successful HTTP requests.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Created","title":"HttpStatusCodes.Created","content":"HttpStatusCodes.Created \nCreated \n The request has been fulfilled, resulting in the creation of a new resource.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Accepted","title":"HttpStatusCodes.Accepted","content":"HttpStatusCodes.Accepted \nAccepted \n The request has been accepted for processing, but the processing has not been completed.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NonAuthoritativeInformation","title":"HttpStatusCodes.NonAuthoritativeInformation","content":"HttpStatusCodes.NonAuthoritativeInformation \nNonAuthoritativeInformation \n The server is a transforming proxy (e.g. a Web accelerator) that received a 200 OK from its origin, but is returning a modified version of the origin\u0027s response.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NoContent","title":"HttpStatusCodes.NoContent","content":"HttpStatusCodes.NoContent \nNoContent \n The server successfully processed the request and is not returning any content.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ResetContent","title":"HttpStatusCodes.ResetContent","content":"HttpStatusCodes.ResetContent \nResetContent \n The server successfully processed the request, but is not returning any content.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PartialContent","title":"HttpStatusCodes.PartialContent","content":"HttpStatusCodes.PartialContent \nPartialContent \n The server is delivering only part of the resource (byte serving) due to a range header sent by the client.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MultiStatus","title":"HttpStatusCodes.MultiStatus","content":"HttpStatusCodes.MultiStatus \nMultiStatus \n The message body that follows is by default an XML message and can contain a number of separate response codes, depending on how many sub-requests were made.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#AlreadyReported","title":"HttpStatusCodes.AlreadyReported","content":"HttpStatusCodes.AlreadyReported \nAlreadyReported \n The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response, and are not being included again.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#IMUsed","title":"HttpStatusCodes.IMUsed","content":"HttpStatusCodes.IMUsed \nIMUsed \n The server has fulfilled a request for the resource, and the response is a representation of the result of one or more instance-manipulations applied to the current instance.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MultipleChoices","title":"HttpStatusCodes.MultipleChoices","content":"HttpStatusCodes.MultipleChoices \nMultipleChoices \n Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MovedPermanently","title":"HttpStatusCodes.MovedPermanently","content":"HttpStatusCodes.MovedPermanently \nMovedPermanently \n This and all future requests should be directed to the given URI.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Found","title":"HttpStatusCodes.Found","content":"HttpStatusCodes.Found \nFound \n Tells the client to look at (browse to) another url. 302 has been superseded by 303 and 307.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#SeeOther","title":"HttpStatusCodes.SeeOther","content":"HttpStatusCodes.SeeOther \nSeeOther \n The response to the request can be found under another URI using the GET method.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotModified","title":"HttpStatusCodes.NotModified","content":"HttpStatusCodes.NotModified \nNotModified \n Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UseProxy","title":"HttpStatusCodes.UseProxy","content":"HttpStatusCodes.UseProxy \nUseProxy \n The requested resource is available only through a proxy, the address for which is provided in the response.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#SwitchProxy","title":"HttpStatusCodes.SwitchProxy","content":"HttpStatusCodes.SwitchProxy \nSwitchProxy \n No longer used. Originally meant \u0022Subsequent requests should use the specified proxy.\u0022","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#TemporaryRedirect","title":"HttpStatusCodes.TemporaryRedirect","content":"HttpStatusCodes.TemporaryRedirect \nTemporaryRedirect \n In this case, the request should be repeated with another URI; however, future requests should still use the original URI.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PermanentRedirect","title":"HttpStatusCodes.PermanentRedirect","content":"HttpStatusCodes.PermanentRedirect \nPermanentRedirect \n The request and all future requests should be repeated using another URI.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#BadRequest","title":"HttpStatusCodes.BadRequest","content":"HttpStatusCodes.BadRequest \nBadRequest \n The server cannot or will not process the request due to an apparent client error.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Unauthorized","title":"HttpStatusCodes.Unauthorized","content":"HttpStatusCodes.Unauthorized \nUnauthorized \n Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet been provided.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PaymentRequired","title":"HttpStatusCodes.PaymentRequired","content":"HttpStatusCodes.PaymentRequired \nPaymentRequired \n Reserved for future use.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Forbidden","title":"HttpStatusCodes.Forbidden","content":"HttpStatusCodes.Forbidden \nForbidden \n The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotFound","title":"HttpStatusCodes.NotFound","content":"HttpStatusCodes.NotFound \nNotFound \n The requested resource could not be found but may be available in the future. Subsequent requests by the client are permissible.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MethodNotAllowed","title":"HttpStatusCodes.MethodNotAllowed","content":"HttpStatusCodes.MethodNotAllowed \nMethodNotAllowed \n A request method is not supported for the requested resource.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotAcceptable","title":"HttpStatusCodes.NotAcceptable","content":"HttpStatusCodes.NotAcceptable \nNotAcceptable \n The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ProxyAuthenticationRequired","title":"HttpStatusCodes.ProxyAuthenticationRequired","content":"HttpStatusCodes.ProxyAuthenticationRequired \nProxyAuthenticationRequired \n The client must first authenticate itself with the proxy.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#RequestTimeout","title":"HttpStatusCodes.RequestTimeout","content":"HttpStatusCodes.RequestTimeout \nRequestTimeout \n The server timed out waiting for the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Conflict","title":"HttpStatusCodes.Conflict","content":"HttpStatusCodes.Conflict \nConflict \n Indicates that the request could not be processed because of conflict in the request, such as an edit conflict between multiple simultaneous updates.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Gone","title":"HttpStatusCodes.Gone","content":"HttpStatusCodes.Gone \nGone \n Indicates that the resource requested is no longer available and will not be available again.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#LengthRequired","title":"HttpStatusCodes.LengthRequired","content":"HttpStatusCodes.LengthRequired \nLengthRequired \n The request did not specify the length of its content, which is required by the requested resource.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PreconditionFailed","title":"HttpStatusCodes.PreconditionFailed","content":"HttpStatusCodes.PreconditionFailed \nPreconditionFailed \n The server does not meet one of the preconditions that the requester put on the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PayloadTooLarge","title":"HttpStatusCodes.PayloadTooLarge","content":"HttpStatusCodes.PayloadTooLarge \nPayloadTooLarge \n The request is larger than the server is willing or able to process.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#URITooLong","title":"HttpStatusCodes.URITooLong","content":"HttpStatusCodes.URITooLong \nURITooLong \n The URI provided was too long for the server to process.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UnsupportedMediaType","title":"HttpStatusCodes.UnsupportedMediaType","content":"HttpStatusCodes.UnsupportedMediaType \nUnsupportedMediaType \n The request entity has a media type which the server or resource does not support.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#RangeNotSatisfiable","title":"HttpStatusCodes.RangeNotSatisfiable","content":"HttpStatusCodes.RangeNotSatisfiable \nRangeNotSatisfiable \n The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ExpectationFailed","title":"HttpStatusCodes.ExpectationFailed","content":"HttpStatusCodes.ExpectationFailed \nExpectationFailed \n The server cannot meet the requirements of the Expect request-header field.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#MisdirectedRequest","title":"HttpStatusCodes.MisdirectedRequest","content":"HttpStatusCodes.MisdirectedRequest \nMisdirectedRequest \n The request was directed at a server that is not able to produce a response.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UnprocessableEntity","title":"HttpStatusCodes.UnprocessableEntity","content":"HttpStatusCodes.UnprocessableEntity \nUnprocessableEntity \n The request was well-formed but was unable to be followed due to semantic errors.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#Locked","title":"HttpStatusCodes.Locked","content":"HttpStatusCodes.Locked \nLocked \n The resource that is being accessed is locked.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#FailedDependency","title":"HttpStatusCodes.FailedDependency","content":"HttpStatusCodes.FailedDependency \nFailedDependency \n The request failed because it depended on another request and that request failed (e.g., a PROPPATCH).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UpgradeRequired","title":"HttpStatusCodes.UpgradeRequired","content":"HttpStatusCodes.UpgradeRequired \nUpgradeRequired \n The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#PreconditionRequired","title":"HttpStatusCodes.PreconditionRequired","content":"HttpStatusCodes.PreconditionRequired \nPreconditionRequired \n The origin server requires the request to be conditional.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#TooManyRequests","title":"HttpStatusCodes.TooManyRequests","content":"HttpStatusCodes.TooManyRequests \nTooManyRequests \n The user has sent too many requests in a given amount of time.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#RequestHeaderFieldsTooLarge","title":"HttpStatusCodes.RequestHeaderFieldsTooLarge","content":"HttpStatusCodes.RequestHeaderFieldsTooLarge \nRequestHeaderFieldsTooLarge \n The server is unwilling to process the request because either an individual header field, or all the header fields collectively, are too large.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#UnavailableForLegalReasons","title":"HttpStatusCodes.UnavailableForLegalReasons","content":"HttpStatusCodes.UnavailableForLegalReasons \nUnavailableForLegalReasons \n A server operator has received a legal demand to deny access to a resource or to a set of resources that includes the requested resource.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#InternalServerError","title":"HttpStatusCodes.InternalServerError","content":"HttpStatusCodes.InternalServerError \nInternalServerError \n A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotImplemented","title":"HttpStatusCodes.NotImplemented","content":"HttpStatusCodes.NotImplemented \nNotImplemented \n The server either does not recognize the request method, or it lacks the ability to fulfil the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#BadGateway","title":"HttpStatusCodes.BadGateway","content":"HttpStatusCodes.BadGateway \nBadGateway \n The server was acting as a gateway or proxy and received an invalid response from the upstream server.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#ServiceUnavailable","title":"HttpStatusCodes.ServiceUnavailable","content":"HttpStatusCodes.ServiceUnavailable \nServiceUnavailable \n The server is currently unavailable (because it is overloaded or down for maintenance).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#GatewayTimeout","title":"HttpStatusCodes.GatewayTimeout","content":"HttpStatusCodes.GatewayTimeout \nGatewayTimeout \n The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#HTTPVersionNotSupported","title":"HttpStatusCodes.HTTPVersionNotSupported","content":"HttpStatusCodes.HTTPVersionNotSupported \nHTTPVersionNotSupported \n The server does not support the HTTP protocol version used in the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#VariantAlsoNegotiates","title":"HttpStatusCodes.VariantAlsoNegotiates","content":"HttpStatusCodes.VariantAlsoNegotiates \nVariantAlsoNegotiates \n Transparent content negotiation for the request results in a circular reference.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#InsufficientStorage","title":"HttpStatusCodes.InsufficientStorage","content":"HttpStatusCodes.InsufficientStorage \nInsufficientStorage \n The server is unable to store the representation needed to complete the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#LoopDetected","title":"HttpStatusCodes.LoopDetected","content":"HttpStatusCodes.LoopDetected \nLoopDetected \n The server detected an infinite loop while processing the request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NotExtended","title":"HttpStatusCodes.NotExtended","content":"HttpStatusCodes.NotExtended \nNotExtended \n Further extensions to the request are required for the server to fulfil it.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpstatuscodes.html#NetworkAuthenticationRequired","title":"HttpStatusCodes.NetworkAuthenticationRequired","content":"HttpStatusCodes.NetworkAuthenticationRequired \nNetworkAuthenticationRequired \n The client needs to authenticate to gain network access.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-mimetypes.html","title":"MimeTypes","content":"MimeTypes \n \nMimeTypes.tryFind \ntryFind","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-mimetypes.html#tryFind","title":"MimeTypes.tryFind","content":"MimeTypes.tryFind \ntryFind \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html","title":"Http","content":"Http \n Utilities for working with network via HTTP. Includes methods for downloading\n resources with specified headers, query parameters and HTTP body \nHttp.AsyncRequest \nAsyncRequest \nHttp.AsyncRequestStream \nAsyncRequestStream \nHttp.AsyncRequestString \nAsyncRequestString \nHttp.Request \nRequest \nHttp.RequestStream \nRequestStream \nHttp.RequestString \nRequestString","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#AsyncRequest","title":"Http.AsyncRequest","content":"Http.AsyncRequest \nAsyncRequest \n Download an HTTP web resource from the specified URL asynchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#AsyncRequestStream","title":"Http.AsyncRequestStream","content":"Http.AsyncRequestStream \nAsyncRequestStream \n Download an HTTP web resource from the specified URL asynchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#AsyncRequestString","title":"Http.AsyncRequestString","content":"Http.AsyncRequestString \nAsyncRequestString \n Download an HTTP web resource from the specified URL asynchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#Request","title":"Http.Request","content":"Http.Request \nRequest \n Download an HTTP web resource from the specified URL synchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#RequestStream","title":"Http.RequestStream","content":"Http.RequestStream \nRequestStream \n Download an HTTP web resource from the specified URL synchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-http.html#RequestString","title":"Http.RequestString","content":"Http.RequestString \nRequestString \n Download an HTTP web resource from the specified URL synchronously\n (allows specifying query string parameters and HTTP headers including\n headers that have to be handled specially - such as Accept, Content-Type \u0026 Referer)\n The body for POST request can be specified either as text or as a list of parameters\n that will be encoded, and the method will automatically be set if not specified","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html","title":"HttpRequestBody","content":"HttpRequestBody \n The body to send in an HTTP request \nHttpRequestBody.TextRequest \nTextRequest \nHttpRequestBody.BinaryUpload \nBinaryUpload \nHttpRequestBody.FormValues \nFormValues \nHttpRequestBody.Multipart \nMultipart \nHttpRequestBody.MultipartFormData \nMultipartFormData","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#TextRequest","title":"HttpRequestBody.TextRequest","content":"HttpRequestBody.TextRequest \nTextRequest \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#BinaryUpload","title":"HttpRequestBody.BinaryUpload","content":"HttpRequestBody.BinaryUpload \nBinaryUpload \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#FormValues","title":"HttpRequestBody.FormValues","content":"HttpRequestBody.FormValues \nFormValues \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#Multipart","title":"HttpRequestBody.Multipart","content":"HttpRequestBody.Multipart \nMultipart \n A sequence of formParamName * fileName * fileContent groups","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httprequestbody.html#MultipartFormData","title":"HttpRequestBody.MultipartFormData","content":"HttpRequestBody.MultipartFormData \nMultipartFormData \n A sequence of formParamName * fileName * fileContent groups","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html","title":"HttpResponse","content":"HttpResponse \n The response returned by an HTTP request \nHttpResponse.Body \nBody \nHttpResponse.StatusCode \nStatusCode \nHttpResponse.ResponseUrl \nResponseUrl \nHttpResponse.Headers \nHeaders \nHttpResponse.Cookies \nCookies","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#Body","title":"HttpResponse.Body","content":"HttpResponse.Body \nBody \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#StatusCode","title":"HttpResponse.StatusCode","content":"HttpResponse.StatusCode \nStatusCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#ResponseUrl","title":"HttpResponse.ResponseUrl","content":"HttpResponse.ResponseUrl \nResponseUrl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#Headers","title":"HttpResponse.Headers","content":"HttpResponse.Headers \nHeaders \n If the same header is present multiple times, the values will be concatenated with comma as the separator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponse.html#Cookies","title":"HttpResponse.Cookies","content":"HttpResponse.Cookies \nCookies \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsebody.html","title":"HttpResponseBody","content":"HttpResponseBody \n The response body returned by an HTTP request \nHttpResponseBody.Text \nText \nHttpResponseBody.Binary \nBinary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsebody.html#Text","title":"HttpResponseBody.Text","content":"HttpResponseBody.Text \nText \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsebody.html#Binary","title":"HttpResponseBody.Binary","content":"HttpResponseBody.Binary \nBinary \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html","title":"HttpResponseWithStream","content":"HttpResponseWithStream \n The response returned by an HTTP request with direct access to the response stream \nHttpResponseWithStream.ResponseStream \nResponseStream \nHttpResponseWithStream.StatusCode \nStatusCode \nHttpResponseWithStream.ResponseUrl \nResponseUrl \nHttpResponseWithStream.Headers \nHeaders \nHttpResponseWithStream.Cookies \nCookies","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#ResponseStream","title":"HttpResponseWithStream.ResponseStream","content":"HttpResponseWithStream.ResponseStream \nResponseStream \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#StatusCode","title":"HttpResponseWithStream.StatusCode","content":"HttpResponseWithStream.StatusCode \nStatusCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#ResponseUrl","title":"HttpResponseWithStream.ResponseUrl","content":"HttpResponseWithStream.ResponseUrl \nResponseUrl \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#Headers","title":"HttpResponseWithStream.Headers","content":"HttpResponseWithStream.Headers \nHeaders \n If the same header is present multiple times, the values will be concatenated with comma as the separator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-httpresponsewithstream.html#Cookies","title":"HttpResponseWithStream.Cookies","content":"HttpResponseWithStream.Cookies \nCookies \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartfileitem.html","title":"MultipartFileItem","content":"MultipartFileItem \n \nMultipartFileItem.MultipartFileItem \nMultipartFileItem","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartfileitem.html#MultipartFileItem","title":"MultipartFileItem.MultipartFileItem","content":"MultipartFileItem.MultipartFileItem \nMultipartFileItem \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartformdataitem.html","title":"MultipartFormDataItem","content":"MultipartFormDataItem \n \nMultipartFormDataItem.FileValue \nFileValue \nMultipartFormDataItem.FormValue \nFormValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartformdataitem.html#FileValue","title":"MultipartFormDataItem.FileValue","content":"MultipartFormDataItem.FileValue \nFileValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartformdataitem.html#FormValue","title":"MultipartFormDataItem.FormValue","content":"MultipartFormDataItem.FormValue \nFormValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartitem.html","title":"MultipartItem","content":"MultipartItem \n \nMultipartItem.MultipartItem \nMultipartItem","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-multipartitem.html#MultipartItem","title":"MultipartItem.MultipartItem","content":"MultipartItem.MultipartItem \nMultipartItem \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xelementextensions.html","title":"XElementExtensions","content":"XElementExtensions \n \nXElementExtensions.Request \nRequest \nXElementExtensions.RequestAsync \nRequestAsync","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xelementextensions.html#Request","title":"XElementExtensions.Request","content":"XElementExtensions.Request \nRequest \n Sends the XML to the specified uri. Defaults to a POST request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-xelementextensions.html#RequestAsync","title":"XElementExtensions.RequestAsync","content":"XElementExtensions.RequestAsync \nRequestAsync \n Sends the XML to the specified uri. Defaults to a POST request.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvextensionsmodule.html","title":"CsvExtensions","content":"CsvExtensions \n Provides the dynamic operator for getting column values by name from CSV rows \nCsvExtensions.(?) \n(?)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvextensionsmodule.html#(?)","title":"CsvExtensions.(?)","content":"CsvExtensions.(?) \n(?) \n Get the value of a column by name from a CSV row","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html","title":"CsvFile","content":"CsvFile \n\n Represents a CSV file. The lines are read on demand from \u003Ccode\u003Ereader\u003C/code\u003E.\n Columns are delimited by one of the chars passed by \u003Ccode\u003Eseparators\u003C/code\u003E (defaults to just \u003Ccode\u003E,\u003C/code\u003E), and\n to escape the separator chars, the \u003Ccode\u003Equote\u003C/code\u003E character will be used (defaults to \u003Ccode\u003E\u0026quot;\u003C/code\u003E).\n If \u003Ccode\u003EhasHeaders\u003C/code\u003E is true (the default), the first line read by \u003Ccode\u003Ereader\u003C/code\u003E will not be considered part of data.\n If \u003Ccode\u003EignoreErrors\u003C/code\u003E is true (the default is false), rows with a different number of columns from the header row\n (or the first row if headers are not present) will be ignored.\n The first \u003Ccode\u003EskipRows\u003C/code\u003E lines will be skipped.\n  \nCsvFile.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCsvFile.GetColumnIndex \nGetColumnIndex \nCsvFile.TryGetColumnIndex \nTryGetColumnIndex \nCsvFile.Append \nAppend \nCsvFile.Cache \nCache \nCsvFile.Filter \nFilter \nCsvFile.Map \nMap \nCsvFile.Save \nSave \nCsvFile.Save \nSave \nCsvFile.Save \nSave \nCsvFile.SaveToString \nSaveToString \nCsvFile.Skip \nSkip \nCsvFile.SkipWhile \nSkipWhile \nCsvFile.Take \nTake \nCsvFile.TakeWhile \nTakeWhile \nCsvFile.Truncate \nTruncate \nCsvFile.NumberOfColumns \nNumberOfColumns \nCsvFile.Headers \nHeaders \nCsvFile.Separators \nSeparators \nCsvFile.Quote \nQuote \nCsvFile.Rows \nRows \nCsvFile.AsyncLoad \nAsyncLoad \nCsvFile.Load \nLoad \nCsvFile.Load \nLoad \nCsvFile.Load \nLoad \nCsvFile.Parse \nParse \nCsvFile.Create \nCreate \nCsvFile.CreateEmpty \nCreateEmpty \nCsvFile.ParseRows \nParseRows","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#\u0060\u0060.ctor\u0060\u0060","title":"CsvFile.\u0060\u0060.ctor\u0060\u0060","content":"CsvFile.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#GetColumnIndex","title":"CsvFile.GetColumnIndex","content":"CsvFile.GetColumnIndex \nGetColumnIndex \n Returns the index of the column with the given name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#TryGetColumnIndex","title":"CsvFile.TryGetColumnIndex","content":"CsvFile.TryGetColumnIndex \nTryGetColumnIndex \n Returns the index of the column with the given name, or returns None if no column is found","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Append","title":"CsvFile.Append","content":"CsvFile.Append \nAppend \n Returns a csv with the same rows as the original plus the provided rows appended","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Cache","title":"CsvFile.Cache","content":"CsvFile.Cache \nCache \n Returns a new csv with the same rows as the original but which guarantees\n that each row will be only be read and parsed from the input at most once.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Filter","title":"CsvFile.Filter","content":"CsvFile.Filter \nFilter \n Returns a new csv containing only the rows for which the given predicate returns \u0022true\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Map","title":"CsvFile.Map","content":"CsvFile.Map \nMap \n Returns a new csv where every row has been transformed by the provided mapping function.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Save","title":"CsvFile.Save","content":"CsvFile.Save \nSave \n Saves CSV to the specified file","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Save","title":"CsvFile.Save","content":"CsvFile.Save \nSave \n Saves CSV to the specified stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Save","title":"CsvFile.Save","content":"CsvFile.Save \nSave \n Saves CSV to the specified writer","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#SaveToString","title":"CsvFile.SaveToString","content":"CsvFile.SaveToString \nSaveToString \n Saves CSV to a string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Skip","title":"CsvFile.Skip","content":"CsvFile.Skip \nSkip \n Returns a csv that skips N rows and then yields the remaining rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#SkipWhile","title":"CsvFile.SkipWhile","content":"CsvFile.SkipWhile \nSkipWhile \n Returns a csv that, when iterated, skips rows while the given predicate returns\n \u003Cc\u003Etrue\u003C/c\u003E, and then yields the remaining rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Take","title":"CsvFile.Take","content":"CsvFile.Take \nTake \n Returns a new csv with only the first N rows of the underlying csv.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#TakeWhile","title":"CsvFile.TakeWhile","content":"CsvFile.TakeWhile \nTakeWhile \n Returns a csv that, when iterated, yields rows while the given predicate\n returns \u003Cc\u003Etrue\u003C/c\u003E, and then returns no further rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Truncate","title":"CsvFile.Truncate","content":"CsvFile.Truncate \nTruncate \n Returns a csv that when enumerated returns at most N rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#NumberOfColumns","title":"CsvFile.NumberOfColumns","content":"CsvFile.NumberOfColumns \nNumberOfColumns \n The number of columns","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Headers","title":"CsvFile.Headers","content":"CsvFile.Headers \nHeaders \n The names of the columns","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Separators","title":"CsvFile.Separators","content":"CsvFile.Separators \nSeparators \n The character(s) used as column separator(s)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Quote","title":"CsvFile.Quote","content":"CsvFile.Quote \nQuote \n The quotation mark use for surrounding values containing separator chars","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Rows","title":"CsvFile.Rows","content":"CsvFile.Rows \nRows \n The rows with data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#AsyncLoad","title":"CsvFile.AsyncLoad","content":"CsvFile.AsyncLoad \nAsyncLoad \n Loads CSV from the specified uri asynchronously","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Load","title":"CsvFile.Load","content":"CsvFile.Load \nLoad \n Loads CSV from the specified uri","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Load","title":"CsvFile.Load","content":"CsvFile.Load \nLoad \n Loads CSV from the specified reader","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Load","title":"CsvFile.Load","content":"CsvFile.Load \nLoad \n Loads CSV from the specified stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Parse","title":"CsvFile.Parse","content":"CsvFile.Parse \nParse \n Parses the specified CSV content","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#Create","title":"CsvFile.Create","content":"CsvFile.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#CreateEmpty","title":"CsvFile.CreateEmpty","content":"CsvFile.CreateEmpty \nCreateEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvfile.html#ParseRows","title":"CsvFile.ParseRows","content":"CsvFile.ParseRows \nParseRows \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html","title":"CsvRow","content":"CsvRow \n \nCsvRow.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCsvRow.GetColumn \nGetColumn \nCsvRow.GetColumn \nGetColumn \nCsvRow.Item \nItem \nCsvRow.Item \nItem \nCsvRow.Columns \nColumns","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#\u0060\u0060.ctor\u0060\u0060","title":"CsvRow.\u0060\u0060.ctor\u0060\u0060","content":"CsvRow.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#GetColumn","title":"CsvRow.GetColumn","content":"CsvRow.GetColumn \nGetColumn \n Gets a column by name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#GetColumn","title":"CsvRow.GetColumn","content":"CsvRow.GetColumn \nGetColumn \n Gets a column by index","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#Item","title":"CsvRow.Item","content":"CsvRow.Item \nItem \n Gets a column by name","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#Item","title":"CsvRow.Item","content":"CsvRow.Item \nItem \n Gets a column by index","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-csvrow.html#Columns","title":"CsvRow.Columns","content":"CsvRow.Columns \nColumns \n The columns of the row","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html","title":"StringExtensions","content":"StringExtensions \n Extension methods with conversions from strings to other types \nStringExtensions.AsBoolean \nAsBoolean \nStringExtensions.AsDateTime \nAsDateTime \nStringExtensions.AsDateTimeOffset \nAsDateTimeOffset \nStringExtensions.AsDecimal \nAsDecimal \nStringExtensions.AsFloat \nAsFloat \nStringExtensions.AsGuid \nAsGuid \nStringExtensions.AsInteger \nAsInteger \nStringExtensions.AsInteger64 \nAsInteger64 \nStringExtensions.AsTimeSpan \nAsTimeSpan","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsBoolean","title":"StringExtensions.AsBoolean","content":"StringExtensions.AsBoolean \nAsBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsDateTime","title":"StringExtensions.AsDateTime","content":"StringExtensions.AsDateTime \nAsDateTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsDateTimeOffset","title":"StringExtensions.AsDateTimeOffset","content":"StringExtensions.AsDateTimeOffset \nAsDateTimeOffset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsDecimal","title":"StringExtensions.AsDecimal","content":"StringExtensions.AsDecimal \nAsDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsFloat","title":"StringExtensions.AsFloat","content":"StringExtensions.AsFloat \nAsFloat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsGuid","title":"StringExtensions.AsGuid","content":"StringExtensions.AsGuid \nAsGuid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsInteger","title":"StringExtensions.AsInteger","content":"StringExtensions.AsInteger \nAsInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsInteger64","title":"StringExtensions.AsInteger64","content":"StringExtensions.AsInteger64 \nAsInteger64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-stringextensions.html#AsTimeSpan","title":"StringExtensions.AsTimeSpan","content":"StringExtensions.AsTimeSpan \nAsTimeSpan \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-inferencemode.html","title":"InferenceMode","content":"InferenceMode \n This is the public inference mode enum used when initializing a type provider,\n with backward compatibility. \nInferenceMode.BackwardCompatible \nBackwardCompatible \nInferenceMode.NoInference \nNoInference \nInferenceMode.ValuesOnly \nValuesOnly \nInferenceMode.ValuesAndInlineSchemasHints \nValuesAndInlineSchemasHints \nInferenceMode.ValuesAndInlineSchemasOverrides \nValuesAndInlineSchemasOverrides","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-inferencemode.html#BackwardCompatible","title":"InferenceMode.BackwardCompatible","content":"InferenceMode.BackwardCompatible \nBackwardCompatible \n Used as a default value for backward compatibility with the legacy InferTypesFromValues boolean static parameter.\n The actual behaviour will depend on whether InferTypesFromValues is set to true (default) or false.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-inferencemode.html#NoInference","title":"InferenceMode.NoInference","content":"InferenceMode.NoInference \nNoInference \n Type everything as strings\n (or the most basic type possible for the value when it\u0027s not string, e.g. for json numbers or booleans).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-inferencemode.html#ValuesOnly","title":"InferenceMode.ValuesOnly","content":"InferenceMode.ValuesOnly \nValuesOnly \n Infer types from values only. Inline schemas are disabled.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-inferencemode.html#ValuesAndInlineSchemasHints","title":"InferenceMode.ValuesAndInlineSchemasHints","content":"InferenceMode.ValuesAndInlineSchemasHints \nValuesAndInlineSchemasHints \n Inline schemas types have the same weight as value infered types.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-inferencemode.html#ValuesAndInlineSchemasOverrides","title":"InferenceMode.ValuesAndInlineSchemasOverrides","content":"InferenceMode.ValuesAndInlineSchemasOverrides \nValuesAndInlineSchemasOverrides \n Inline schemas types override value infered types. (Value infered types are ignored if an inline schema is present)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html","title":"TextConversions","content":"TextConversions \n Conversions from string to string/int/int64/decimal/float/boolean/datetime/timespan/guid options \nTextConversions.AsBoolean \nAsBoolean \nTextConversions.AsDateTime \nAsDateTime \nTextConversions.AsDateTimeOffset \nAsDateTimeOffset \nTextConversions.AsDecimal \nAsDecimal \nTextConversions.AsFloat \nAsFloat \nTextConversions.AsGuid \nAsGuid \nTextConversions.AsInteger \nAsInteger \nTextConversions.AsInteger64 \nAsInteger64 \nTextConversions.AsString \nAsString \nTextConversions.AsTimeSpan \nAsTimeSpan \nTextConversions.DefaultNonCurrencyAdorners \nDefaultNonCurrencyAdorners \nTextConversions.DefaultCurrencyAdorners \nDefaultCurrencyAdorners \nTextConversions.DefaultMissingValues \nDefaultMissingValues","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsBoolean","title":"TextConversions.AsBoolean","content":"TextConversions.AsBoolean \nAsBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsDateTime","title":"TextConversions.AsDateTime","content":"TextConversions.AsDateTime \nAsDateTime \n Parse date time using either the JSON milliseconds format or using ISO 8601\n that is, either \u0060/Date(\u003Cmsec-since-1/1/1970\u003E)/\u0060 or something\n along the lines of \u00602013-01-28T00:37Z\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsDateTimeOffset","title":"TextConversions.AsDateTimeOffset","content":"TextConversions.AsDateTimeOffset \nAsDateTimeOffset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsDecimal","title":"TextConversions.AsDecimal","content":"TextConversions.AsDecimal \nAsDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsFloat","title":"TextConversions.AsFloat","content":"TextConversions.AsFloat \nAsFloat \n if useNoneForMissingValues is true, NAs are returned as None, otherwise Some Double.NaN is used","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsGuid","title":"TextConversions.AsGuid","content":"TextConversions.AsGuid \nAsGuid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsInteger","title":"TextConversions.AsInteger","content":"TextConversions.AsInteger \nAsInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsInteger64","title":"TextConversions.AsInteger64","content":"TextConversions.AsInteger64 \nAsInteger64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsString","title":"TextConversions.AsString","content":"TextConversions.AsString \nAsString \n Turns empty or null string value into None, otherwise returns Some","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#AsTimeSpan","title":"TextConversions.AsTimeSpan","content":"TextConversions.AsTimeSpan \nAsTimeSpan \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#DefaultNonCurrencyAdorners","title":"TextConversions.DefaultNonCurrencyAdorners","content":"TextConversions.DefaultNonCurrencyAdorners \nDefaultNonCurrencyAdorners \n \u0060%\u0060 \u0060\u2030\u0060 \u0060\u2031\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#DefaultCurrencyAdorners","title":"TextConversions.DefaultCurrencyAdorners","content":"TextConversions.DefaultCurrencyAdorners \nDefaultCurrencyAdorners \n \u0060\u00A4\u0060 \u0060$\u0060 \u0060\u00A2\u0060 \u0060\u00A3\u0060 \u0060\u00A5\u0060 \u0060\u20B1\u0060 \u0060\uFDFC\u0060 \u0060\u20A4\u0060 \u0060\u20AD\u0060 \u0060\u20A6\u0060 \u0060\u20A8\u0060 \u0060\u20A9\u0060 \u0060\u20AE\u0060 \u0060\u20AC\u0060 \u0060\u0E3F\u0060 \u0060\u20A1\u0060 \u0060\u17DB\u0060 \u0060\u060B\u0060 \u0060\u20B4\u0060 \u0060\u20AA\u0060 \u0060\u20AB\u0060 \u0060\u20B9\u0060 \u0060\u0192\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-textconversions.html#DefaultMissingValues","title":"TextConversions.DefaultMissingValues","content":"TextConversions.DefaultMissingValues \nDefaultMissingValues \n \u0060NaN\u0060 \u0060NA\u0060 \u0060N/A\u0060 \u0060#N/A\u0060 \u0060:\u0060 \u0060-\u0060 \u0060TBA\u0060 \u0060TBD\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html","title":"JsonSchema","content":"JsonSchema \n Module that handles JSON Schema parsing and type inference \nJsonSchema.JsonSchemaDefinition \nJsonSchemaDefinition \nJsonSchema.JsonSchemaType \nJsonSchemaType \nJsonSchema.JsonSchemaValidator \nJsonSchemaValidator \nJsonSchema.ValidationResult \nValidationResult \nJsonSchema.empty \nempty \nJsonSchema.formatToType \nformatToType \nJsonSchema.parseSchema \nparseSchema \nJsonSchema.parseSchemaFromString \nparseSchemaFromString \nJsonSchema.parseSchemaFromTextReader \nparseSchemaFromTextReader \nJsonSchema.createStringType \ncreateStringType \nJsonSchema.createIntType \ncreateIntType \nJsonSchema.createDecimalType \ncreateDecimalType \nJsonSchema.createBooleanType \ncreateBooleanType \nJsonSchema.createDateTimeType \ncreateDateTimeType \nJsonSchema.createGuidType \ncreateGuidType \nJsonSchema.schemaToInferedType \nschemaToInferedType \nJsonSchema.resolveReferences \nresolveReferences \nJsonSchema.validate \nvalidate \nJsonSchema.createValidator \ncreateValidator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#empty","title":"JsonSchema.empty","content":"JsonSchema.empty \nempty \n Default empty schema definition","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#formatToType","title":"JsonSchema.formatToType","content":"JsonSchema.formatToType \nformatToType \n Convert JSON Schema format to .NET type","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#parseSchema","title":"JsonSchema.parseSchema","content":"JsonSchema.parseSchema \nparseSchema \n Parse a JSON Schema from a JsonValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#parseSchemaFromString","title":"JsonSchema.parseSchemaFromString","content":"JsonSchema.parseSchemaFromString \nparseSchemaFromString \n Parse a JSON Schema from a string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#parseSchemaFromTextReader","title":"JsonSchema.parseSchemaFromTextReader","content":"JsonSchema.parseSchemaFromTextReader \nparseSchemaFromTextReader \n Parse a JSON Schema from a TextReader","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createStringType","title":"JsonSchema.createStringType","content":"JsonSchema.createStringType \ncreateStringType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createIntType","title":"JsonSchema.createIntType","content":"JsonSchema.createIntType \ncreateIntType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createDecimalType","title":"JsonSchema.createDecimalType","content":"JsonSchema.createDecimalType \ncreateDecimalType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createBooleanType","title":"JsonSchema.createBooleanType","content":"JsonSchema.createBooleanType \ncreateBooleanType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createDateTimeType","title":"JsonSchema.createDateTimeType","content":"JsonSchema.createDateTimeType \ncreateDateTimeType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createGuidType","title":"JsonSchema.createGuidType","content":"JsonSchema.createGuidType \ncreateGuidType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#schemaToInferedType","title":"JsonSchema.schemaToInferedType","content":"JsonSchema.schemaToInferedType \nschemaToInferedType \n Convert a JSON Schema type to an InferedType for the type provider","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#resolveReferences","title":"JsonSchema.resolveReferences","content":"JsonSchema.resolveReferences \nresolveReferences \n Resolve references in a schema (simple implementation)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#validate","title":"JsonSchema.validate","content":"JsonSchema.validate \nvalidate \n Validate a JSON value against a schema","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema.html#createValidator","title":"JsonSchema.createValidator","content":"JsonSchema.createValidator \ncreateValidator \n Create a validator function from a schema","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html","title":"JsonSchemaDefinition","content":"JsonSchemaDefinition \n Represents a parsed JSON Schema \nJsonSchemaDefinition.Type \nType \nJsonSchemaDefinition.Description \nDescription \nJsonSchemaDefinition.Properties \nProperties \nJsonSchemaDefinition.Required \nRequired \nJsonSchemaDefinition.Items \nItems \nJsonSchemaDefinition.Enum \nEnum \nJsonSchemaDefinition.Minimum \nMinimum \nJsonSchemaDefinition.Maximum \nMaximum \nJsonSchemaDefinition.MinLength \nMinLength \nJsonSchemaDefinition.MaxLength \nMaxLength \nJsonSchemaDefinition.Format \nFormat \nJsonSchemaDefinition.Pattern \nPattern \nJsonSchemaDefinition.OneOf \nOneOf \nJsonSchemaDefinition.AnyOf \nAnyOf \nJsonSchemaDefinition.AllOf \nAllOf \nJsonSchemaDefinition.Reference \nReference","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Type","title":"JsonSchemaDefinition.Type","content":"JsonSchemaDefinition.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Description","title":"JsonSchemaDefinition.Description","content":"JsonSchemaDefinition.Description \nDescription \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Properties","title":"JsonSchemaDefinition.Properties","content":"JsonSchemaDefinition.Properties \nProperties \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Required","title":"JsonSchemaDefinition.Required","content":"JsonSchemaDefinition.Required \nRequired \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Items","title":"JsonSchemaDefinition.Items","content":"JsonSchemaDefinition.Items \nItems \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Enum","title":"JsonSchemaDefinition.Enum","content":"JsonSchemaDefinition.Enum \nEnum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Minimum","title":"JsonSchemaDefinition.Minimum","content":"JsonSchemaDefinition.Minimum \nMinimum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Maximum","title":"JsonSchemaDefinition.Maximum","content":"JsonSchemaDefinition.Maximum \nMaximum \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#MinLength","title":"JsonSchemaDefinition.MinLength","content":"JsonSchemaDefinition.MinLength \nMinLength \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#MaxLength","title":"JsonSchemaDefinition.MaxLength","content":"JsonSchemaDefinition.MaxLength \nMaxLength \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Format","title":"JsonSchemaDefinition.Format","content":"JsonSchemaDefinition.Format \nFormat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Pattern","title":"JsonSchemaDefinition.Pattern","content":"JsonSchemaDefinition.Pattern \nPattern \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#OneOf","title":"JsonSchemaDefinition.OneOf","content":"JsonSchemaDefinition.OneOf \nOneOf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#AnyOf","title":"JsonSchemaDefinition.AnyOf","content":"JsonSchemaDefinition.AnyOf \nAnyOf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#AllOf","title":"JsonSchemaDefinition.AllOf","content":"JsonSchemaDefinition.AllOf \nAllOf \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemadefinition.html#Reference","title":"JsonSchemaDefinition.Reference","content":"JsonSchemaDefinition.Reference \nReference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html","title":"JsonSchemaType","content":"JsonSchemaType \n Represents basic JSON Schema types \nJsonSchemaType.String \nString \nJsonSchemaType.Number \nNumber \nJsonSchemaType.Integer \nInteger \nJsonSchemaType.Boolean \nBoolean \nJsonSchemaType.Object \nObject \nJsonSchemaType.Array \nArray \nJsonSchemaType.Null \nNull \nJsonSchemaType.Any \nAny","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#String","title":"JsonSchemaType.String","content":"JsonSchemaType.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Number","title":"JsonSchemaType.Number","content":"JsonSchemaType.Number \nNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Integer","title":"JsonSchemaType.Integer","content":"JsonSchemaType.Integer \nInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Boolean","title":"JsonSchemaType.Boolean","content":"JsonSchemaType.Boolean \nBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Object","title":"JsonSchemaType.Object","content":"JsonSchemaType.Object \nObject \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Array","title":"JsonSchemaType.Array","content":"JsonSchemaType.Array \nArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Null","title":"JsonSchemaType.Null","content":"JsonSchemaType.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschematype.html#Any","title":"JsonSchemaType.Any","content":"JsonSchemaType.Any \nAny \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-jsonschemavalidator.html","title":"JsonSchemaValidator","content":"JsonSchemaValidator \n Represents a JSON Schema validator function","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-validationresult.html","title":"ValidationResult","content":"ValidationResult \n Represents the result of validating a JSON value against a schema \nValidationResult.Valid \nValid \nValidationResult.Invalid \nInvalid","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-validationresult.html#Valid","title":"ValidationResult.Valid","content":"ValidationResult.Valid \nValid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonschema-validationresult.html#Invalid","title":"ValidationResult.Invalid","content":"ValidationResult.Invalid \nInvalid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html","title":"JsonConversions","content":"JsonConversions \n Conversions from JsonValue to string/int/int64/decimal/float/boolean/datetime/datetimeoffset/timespan/guid options \nJsonConversions.AsDateTime \nAsDateTime \nJsonConversions.AsDateTimeOffset \nAsDateTimeOffset \nJsonConversions.AsDecimal \nAsDecimal \nJsonConversions.AsFloat \nAsFloat \nJsonConversions.AsInteger \nAsInteger \nJsonConversions.AsInteger64 \nAsInteger64 \nJsonConversions.AsString \nAsString \nJsonConversions.AsTimeSpan \nAsTimeSpan \nJsonConversions.AsGuid \nAsGuid \nJsonConversions.AsBoolean \nAsBoolean","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsDateTime","title":"JsonConversions.AsDateTime","content":"JsonConversions.AsDateTime \nAsDateTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsDateTimeOffset","title":"JsonConversions.AsDateTimeOffset","content":"JsonConversions.AsDateTimeOffset \nAsDateTimeOffset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsDecimal","title":"JsonConversions.AsDecimal","content":"JsonConversions.AsDecimal \nAsDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsFloat","title":"JsonConversions.AsFloat","content":"JsonConversions.AsFloat \nAsFloat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsInteger","title":"JsonConversions.AsInteger","content":"JsonConversions.AsInteger \nAsInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsInteger64","title":"JsonConversions.AsInteger64","content":"JsonConversions.AsInteger64 \nAsInteger64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsString","title":"JsonConversions.AsString","content":"JsonConversions.AsString \nAsString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsTimeSpan","title":"JsonConversions.AsTimeSpan","content":"JsonConversions.AsTimeSpan \nAsTimeSpan \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsGuid","title":"JsonConversions.AsGuid","content":"JsonConversions.AsGuid \nAsGuid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonconversions.html#AsBoolean","title":"JsonConversions.AsBoolean","content":"JsonConversions.AsBoolean \nAsBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html","title":"JsonRuntime","content":"JsonRuntime \n Static helper methods called from the generated code for working with JSON \nJsonRuntime.ConvertArray \nConvertArray \nJsonRuntime.ConvertBoolean \nConvertBoolean \nJsonRuntime.ConvertDateTime \nConvertDateTime \nJsonRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \nJsonRuntime.ConvertDecimal \nConvertDecimal \nJsonRuntime.ConvertFloat \nConvertFloat \nJsonRuntime.ConvertGuid \nConvertGuid \nJsonRuntime.ConvertInteger \nConvertInteger \nJsonRuntime.ConvertInteger64 \nConvertInteger64 \nJsonRuntime.ConvertOptionalProperty \nConvertOptionalProperty \nJsonRuntime.ConvertRecordToDictionary \nConvertRecordToDictionary \nJsonRuntime.ConvertString \nConvertString \nJsonRuntime.ConvertTimeSpan \nConvertTimeSpan \nJsonRuntime.CreateArray \nCreateArray \nJsonRuntime.CreateRecord \nCreateRecord \nJsonRuntime.CreateRecordFromDictionary \nCreateRecordFromDictionary \nJsonRuntime.CreateValue \nCreateValue \nJsonRuntime.GetArrayChildByTypeTag \nGetArrayChildByTypeTag \nJsonRuntime.GetArrayChildrenByTypeTag \nGetArrayChildrenByTypeTag \nJsonRuntime.GetKeysFromInferedDictionary \nGetKeysFromInferedDictionary \nJsonRuntime.GetNonOptionalValue \nGetNonOptionalValue \nJsonRuntime.GetPropertyPacked \nGetPropertyPacked \nJsonRuntime.GetPropertyPackedOrNull \nGetPropertyPackedOrNull \nJsonRuntime.GetRecordProperties \nGetRecordProperties \nJsonRuntime.GetValueByKeyFromInferedDictionary \nGetValueByKeyFromInferedDictionary \nJsonRuntime.GetValuesFromInferedDictionary \nGetValuesFromInferedDictionary \nJsonRuntime.InferedDictionaryContainsKey \nInferedDictionaryContainsKey \nJsonRuntime.TryGetArrayChildByTypeTag \nTryGetArrayChildByTypeTag \nJsonRuntime.TryGetPropertyPacked \nTryGetPropertyPacked \nJsonRuntime.TryGetPropertyUnpacked \nTryGetPropertyUnpacked \nJsonRuntime.TryGetPropertyUnpackedWithPath \nTryGetPropertyUnpackedWithPath \nJsonRuntime.TryGetValueByKeyFromInferedDictionary \nTryGetValueByKeyFromInferedDictionary \nJsonRuntime.TryGetValueByTypeTag \nTryGetValueByTypeTag","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertArray","title":"JsonRuntime.ConvertArray","content":"JsonRuntime.ConvertArray \nConvertArray \n Converts JSON array to array of target types","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertBoolean","title":"JsonRuntime.ConvertBoolean","content":"JsonRuntime.ConvertBoolean \nConvertBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertDateTime","title":"JsonRuntime.ConvertDateTime","content":"JsonRuntime.ConvertDateTime \nConvertDateTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertDateTimeOffset","title":"JsonRuntime.ConvertDateTimeOffset","content":"JsonRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertDecimal","title":"JsonRuntime.ConvertDecimal","content":"JsonRuntime.ConvertDecimal \nConvertDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertFloat","title":"JsonRuntime.ConvertFloat","content":"JsonRuntime.ConvertFloat \nConvertFloat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertGuid","title":"JsonRuntime.ConvertGuid","content":"JsonRuntime.ConvertGuid \nConvertGuid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertInteger","title":"JsonRuntime.ConvertInteger","content":"JsonRuntime.ConvertInteger \nConvertInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertInteger64","title":"JsonRuntime.ConvertInteger64","content":"JsonRuntime.ConvertInteger64 \nConvertInteger64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertOptionalProperty","title":"JsonRuntime.ConvertOptionalProperty","content":"JsonRuntime.ConvertOptionalProperty \nConvertOptionalProperty \n Get optional json property and convert to a specified type","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertRecordToDictionary","title":"JsonRuntime.ConvertRecordToDictionary","content":"JsonRuntime.ConvertRecordToDictionary \nConvertRecordToDictionary \n Converts JSON record to dictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertString","title":"JsonRuntime.ConvertString","content":"JsonRuntime.ConvertString \nConvertString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#ConvertTimeSpan","title":"JsonRuntime.ConvertTimeSpan","content":"JsonRuntime.ConvertTimeSpan \nConvertTimeSpan \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateArray","title":"JsonRuntime.CreateArray","content":"JsonRuntime.CreateArray \nCreateArray \n Creates a scalar JsonValue.Array and wraps it in a json document","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateRecord","title":"JsonRuntime.CreateRecord","content":"JsonRuntime.CreateRecord \nCreateRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateRecordFromDictionary","title":"JsonRuntime.CreateRecordFromDictionary","content":"JsonRuntime.CreateRecordFromDictionary \nCreateRecordFromDictionary \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#CreateValue","title":"JsonRuntime.CreateValue","content":"JsonRuntime.CreateValue \nCreateValue \n Creates a scalar JsonValue and wraps it in a json document","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetArrayChildByTypeTag","title":"JsonRuntime.GetArrayChildByTypeTag","content":"JsonRuntime.GetArrayChildByTypeTag \nGetArrayChildByTypeTag \n Returns a single array children that matches the specified tag","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetArrayChildrenByTypeTag","title":"JsonRuntime.GetArrayChildrenByTypeTag","content":"JsonRuntime.GetArrayChildrenByTypeTag \nGetArrayChildrenByTypeTag \n Returns all array values that match the specified tag","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetKeysFromInferedDictionary","title":"JsonRuntime.GetKeysFromInferedDictionary","content":"JsonRuntime.GetKeysFromInferedDictionary \nGetKeysFromInferedDictionary \n Get keys from infered dictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetNonOptionalValue","title":"JsonRuntime.GetNonOptionalValue","content":"JsonRuntime.GetNonOptionalValue \nGetNonOptionalValue \n Operation that extracts the value from an option and reports a meaningful error message when the value is not there\n If the originalValue is a scalar, for missing strings we return \u0022\u0022, and for missing doubles we return NaN\n For other types an error is thrown","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetPropertyPacked","title":"JsonRuntime.GetPropertyPacked","content":"JsonRuntime.GetPropertyPacked \nGetPropertyPacked \n Get json property and wrap in json document","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetPropertyPackedOrNull","title":"JsonRuntime.GetPropertyPackedOrNull","content":"JsonRuntime.GetPropertyPackedOrNull \nGetPropertyPackedOrNull \n Get json property and wrap in json document, and return null if not found","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetRecordProperties","title":"JsonRuntime.GetRecordProperties","content":"JsonRuntime.GetRecordProperties \nGetRecordProperties \n Get properties of the record","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetValueByKeyFromInferedDictionary","title":"JsonRuntime.GetValueByKeyFromInferedDictionary","content":"JsonRuntime.GetValueByKeyFromInferedDictionary \nGetValueByKeyFromInferedDictionary \n Get a value by the key from infered dictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#GetValuesFromInferedDictionary","title":"JsonRuntime.GetValuesFromInferedDictionary","content":"JsonRuntime.GetValuesFromInferedDictionary \nGetValuesFromInferedDictionary \n Get values from infered dictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#InferedDictionaryContainsKey","title":"JsonRuntime.InferedDictionaryContainsKey","content":"JsonRuntime.InferedDictionaryContainsKey \nInferedDictionaryContainsKey \n Get a value by the key from infered dictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetArrayChildByTypeTag","title":"JsonRuntime.TryGetArrayChildByTypeTag","content":"JsonRuntime.TryGetArrayChildByTypeTag \nTryGetArrayChildByTypeTag \n Returns single or no value from an array matching the specified tag","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetPropertyPacked","title":"JsonRuntime.TryGetPropertyPacked","content":"JsonRuntime.TryGetPropertyPacked \nTryGetPropertyPacked \n Get optional json property wrapped in json document","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetPropertyUnpacked","title":"JsonRuntime.TryGetPropertyUnpacked","content":"JsonRuntime.TryGetPropertyUnpacked \nTryGetPropertyUnpacked \n Get optional json property","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetPropertyUnpackedWithPath","title":"JsonRuntime.TryGetPropertyUnpackedWithPath","content":"JsonRuntime.TryGetPropertyUnpackedWithPath \nTryGetPropertyUnpackedWithPath \n Get optional json property and wrap it together with path","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetValueByKeyFromInferedDictionary","title":"JsonRuntime.TryGetValueByKeyFromInferedDictionary","content":"JsonRuntime.TryGetValueByKeyFromInferedDictionary \nTryGetValueByKeyFromInferedDictionary \n Try get a value by the key from infered dictionary","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonruntime.html#TryGetValueByTypeTag","title":"JsonRuntime.TryGetValueByTypeTag","content":"JsonRuntime.TryGetValueByTypeTag \nTryGetValueByTypeTag \n Returns a single or no value by tag type","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonvalueoptionandpath.html","title":"JsonValueOptionAndPath","content":"JsonValueOptionAndPath \n \nJsonValueOptionAndPath.JsonOpt \nJsonOpt \nJsonValueOptionAndPath.Path \nPath","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonvalueoptionandpath.html#JsonOpt","title":"JsonValueOptionAndPath.JsonOpt","content":"JsonValueOptionAndPath.JsonOpt \nJsonOpt \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-jsonvalueoptionandpath.html#Path","title":"JsonValueOptionAndPath.Path","content":"JsonValueOptionAndPath.Path \nPath \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlinference.html","title":"HtmlInference","content":"HtmlInference \n Structural inference for HTML tables","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html","title":"HtmlRuntime","content":"HtmlRuntime \n Helper functions called from the generated code for working with HTML tables \nHtmlRuntime.getLists \ngetLists \nHtmlRuntime.getDefinitionLists \ngetDefinitionLists","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html#getLists","title":"HtmlRuntime.getLists","content":"HtmlRuntime.getLists \ngetLists \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlruntime.html#getDefinitionLists","title":"HtmlRuntime.getDefinitionLists","content":"HtmlRuntime.getDefinitionLists \ngetDefinitionLists \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html","title":"HtmlDefinitionList","content":"HtmlDefinitionList \n Representation of an HTML definition list \nHtmlDefinitionList.Name \nName \nHtmlDefinitionList.Definitions \nDefinitions \nHtmlDefinitionList.Html \nHtml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html#Name","title":"HtmlDefinitionList.Name","content":"HtmlDefinitionList.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html#Definitions","title":"HtmlDefinitionList.Definitions","content":"HtmlDefinitionList.Definitions \nDefinitions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmldefinitionlist.html#Html","title":"HtmlDefinitionList.Html","content":"HtmlDefinitionList.Html \nHtml \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html","title":"HtmlList","content":"HtmlList \n Representation of an HTML list \nHtmlList.Name \nName \nHtmlList.Values \nValues \nHtmlList.Html \nHtml","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html#Name","title":"HtmlList.Name","content":"HtmlList.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html#Values","title":"HtmlList.Values","content":"HtmlList.Values \nValues \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmllist.html#Html","title":"HtmlList.Html","content":"HtmlList.Html \nHtml \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobjectdescription.html","title":"HtmlObjectDescription","content":"HtmlObjectDescription \n Representation of an HTML table, list, or definition list \nHtmlObjectDescription.Name \nName \nHtmlObjectDescription.Table \nTable \nHtmlObjectDescription.List \nList \nHtmlObjectDescription.DefinitionList \nDefinitionList","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobjectdescription.html#Name","title":"HtmlObjectDescription.Name","content":"HtmlObjectDescription.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobjectdescription.html#Table","title":"HtmlObjectDescription.Table","content":"HtmlObjectDescription.Table \nTable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobjectdescription.html#List","title":"HtmlObjectDescription.List","content":"HtmlObjectDescription.List \nList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmlobjectdescription.html#DefinitionList","title":"HtmlObjectDescription.DefinitionList","content":"HtmlObjectDescription.DefinitionList \nDefinitionList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html","title":"HtmlTable","content":"HtmlTable \n Representation of an HTML table cell \nHtmlTable.HasHeaders \nHasHeaders \nHtmlTable.Html \nHtml \nHtmlTable.Name \nName \nHtmlTable.Rows \nRows","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#HasHeaders","title":"HtmlTable.HasHeaders","content":"HtmlTable.HasHeaders \nHasHeaders \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#Html","title":"HtmlTable.Html","content":"HtmlTable.Html \nHtml \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#Name","title":"HtmlTable.Name","content":"HtmlTable.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltable.html#Rows","title":"HtmlTable.Rows","content":"HtmlTable.Rows \nRows \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html","title":"HtmlTableCell","content":"HtmlTableCell \nRepresentation of an HTML table cell \nHtmlTableCell.IsHeader \nIsHeader \nHtmlTableCell.Data \nData \nHtmlTableCell.Cell \nCell \nHtmlTableCell.Empty \nEmpty","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#IsHeader","title":"HtmlTableCell.IsHeader","content":"HtmlTableCell.IsHeader \nIsHeader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#Data","title":"HtmlTableCell.Data","content":"HtmlTableCell.Data \nData \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#Cell","title":"HtmlTableCell.Cell","content":"HtmlTableCell.Cell \nCell \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-htmltablecell.html#Empty","title":"HtmlTableCell.Empty","content":"HtmlTableCell.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema.html","title":"XmlSchema","content":"XmlSchema \n \nXmlSchema.ResolutionFolderResolver \nResolutionFolderResolver \nXmlSchema.parseSchemaFromTextReader \nparseSchemaFromTextReader \nXmlSchema.parseSchema \nparseSchema","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema.html#parseSchemaFromTextReader","title":"XmlSchema.parseSchemaFromTextReader","content":"XmlSchema.parseSchemaFromTextReader \nparseSchemaFromTextReader \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema.html#parseSchema","title":"XmlSchema.parseSchema","content":"XmlSchema.parseSchema \nparseSchema \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema-resolutionfolderresolver.html","title":"ResolutionFolderResolver","content":"ResolutionFolderResolver \n A custom XmlResolver is needed for included files because we get the contents of the main file\n directly as a string from the FSharp.Data infrastructure. Hence the default XmlResolver is not\n able to find the location of included schema files. \nResolutionFolderResolver.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlschema-resolutionfolderresolver.html#\u0060\u0060.ctor\u0060\u0060","title":"ResolutionFolderResolver.\u0060\u0060.ctor\u0060\u0060","content":"ResolutionFolderResolver.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html","title":"XmlRuntime","content":"XmlRuntime \n Static helper methods called from the generated code for working with XML \nXmlRuntime.ConvertArray \nConvertArray \nXmlRuntime.ConvertAsName \nConvertAsName \nXmlRuntime.ConvertOptional \nConvertOptional \nXmlRuntime.ConvertOptional2 \nConvertOptional2 \nXmlRuntime.CreateRecord \nCreateRecord \nXmlRuntime.CreateValue \nCreateValue \nXmlRuntime.GetChild \nGetChild \nXmlRuntime.GetJsonValue \nGetJsonValue \nXmlRuntime.TryGetAttribute \nTryGetAttribute \nXmlRuntime.TryGetJsonValue \nTryGetJsonValue \nXmlRuntime.TryGetValue \nTryGetValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertArray","title":"XmlRuntime.ConvertArray","content":"XmlRuntime.ConvertArray \nConvertArray \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertAsName","title":"XmlRuntime.ConvertAsName","content":"XmlRuntime.ConvertAsName \nConvertAsName \n Returns Some if the specified XmlElement has the specified name\n (otherwise None is returned). This is used when the current element\n can be one of multiple elements.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertOptional","title":"XmlRuntime.ConvertOptional","content":"XmlRuntime.ConvertOptional \nConvertOptional \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#ConvertOptional2","title":"XmlRuntime.ConvertOptional2","content":"XmlRuntime.ConvertOptional2 \nConvertOptional2 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#CreateRecord","title":"XmlRuntime.CreateRecord","content":"XmlRuntime.CreateRecord \nCreateRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#CreateValue","title":"XmlRuntime.CreateValue","content":"XmlRuntime.CreateValue \nCreateValue \n Creates a XElement with a scalar value and wraps it in a XmlElement","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#GetChild","title":"XmlRuntime.GetChild","content":"XmlRuntime.GetChild \nGetChild \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#GetJsonValue","title":"XmlRuntime.GetJsonValue","content":"XmlRuntime.GetJsonValue \nGetJsonValue \n Returns the contents of the element as a JsonValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#TryGetAttribute","title":"XmlRuntime.TryGetAttribute","content":"XmlRuntime.TryGetAttribute \nTryGetAttribute \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#TryGetJsonValue","title":"XmlRuntime.TryGetJsonValue","content":"XmlRuntime.TryGetJsonValue \nTryGetJsonValue \n Tries to return the contents of the element as a JsonValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-xmlruntime.html#TryGetValue","title":"XmlRuntime.TryGetValue","content":"XmlRuntime.TryGetValue \nTryGetValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvinference.html","title":"CsvInference","content":"CsvInference \n Structural inference for CSV","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html","title":"CsvFile\u003C\u0027RowType\u003E","content":"CsvFile\u003C\u0027RowType\u003E \n \nCsvFile\u003C\u0027RowType\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nCsvFile\u003C\u0027RowType\u003E.Append \nAppend \nCsvFile\u003C\u0027RowType\u003E.Cache \nCache \nCsvFile\u003C\u0027RowType\u003E.Filter \nFilter \nCsvFile\u003C\u0027RowType\u003E.Map \nMap \nCsvFile\u003C\u0027RowType\u003E.Save \nSave \nCsvFile\u003C\u0027RowType\u003E.Save \nSave \nCsvFile\u003C\u0027RowType\u003E.Save \nSave \nCsvFile\u003C\u0027RowType\u003E.SaveToString \nSaveToString \nCsvFile\u003C\u0027RowType\u003E.Skip \nSkip \nCsvFile\u003C\u0027RowType\u003E.SkipWhile \nSkipWhile \nCsvFile\u003C\u0027RowType\u003E.Take \nTake \nCsvFile\u003C\u0027RowType\u003E.TakeWhile \nTakeWhile \nCsvFile\u003C\u0027RowType\u003E.Truncate \nTruncate \nCsvFile\u003C\u0027RowType\u003E.NumberOfColumns \nNumberOfColumns \nCsvFile\u003C\u0027RowType\u003E.Headers \nHeaders \nCsvFile\u003C\u0027RowType\u003E.Separators \nSeparators \nCsvFile\u003C\u0027RowType\u003E.Quote \nQuote \nCsvFile\u003C\u0027RowType\u003E.Rows \nRows \nCsvFile\u003C\u0027RowType\u003E.Create \nCreate \nCsvFile\u003C\u0027RowType\u003E.CreateEmpty \nCreateEmpty \nCsvFile\u003C\u0027RowType\u003E.ParseRows \nParseRows","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#\u0060\u0060.ctor\u0060\u0060","title":"CsvFile\u003C\u0027RowType\u003E.\u0060\u0060.ctor\u0060\u0060","content":"CsvFile\u003C\u0027RowType\u003E.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Append","title":"CsvFile\u003C\u0027RowType\u003E.Append","content":"CsvFile\u003C\u0027RowType\u003E.Append \nAppend \n Returns a csv with the same rows as the original plus the provided rows appended","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Cache","title":"CsvFile\u003C\u0027RowType\u003E.Cache","content":"CsvFile\u003C\u0027RowType\u003E.Cache \nCache \n Returns a new csv with the same rows as the original but which guarantees\n that each row will be only be read and parsed from the input at most once.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Filter","title":"CsvFile\u003C\u0027RowType\u003E.Filter","content":"CsvFile\u003C\u0027RowType\u003E.Filter \nFilter \n Returns a new csv containing only the rows for which the given predicate returns \u0022true\u0022.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Map","title":"CsvFile\u003C\u0027RowType\u003E.Map","content":"CsvFile\u003C\u0027RowType\u003E.Map \nMap \n Returns a new csv where every row has been transformed by the provided mapping function.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Save","title":"CsvFile\u003C\u0027RowType\u003E.Save","content":"CsvFile\u003C\u0027RowType\u003E.Save \nSave \n Saves CSV to the specified file","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Save","title":"CsvFile\u003C\u0027RowType\u003E.Save","content":"CsvFile\u003C\u0027RowType\u003E.Save \nSave \n Saves CSV to the specified stream","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Save","title":"CsvFile\u003C\u0027RowType\u003E.Save","content":"CsvFile\u003C\u0027RowType\u003E.Save \nSave \n Saves CSV to the specified writer","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#SaveToString","title":"CsvFile\u003C\u0027RowType\u003E.SaveToString","content":"CsvFile\u003C\u0027RowType\u003E.SaveToString \nSaveToString \n Saves CSV to a string","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Skip","title":"CsvFile\u003C\u0027RowType\u003E.Skip","content":"CsvFile\u003C\u0027RowType\u003E.Skip \nSkip \n Returns a csv that skips N rows and then yields the remaining rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#SkipWhile","title":"CsvFile\u003C\u0027RowType\u003E.SkipWhile","content":"CsvFile\u003C\u0027RowType\u003E.SkipWhile \nSkipWhile \n Returns a csv that, when iterated, skips rows while the given predicate returns\n \u003Cc\u003Etrue\u003C/c\u003E, and then yields the remaining rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Take","title":"CsvFile\u003C\u0027RowType\u003E.Take","content":"CsvFile\u003C\u0027RowType\u003E.Take \nTake \n Returns a new csv with only the first N rows of the underlying csv.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#TakeWhile","title":"CsvFile\u003C\u0027RowType\u003E.TakeWhile","content":"CsvFile\u003C\u0027RowType\u003E.TakeWhile \nTakeWhile \n Returns a csv that, when iterated, yields rows while the given predicate\n returns \u003Cc\u003Etrue\u003C/c\u003E, and then returns no further rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Truncate","title":"CsvFile\u003C\u0027RowType\u003E.Truncate","content":"CsvFile\u003C\u0027RowType\u003E.Truncate \nTruncate \n Returns a csv that when enumerated returns at most N rows.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#NumberOfColumns","title":"CsvFile\u003C\u0027RowType\u003E.NumberOfColumns","content":"CsvFile\u003C\u0027RowType\u003E.NumberOfColumns \nNumberOfColumns \n The number of columns","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Headers","title":"CsvFile\u003C\u0027RowType\u003E.Headers","content":"CsvFile\u003C\u0027RowType\u003E.Headers \nHeaders \n The names of the columns","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Separators","title":"CsvFile\u003C\u0027RowType\u003E.Separators","content":"CsvFile\u003C\u0027RowType\u003E.Separators \nSeparators \n The character(s) used as column separator(s)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Quote","title":"CsvFile\u003C\u0027RowType\u003E.Quote","content":"CsvFile\u003C\u0027RowType\u003E.Quote \nQuote \n The quotation mark use for surrounding values containing separator chars","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Rows","title":"CsvFile\u003C\u0027RowType\u003E.Rows","content":"CsvFile\u003C\u0027RowType\u003E.Rows \nRows \n The rows with data","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#Create","title":"CsvFile\u003C\u0027RowType\u003E.Create","content":"CsvFile\u003C\u0027RowType\u003E.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#CreateEmpty","title":"CsvFile\u003C\u0027RowType\u003E.CreateEmpty","content":"CsvFile\u003C\u0027RowType\u003E.CreateEmpty \nCreateEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-csvfile-1.html#ParseRows","title":"CsvFile\u003C\u0027RowType\u003E.ParseRows","content":"CsvFile\u003C\u0027RowType\u003E.ParseRows \nParseRows \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html","title":"IO","content":"IO \n Helper functions called from the generated code for working with files \nIO.watchForChanges \nwatchForChanges \nIO.asyncReadTextAtRuntime \nasyncReadTextAtRuntime \nIO.asyncReadTextAtRuntimeWithDesignTimeRules \nasyncReadTextAtRuntimeWithDesignTimeRules","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html#watchForChanges","title":"IO.watchForChanges","content":"IO.watchForChanges \nwatchForChanges \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html#asyncReadTextAtRuntime","title":"IO.asyncReadTextAtRuntime","content":"IO.asyncReadTextAtRuntime \nasyncReadTextAtRuntime \n Returns a TextReader for the uri using the runtime resolution rules","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-io.html#asyncReadTextAtRuntimeWithDesignTimeRules","title":"IO.asyncReadTextAtRuntimeWithDesignTimeRules","content":"IO.asyncReadTextAtRuntimeWithDesignTimeRules \nasyncReadTextAtRuntimeWithDesignTimeRules \n Returns a TextReader for the uri using the designtime resolution rules","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html","title":"NameUtils","content":"NameUtils \n Tools for generating nice member names that follow F# \u0026 .NET naming conventions \nNameUtils.nicePascalName \nnicePascalName \nNameUtils.niceCamelName \nniceCamelName \nNameUtils.uniqueGenerator \nuniqueGenerator \nNameUtils.capitalizeFirstLetter \ncapitalizeFirstLetter \nNameUtils.trimHtml \ntrimHtml \nNameUtils.pluralize \npluralize \nNameUtils.singularize \nsingularize","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#nicePascalName","title":"NameUtils.nicePascalName","content":"NameUtils.nicePascalName \nnicePascalName \n Turns a given non-empty string into a nice \u0027PascalCase\u0027 identifier","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#niceCamelName","title":"NameUtils.niceCamelName","content":"NameUtils.niceCamelName \nniceCamelName \n Turns a given non-empty string into a nice \u0027camelCase\u0027 identifier","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#uniqueGenerator","title":"NameUtils.uniqueGenerator","content":"NameUtils.uniqueGenerator \nuniqueGenerator \n\u003Cpre\u003E Given a function to format names (such as \u0027niceCamelName\u0027 or \u0027nicePascalName\u0027)\n returns a name generator that never returns duplicate name (by appending an\n index to already used names)\n\n This function is curried and should be used with partial function application:\n\n     let makeUnique = uniqueGenerator nicePascalName\n     let n1 = makeUnique \u0022sample-name\u0022\n     let n2 = makeUnique \u0022sample-name\u0022\u003C/pre\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#capitalizeFirstLetter","title":"NameUtils.capitalizeFirstLetter","content":"NameUtils.capitalizeFirstLetter \ncapitalizeFirstLetter \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#trimHtml","title":"NameUtils.trimHtml","content":"NameUtils.trimHtml \ntrimHtml \n Trim HTML tags from a given string and replace all of them with spaces\n Multiple tags are replaced with just a single space. (This is a recursive\n implementation that is somewhat faster than regular expression.)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#pluralize","title":"NameUtils.pluralize","content":"NameUtils.pluralize \npluralize \n Return the plural of an English word","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-nameutils.html#singularize","title":"NameUtils.singularize","content":"NameUtils.singularize \nsingularize \n Return the singular of an English word","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html","title":"StructuralInference","content":"StructuralInference \n Implements type inference for unstructured documents like XML or JSON \nStructuralInference.IUnitsOfMeasureProvider \nIUnitsOfMeasureProvider \nStructuralInference.InferenceMode\u0027 \nInferenceMode\u0027 \nStructuralInference.asOption \nasOption \nStructuralInference.supportsUnitsOfMeasure \nsupportsUnitsOfMeasure \nStructuralInference.typeTag \ntypeTag \nStructuralInference.defaultUnitsOfMeasureProvider \ndefaultUnitsOfMeasureProvider \nStructuralInference.parseUnitOfMeasure \nparseUnitOfMeasure \nStructuralInference.nameToType \nnameToType \nStructuralInference.parseTypeAndUnit \nparseTypeAndUnit \nStructuralInference.inferPrimitiveType \ninferPrimitiveType \nStructuralInference.getInferedTypeFromString \ngetInferedTypeFromString","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#asOption","title":"StructuralInference.asOption","content":"StructuralInference.asOption \nasOption \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#supportsUnitsOfMeasure","title":"StructuralInference.supportsUnitsOfMeasure","content":"StructuralInference.supportsUnitsOfMeasure \nsupportsUnitsOfMeasure \n Checks whether a type supports unit of measure","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#typeTag","title":"StructuralInference.typeTag","content":"StructuralInference.typeTag \ntypeTag \n Returns a tag of a type - a tag represents a \u0027kind\u0027 of type\n (essentially it describes the different bottom types we have)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#defaultUnitsOfMeasureProvider","title":"StructuralInference.defaultUnitsOfMeasureProvider","content":"StructuralInference.defaultUnitsOfMeasureProvider \ndefaultUnitsOfMeasureProvider \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#parseUnitOfMeasure","title":"StructuralInference.parseUnitOfMeasure","content":"StructuralInference.parseUnitOfMeasure \nparseUnitOfMeasure \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#nameToType","title":"StructuralInference.nameToType","content":"StructuralInference.nameToType \nnameToType \n The inferred types may be set explicitly via inline schemas.\n This table specifies the mapping from (the names that users can use) to (the types used).","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#parseTypeAndUnit","title":"StructuralInference.parseTypeAndUnit","content":"StructuralInference.parseTypeAndUnit \nparseTypeAndUnit \n\n Parses type specification in the schema for a single value.\n This can be of the form: \u003Ccode\u003Etype|measure|type\u0026lt;measure\u0026gt;\u003C/code\u003E\n type{measure} is also supported to ease definition in xml values.\n ","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#inferPrimitiveType","title":"StructuralInference.inferPrimitiveType","content":"StructuralInference.inferPrimitiveType \ninferPrimitiveType \n Infers the type of a string value\n Returns one of null|typeof\u003CBit0\u003E|typeof\u003CBit1\u003E|typeof\u003Cbool\u003E|typeof\u003Cint\u003E|typeof\u003Cint64\u003E|typeof\u003Cdecimal\u003E|typeof\u003Cfloat\u003E|typeof\u003CGuid\u003E|typeof\u003CDateTime\u003E|typeof\u003CTimeSpan\u003E|typeof\u003Cstring\u003E\n with the desiredUnit applied,\n or a value parsed from an inline schema.\n (For inline schemas, the unit parsed from the schema takes precedence over desiredUnit when present)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference.html#getInferedTypeFromString","title":"StructuralInference.getInferedTypeFromString","content":"StructuralInference.getInferedTypeFromString \ngetInferedTypeFromString \n Infers the type of a simple string value","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html","title":"IUnitsOfMeasureProvider","content":"IUnitsOfMeasureProvider \n \nIUnitsOfMeasureProvider.Inverse \nInverse \nIUnitsOfMeasureProvider.Product \nProduct \nIUnitsOfMeasureProvider.SI \nSI","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html#Inverse","title":"IUnitsOfMeasureProvider.Inverse","content":"IUnitsOfMeasureProvider.Inverse \nInverse \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html#Product","title":"IUnitsOfMeasureProvider.Product","content":"IUnitsOfMeasureProvider.Product \nProduct \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-iunitsofmeasureprovider.html#SI","title":"IUnitsOfMeasureProvider.SI","content":"IUnitsOfMeasureProvider.SI \nSI \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-inferencemode\u0027.html","title":"InferenceMode\u0027","content":"InferenceMode\u0027 \n This is the internal DU representing all the valid cases we support, mapped from the public InferenceMode. \nInferenceMode\u0027.FromPublicApi \nFromPublicApi \nInferenceMode\u0027.NoInference \nNoInference \nInferenceMode\u0027.ValuesOnly \nValuesOnly \nInferenceMode\u0027.ValuesAndInlineSchemasHints \nValuesAndInlineSchemasHints \nInferenceMode\u0027.ValuesAndInlineSchemasOverrides \nValuesAndInlineSchemasOverrides","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-inferencemode\u0027.html#FromPublicApi","title":"InferenceMode\u0027.FromPublicApi","content":"InferenceMode\u0027.FromPublicApi \nFromPublicApi \n Converts from the public api enum with backward compat to the internal representation with only valid cases.\n If the user sets InferenceMode manually (to a value other than BackwardCompatible)\n then the legacy InferTypesFromValues is ignored.\n Otherwise (when set to BackwardCompatible), inference mode is set to a compatible value.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-inferencemode\u0027.html#NoInference","title":"InferenceMode\u0027.NoInference","content":"InferenceMode\u0027.NoInference \nNoInference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-inferencemode\u0027.html#ValuesOnly","title":"InferenceMode\u0027.ValuesOnly","content":"InferenceMode\u0027.ValuesOnly \nValuesOnly \n Backward compatible mode.","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-inferencemode\u0027.html#ValuesAndInlineSchemasHints","title":"InferenceMode\u0027.ValuesAndInlineSchemasHints","content":"InferenceMode\u0027.ValuesAndInlineSchemasHints \nValuesAndInlineSchemasHints \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuralinference-inferencemode\u0027.html#ValuesAndInlineSchemasOverrides","title":"InferenceMode\u0027.ValuesAndInlineSchemasOverrides","content":"InferenceMode\u0027.ValuesAndInlineSchemasOverrides \nValuesAndInlineSchemasOverrides \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html","title":"TextRuntime","content":"TextRuntime \n Static helper methods called from the generated code for working with text \nTextRuntime.AsyncMap \nAsyncMap \nTextRuntime.ConvertBoolean \nConvertBoolean \nTextRuntime.ConvertBooleanBack \nConvertBooleanBack \nTextRuntime.ConvertDateTime \nConvertDateTime \nTextRuntime.ConvertDateTimeBack \nConvertDateTimeBack \nTextRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \nTextRuntime.ConvertDateTimeOffsetBack \nConvertDateTimeOffsetBack \nTextRuntime.ConvertDecimal \nConvertDecimal \nTextRuntime.ConvertDecimalBack \nConvertDecimalBack \nTextRuntime.ConvertFloat \nConvertFloat \nTextRuntime.ConvertFloatBack \nConvertFloatBack \nTextRuntime.ConvertGuid \nConvertGuid \nTextRuntime.ConvertGuidBack \nConvertGuidBack \nTextRuntime.ConvertInteger \nConvertInteger \nTextRuntime.ConvertInteger64 \nConvertInteger64 \nTextRuntime.ConvertInteger64Back \nConvertInteger64Back \nTextRuntime.ConvertIntegerBack \nConvertIntegerBack \nTextRuntime.ConvertString \nConvertString \nTextRuntime.ConvertStringBack \nConvertStringBack \nTextRuntime.ConvertTimeSpan \nConvertTimeSpan \nTextRuntime.ConvertTimeSpanBack \nConvertTimeSpanBack \nTextRuntime.GetCulture \nGetCulture \nTextRuntime.GetMissingValues \nGetMissingValues \nTextRuntime.GetNonOptionalValue \nGetNonOptionalValue \nTextRuntime.NullableToOption \nNullableToOption \nTextRuntime.OptionToNullable \nOptionToNullable \nTextRuntime.cultureInfoCache \ncultureInfoCache","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#AsyncMap","title":"TextRuntime.AsyncMap","content":"TextRuntime.AsyncMap \nAsyncMap \n Turn a sync operation into an async operation","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertBoolean","title":"TextRuntime.ConvertBoolean","content":"TextRuntime.ConvertBoolean \nConvertBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertBooleanBack","title":"TextRuntime.ConvertBooleanBack","content":"TextRuntime.ConvertBooleanBack \nConvertBooleanBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTime","title":"TextRuntime.ConvertDateTime","content":"TextRuntime.ConvertDateTime \nConvertDateTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTimeBack","title":"TextRuntime.ConvertDateTimeBack","content":"TextRuntime.ConvertDateTimeBack \nConvertDateTimeBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTimeOffset","title":"TextRuntime.ConvertDateTimeOffset","content":"TextRuntime.ConvertDateTimeOffset \nConvertDateTimeOffset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDateTimeOffsetBack","title":"TextRuntime.ConvertDateTimeOffsetBack","content":"TextRuntime.ConvertDateTimeOffsetBack \nConvertDateTimeOffsetBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDecimal","title":"TextRuntime.ConvertDecimal","content":"TextRuntime.ConvertDecimal \nConvertDecimal \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertDecimalBack","title":"TextRuntime.ConvertDecimalBack","content":"TextRuntime.ConvertDecimalBack \nConvertDecimalBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertFloat","title":"TextRuntime.ConvertFloat","content":"TextRuntime.ConvertFloat \nConvertFloat \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertFloatBack","title":"TextRuntime.ConvertFloatBack","content":"TextRuntime.ConvertFloatBack \nConvertFloatBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertGuid","title":"TextRuntime.ConvertGuid","content":"TextRuntime.ConvertGuid \nConvertGuid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertGuidBack","title":"TextRuntime.ConvertGuidBack","content":"TextRuntime.ConvertGuidBack \nConvertGuidBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertInteger","title":"TextRuntime.ConvertInteger","content":"TextRuntime.ConvertInteger \nConvertInteger \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertInteger64","title":"TextRuntime.ConvertInteger64","content":"TextRuntime.ConvertInteger64 \nConvertInteger64 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertInteger64Back","title":"TextRuntime.ConvertInteger64Back","content":"TextRuntime.ConvertInteger64Back \nConvertInteger64Back \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertIntegerBack","title":"TextRuntime.ConvertIntegerBack","content":"TextRuntime.ConvertIntegerBack \nConvertIntegerBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertString","title":"TextRuntime.ConvertString","content":"TextRuntime.ConvertString \nConvertString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertStringBack","title":"TextRuntime.ConvertStringBack","content":"TextRuntime.ConvertStringBack \nConvertStringBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertTimeSpan","title":"TextRuntime.ConvertTimeSpan","content":"TextRuntime.ConvertTimeSpan \nConvertTimeSpan \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#ConvertTimeSpanBack","title":"TextRuntime.ConvertTimeSpanBack","content":"TextRuntime.ConvertTimeSpanBack \nConvertTimeSpanBack \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#GetCulture","title":"TextRuntime.GetCulture","content":"TextRuntime.GetCulture \nGetCulture \n Returns CultureInfo matching the specified culture string\n (or InvariantCulture if the argument is null or empty)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#GetMissingValues","title":"TextRuntime.GetMissingValues","content":"TextRuntime.GetMissingValues \nGetMissingValues \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#GetNonOptionalValue","title":"TextRuntime.GetNonOptionalValue","content":"TextRuntime.GetNonOptionalValue \nGetNonOptionalValue \n Operation that extracts the value from an option and reports a meaningful error message when the value is not there\n For missing strings we return \u0022\u0022, and for missing doubles we return NaN\n For other types an error is thrown","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#NullableToOption","title":"TextRuntime.NullableToOption","content":"TextRuntime.NullableToOption \nNullableToOption \n Turn a .NET type Nullable\u003C\u0027T\u003E to an F# option type Option\u003C\u0027T\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#OptionToNullable","title":"TextRuntime.OptionToNullable","content":"TextRuntime.OptionToNullable \nOptionToNullable \n Turn an F# option type Option\u003C\u0027T\u003E containing a primitive\n value type into a .NET type Nullable\u003C\u0027T\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-textruntime.html#cultureInfoCache","title":"TextRuntime.cultureInfoCache","content":"TextRuntime.cultureInfoCache \ncultureInfoCache \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html","title":"IJsonDocument","content":"IJsonDocument \n \nIJsonDocument.CreateNew \nCreateNew \nIJsonDocument.Path \nPath \nIJsonDocument.JsonValue \nJsonValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html#CreateNew","title":"IJsonDocument.CreateNew","content":"IJsonDocument.CreateNew \nCreateNew \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html#Path","title":"IJsonDocument.Path","content":"IJsonDocument.Path \nPath \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-ijsondocument.html#JsonValue","title":"IJsonDocument.JsonValue","content":"IJsonDocument.JsonValue \nJsonValue \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html","title":"JsonDocument","content":"JsonDocument \nUnderlying representation of types generated by JsonProvider \nJsonDocument.JsonValue \nJsonValue \nJsonDocument.Create \nCreate \nJsonDocument.Create \nCreate \nJsonDocument.CreateList \nCreateList \nJsonDocument.Json \nJson \nJsonDocument.Path \nPath","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#JsonValue","title":"JsonDocument.JsonValue","content":"JsonDocument.JsonValue \nJsonValue \n The underlying JsonValue","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Create","title":"JsonDocument.Create","content":"JsonDocument.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Create","title":"JsonDocument.Create","content":"JsonDocument.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#CreateList","title":"JsonDocument.CreateList","content":"JsonDocument.CreateList \nCreateList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Json","title":"JsonDocument.Json","content":"JsonDocument.Json \nJson \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-jsondocument.html#Path","title":"JsonDocument.Path","content":"JsonDocument.Path \nPath \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html","title":"HtmlDocument","content":"HtmlDocument \n Underlying representation of the root types generated by HtmlProvider \nHtmlDocument.GetDefinitionList \nGetDefinitionList \nHtmlDocument.GetList \nGetList \nHtmlDocument.GetTable \nGetTable \nHtmlDocument.Html \nHtml \nHtmlDocument.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#GetDefinitionList","title":"HtmlDocument.GetDefinitionList","content":"HtmlDocument.GetDefinitionList \nGetDefinitionList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#GetList","title":"HtmlDocument.GetList","content":"HtmlDocument.GetList \nGetList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#GetTable","title":"HtmlDocument.GetTable","content":"HtmlDocument.GetTable \nGetTable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#Html","title":"HtmlDocument.Html","content":"HtmlDocument.Html \nHtml \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmldocument.html#Create","title":"HtmlDocument.Create","content":"HtmlDocument.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html","title":"HtmlList\u003C\u0027ItemType\u003E","content":"HtmlList\u003C\u0027ItemType\u003E \n Underlying representation of list types generated by HtmlProvider \nHtmlList\u003C\u0027ItemType\u003E.Html \nHtml \nHtmlList\u003C\u0027ItemType\u003E.Name \nName \nHtmlList\u003C\u0027ItemType\u003E.Values \nValues \nHtmlList\u003C\u0027ItemType\u003E.Create \nCreate \nHtmlList\u003C\u0027ItemType\u003E.CreateNested \nCreateNested","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Html","title":"HtmlList\u003C\u0027ItemType\u003E.Html","content":"HtmlList\u003C\u0027ItemType\u003E.Html \nHtml \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Name","title":"HtmlList\u003C\u0027ItemType\u003E.Name","content":"HtmlList\u003C\u0027ItemType\u003E.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Values","title":"HtmlList\u003C\u0027ItemType\u003E.Values","content":"HtmlList\u003C\u0027ItemType\u003E.Values \nValues \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#Create","title":"HtmlList\u003C\u0027ItemType\u003E.Create","content":"HtmlList\u003C\u0027ItemType\u003E.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmllist-1.html#CreateNested","title":"HtmlList\u003C\u0027ItemType\u003E.CreateNested","content":"HtmlList\u003C\u0027ItemType\u003E.CreateNested \nCreateNested \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html","title":"HtmlTable\u003C\u0027RowType\u003E","content":"HtmlTable\u003C\u0027RowType\u003E \n Underlying representation of table types generated by HtmlProvider \nHtmlTable\u003C\u0027RowType\u003E.Headers \nHeaders \nHtmlTable\u003C\u0027RowType\u003E.Html \nHtml \nHtmlTable\u003C\u0027RowType\u003E.Name \nName \nHtmlTable\u003C\u0027RowType\u003E.Rows \nRows \nHtmlTable\u003C\u0027RowType\u003E.Create \nCreate","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Headers","title":"HtmlTable\u003C\u0027RowType\u003E.Headers","content":"HtmlTable\u003C\u0027RowType\u003E.Headers \nHeaders \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Html","title":"HtmlTable\u003C\u0027RowType\u003E.Html","content":"HtmlTable\u003C\u0027RowType\u003E.Html \nHtml \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Name","title":"HtmlTable\u003C\u0027RowType\u003E.Name","content":"HtmlTable\u003C\u0027RowType\u003E.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Rows","title":"HtmlTable\u003C\u0027RowType\u003E.Rows","content":"HtmlTable\u003C\u0027RowType\u003E.Rows \nRows \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-htmltable-1.html#Create","title":"HtmlTable\u003C\u0027RowType\u003E.Create","content":"HtmlTable\u003C\u0027RowType\u003E.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html","title":"XmlElement","content":"XmlElement \n Underlying representation of types generated by XmlProvider \nXmlElement._Print \n_Print \nXmlElement.Create \nCreate \nXmlElement.Create \nCreate \nXmlElement.CreateList \nCreateList \nXmlElement.XElement \nXElement","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#_Print","title":"XmlElement._Print","content":"XmlElement._Print \n_Print \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#Create","title":"XmlElement.Create","content":"XmlElement.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#Create","title":"XmlElement.Create","content":"XmlElement.Create \nCreate \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#CreateList","title":"XmlElement.CreateList","content":"XmlElement.CreateList \nCreateList \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-basetypes-xmlelement.html#XElement","title":"XmlElement.XElement","content":"XmlElement.XElement \nXElement \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit.html","title":"Bit","content":"Bit \n Dummy type to represent that only one of \u00220\u0022 and \u00221\u0022 were found\n Will be generated as a \u0027bool\u0027, unless it\u0027s converted to another numerical type \nBit.Bit \nBit","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit.html#Bit","title":"Bit.Bit","content":"Bit.Bit \nBit \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit0.html","title":"Bit0","content":"Bit0 \n Dummy type to represent that only \u00220\u0022 was found.\n Will be generated as \u0027int\u0027, unless it\u0027s converted to Bit. \nBit0.Bit0 \nBit0","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit0.html#Bit0","title":"Bit0.Bit0","content":"Bit0.Bit0 \nBit0 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit1.html","title":"Bit1","content":"Bit1 \n Dummy type to represent that only \u00221\u0022 was found\n Will be generated as \u0027int\u0027, unless it\u0027s converted to Bit \nBit1.Bit1 \nBit1","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-bit1.html#Bit1","title":"Bit1.Bit1","content":"Bit1.Bit1 \nBit1 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html","title":"InferedMultiplicity","content":"InferedMultiplicity \n For heterogeneous types (types that have multiple possible forms\n such as differently named XML nodes or records and arrays mixed together)\n this type represents the number of occurrences of individual forms \nInferedMultiplicity.Single \nSingle \nInferedMultiplicity.OptionalSingle \nOptionalSingle \nInferedMultiplicity.Multiple \nMultiple","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html#Single","title":"InferedMultiplicity.Single","content":"InferedMultiplicity.Single \nSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html#OptionalSingle","title":"InferedMultiplicity.OptionalSingle","content":"InferedMultiplicity.OptionalSingle \nOptionalSingle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedmultiplicity.html#Multiple","title":"InferedMultiplicity.Multiple","content":"InferedMultiplicity.Multiple \nMultiple \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedproperty.html","title":"InferedProperty","content":"InferedProperty \nA property of a record has a name and type and may be optional \nInferedProperty.Name \nName \nInferedProperty.Type \nType","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedproperty.html#Name","title":"InferedProperty.Name","content":"InferedProperty.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedproperty.html#Type","title":"InferedProperty.Type","content":"InferedProperty.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html","title":"InferedType","content":"InferedType \n\u003Cpre\u003E Represents inferred structural type. A type may be either primitive type\n (one of those listed by \u0060primitiveTypes\u0060) or it can be collection,\n (named) record and heterogeneous type. We also have \u0060Null\u0060 type (which is\n a subtype of all non-primitive types) and universal \u0060Top\u0060 type.\n\n  * For collection, we infer the types of different things that appear in\n    the collection and how many times they do.\n\n  * A heterogeneous type (sum type) is simply a choice containing one\n    of multiple different possibilities\n\n Why is collection not simply a list of Heterogeneous types? If we used that\n we would lose information about multiplicity and so we would not be able\n to generate nicer types!\u003C/pre\u003E \nInferedType.DropOptionality \nDropOptionality \nInferedType.EnsuresHandlesMissingValues \nEnsuresHandlesMissingValues \nInferedType.GetDropOptionality \nGetDropOptionality \nInferedType.IsOptional \nIsOptional \nInferedType.CanHaveEmptyValues \nCanHaveEmptyValues \nInferedType.Primitive \nPrimitive \nInferedType.Record \nRecord \nInferedType.Json \nJson \nInferedType.Collection \nCollection \nInferedType.Heterogeneous \nHeterogeneous \nInferedType.Null \nNull \nInferedType.Top \nTop","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#DropOptionality","title":"InferedType.DropOptionality","content":"InferedType.DropOptionality \nDropOptionality \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#EnsuresHandlesMissingValues","title":"InferedType.EnsuresHandlesMissingValues","content":"InferedType.EnsuresHandlesMissingValues \nEnsuresHandlesMissingValues \n When allowEmptyValues is true, we allow \u0022\u0022 and double.NaN, otherwise\n we make the type optional and use None instead.\n It\u0027s currently only true in CsvProvider when PreferOptionals is set to false","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#GetDropOptionality","title":"InferedType.GetDropOptionality","content":"InferedType.GetDropOptionality \nGetDropOptionality \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#IsOptional","title":"InferedType.IsOptional","content":"InferedType.IsOptional \nIsOptional \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#CanHaveEmptyValues","title":"InferedType.CanHaveEmptyValues","content":"InferedType.CanHaveEmptyValues \nCanHaveEmptyValues \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Primitive","title":"InferedType.Primitive","content":"InferedType.Primitive \nPrimitive \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Record","title":"InferedType.Record","content":"InferedType.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Json","title":"InferedType.Json","content":"InferedType.Json \nJson \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Collection","title":"InferedType.Collection","content":"InferedType.Collection \nCollection \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Heterogeneous","title":"InferedType.Heterogeneous","content":"InferedType.Heterogeneous \nHeterogeneous \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Null","title":"InferedType.Null","content":"InferedType.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtype.html#Top","title":"InferedType.Top","content":"InferedType.Top \nTop \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html","title":"InferedTypeTag","content":"InferedTypeTag \n For heterogeneous types, this represents the tag that defines the form\n (that is either primitive type, collection, named record etc.) \nInferedTypeTag.NiceName \nNiceName \nInferedTypeTag.Code \nCode \nInferedTypeTag.ParseCode \nParseCode \nInferedTypeTag.Null \nNull \nInferedTypeTag.Number \nNumber \nInferedTypeTag.Boolean \nBoolean \nInferedTypeTag.String \nString \nInferedTypeTag.Json \nJson \nInferedTypeTag.DateTime \nDateTime \nInferedTypeTag.TimeSpan \nTimeSpan \nInferedTypeTag.DateTimeOffset \nDateTimeOffset \nInferedTypeTag.Guid \nGuid \nInferedTypeTag.Collection \nCollection \nInferedTypeTag.Heterogeneous \nHeterogeneous \nInferedTypeTag.Record \nRecord","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#NiceName","title":"InferedTypeTag.NiceName","content":"InferedTypeTag.NiceName \nNiceName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Code","title":"InferedTypeTag.Code","content":"InferedTypeTag.Code \nCode \n Converts tag to string code that can be passed to generated code","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#ParseCode","title":"InferedTypeTag.ParseCode","content":"InferedTypeTag.ParseCode \nParseCode \n Parses code returned by \u0027Code\u0027 member (to be used in provided code)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Null","title":"InferedTypeTag.Null","content":"InferedTypeTag.Null \nNull \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Number","title":"InferedTypeTag.Number","content":"InferedTypeTag.Number \nNumber \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Boolean","title":"InferedTypeTag.Boolean","content":"InferedTypeTag.Boolean \nBoolean \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#String","title":"InferedTypeTag.String","content":"InferedTypeTag.String \nString \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Json","title":"InferedTypeTag.Json","content":"InferedTypeTag.Json \nJson \n Allow for support of embedded json in e.g. xml documents","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#DateTime","title":"InferedTypeTag.DateTime","content":"InferedTypeTag.DateTime \nDateTime \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#TimeSpan","title":"InferedTypeTag.TimeSpan","content":"InferedTypeTag.TimeSpan \nTimeSpan \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#DateTimeOffset","title":"InferedTypeTag.DateTimeOffset","content":"InferedTypeTag.DateTimeOffset \nDateTimeOffset \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Guid","title":"InferedTypeTag.Guid","content":"InferedTypeTag.Guid \nGuid \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Collection","title":"InferedTypeTag.Collection","content":"InferedTypeTag.Collection \nCollection \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Heterogeneous","title":"InferedTypeTag.Heterogeneous","content":"InferedTypeTag.Heterogeneous \nHeterogeneous \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-inferedtypetag.html#Record","title":"InferedTypeTag.Record","content":"InferedTypeTag.Record \nRecord \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html","title":"TypeWrapper","content":"TypeWrapper \n Represents a transformation of a type \nTypeWrapper.FromOption \nFromOption \nTypeWrapper.None \nNone \nTypeWrapper.Option \nOption \nTypeWrapper.Nullable \nNullable","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#FromOption","title":"TypeWrapper.FromOption","content":"TypeWrapper.FromOption \nFromOption \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#None","title":"TypeWrapper.None","content":"TypeWrapper.None \nNone \n No transformation will be made to the type","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#Option","title":"TypeWrapper.Option","content":"TypeWrapper.Option \nOption \n The type T will be converter to type T option","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-structuraltypes-typewrapper.html#Nullable","title":"TypeWrapper.Nullable","content":"TypeWrapper.Nullable \nNullable \n The type T will be converter to type Nullable\u003CT\u003E","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-implementation.html","title":"Implementation","content":"Implementation \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html","title":"Country","content":"Country \n Metadata for a Country \nCountry.Region \nRegion \nCountry.CapitalCity \nCapitalCity \nCountry.Code \nCode \nCountry.Name \nName","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#Region","title":"Country.Region","content":"Country.Region \nRegion \n Get the region of the country","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#CapitalCity","title":"Country.CapitalCity","content":"Country.CapitalCity \nCapitalCity \n Get the capital city of the country","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#Code","title":"Country.Code","content":"Country.Code \nCode \n Get the WorldBank code of the country","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-country.html#Name","title":"Country.Name","content":"Country.Name \nName \n Get the name of the country","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-countrycollection-1.html","title":"CountryCollection\u003C\u0027T\u003E","content":"CountryCollection\u003C\u0027T\u003E \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountry.html","title":"ICountry","content":"ICountry \n \nICountry.GetIndicators \nGetIndicators","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountry.html#GetIndicators","title":"ICountry.GetIndicators","content":"ICountry.GetIndicators \nGetIndicators \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountrycollection.html","title":"ICountryCollection","content":"ICountryCollection \n \nICountryCollection.GetCountry \nGetCountry","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-icountrycollection.html#GetCountry","title":"ICountryCollection.GetCountry","content":"ICountryCollection.GetCountry \nGetCountry \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicators.html","title":"IIndicators","content":"IIndicators \n \nIIndicators.AsyncGetIndicator \nAsyncGetIndicator \nIIndicators.GetIndicator \nGetIndicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicators.html#AsyncGetIndicator","title":"IIndicators.AsyncGetIndicator","content":"IIndicators.AsyncGetIndicator \nAsyncGetIndicator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicators.html#GetIndicator","title":"IIndicators.GetIndicator","content":"IIndicators.GetIndicator \nGetIndicator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicatorsdescriptions.html","title":"IIndicatorsDescriptions","content":"IIndicatorsDescriptions \n \nIIndicatorsDescriptions.GetIndicator \nGetIndicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iindicatorsdescriptions.html#GetIndicator","title":"IIndicatorsDescriptions.GetIndicator","content":"IIndicatorsDescriptions.GetIndicator \nGetIndicator \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregion.html","title":"IRegion","content":"IRegion \n \nIRegion.GetCountries \nGetCountries \nIRegion.GetIndicators \nGetIndicators","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregion.html#GetCountries","title":"IRegion.GetCountries","content":"IRegion.GetCountries \nGetCountries \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregion.html#GetIndicators","title":"IRegion.GetIndicators","content":"IRegion.GetIndicators \nGetIndicators \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregioncollection.html","title":"IRegionCollection","content":"IRegionCollection \n \nIRegionCollection.GetRegion \nGetRegion","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iregioncollection.html#GetRegion","title":"IRegionCollection.GetRegion","content":"IRegionCollection.GetRegion \nGetRegion \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopic.html","title":"ITopic","content":"ITopic \n \nITopic.GetIndicators \nGetIndicators","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopic.html#GetIndicators","title":"ITopic.GetIndicators","content":"ITopic.GetIndicators \nGetIndicators \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopiccollection.html","title":"ITopicCollection","content":"ITopicCollection \n \nITopicCollection.GetTopic \nGetTopic","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-itopiccollection.html#GetTopic","title":"ITopicCollection.GetTopic","content":"ITopicCollection.GetTopic \nGetTopic \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html","title":"IWorldBankData","content":"IWorldBankData \n \nIWorldBankData.GetCountries \nGetCountries \nIWorldBankData.GetRegions \nGetRegions \nIWorldBankData.GetTopics \nGetTopics","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html#GetCountries","title":"IWorldBankData.GetCountries","content":"IWorldBankData.GetCountries \nGetCountries \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html#GetRegions","title":"IWorldBankData.GetRegions","content":"IWorldBankData.GetRegions \nGetRegions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-iworldbankdata.html#GetTopics","title":"IWorldBankData.GetTopics","content":"IWorldBankData.GetTopics \nGetTopics \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html","title":"Indicator","content":"Indicator \nIndicator data \nIndicator.TryGetValueAt \nTryGetValueAt \nIndicator.Source \nSource \nIndicator.Description \nDescription \nIndicator.Code \nCode \nIndicator.Years \nYears \nIndicator.Item \nItem \nIndicator.IndicatorCode \nIndicatorCode \nIndicator.Name \nName \nIndicator.Values \nValues","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#TryGetValueAt","title":"Indicator.TryGetValueAt","content":"Indicator.TryGetValueAt \nTryGetValueAt \n Get the indicator value for the given year, if present","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Source","title":"Indicator.Source","content":"Indicator.Source \nSource \n Get the source of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Description","title":"Indicator.Description","content":"Indicator.Description \nDescription \n Get the description of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Code","title":"Indicator.Code","content":"Indicator.Code \nCode \n Get the code for the country or region of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Years","title":"Indicator.Years","content":"Indicator.Years \nYears \n Get the years for which the indicator has values","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Item","title":"Indicator.Item","content":"Indicator.Item \nItem \n Get the indicator value for the given year. If there\u0027s no data for that year, NaN is returned","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#IndicatorCode","title":"Indicator.IndicatorCode","content":"Indicator.IndicatorCode \nIndicatorCode \n Get the code for the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Name","title":"Indicator.Name","content":"Indicator.Name \nName \n Get the name of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicator.html#Values","title":"Indicator.Values","content":"Indicator.Values \nValues \n Get the values for the indicator (without years)","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html","title":"IndicatorDescription","content":"IndicatorDescription \n Metadata for an Indicator \nIndicatorDescription.Source \nSource \nIndicatorDescription.Description \nDescription \nIndicatorDescription.Code \nCode \nIndicatorDescription.IndicatorCode \nIndicatorCode \nIndicatorDescription.Name \nName","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Source","title":"IndicatorDescription.Source","content":"IndicatorDescription.Source \nSource \n Get the source of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Description","title":"IndicatorDescription.Description","content":"IndicatorDescription.Description \nDescription \n Get the description of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Code","title":"IndicatorDescription.Code","content":"IndicatorDescription.Code \nCode \n Get the code for the topic of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#IndicatorCode","title":"IndicatorDescription.IndicatorCode","content":"IndicatorDescription.IndicatorCode \nIndicatorCode \n Get the code for the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatordescription.html#Name","title":"IndicatorDescription.Name","content":"IndicatorDescription.Name \nName \n Get the name of the indicator","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicators.html","title":"Indicators","content":"Indicators \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-indicatorsdescriptions.html","title":"IndicatorsDescriptions","content":"IndicatorsDescriptions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-region.html","title":"Region","content":"Region \n Metadata for a Region \nRegion.RegionCode \nRegionCode \nRegion.Name \nName","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-region.html#RegionCode","title":"Region.RegionCode","content":"Region.RegionCode \nRegionCode \n Get the WorldBank code for the region","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-region.html#Name","title":"Region.Name","content":"Region.Name \nName \n Get the name of the region","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-regioncollection-1.html","title":"RegionCollection\u003C\u0027T\u003E","content":"RegionCollection\u003C\u0027T\u003E \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html","title":"Topic","content":"Topic \n Metadata for a Topic \nTopic.Description \nDescription \nTopic.Code \nCode \nTopic.Name \nName","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html#Description","title":"Topic.Description","content":"Topic.Description \nDescription \n Get the description of the topic","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html#Code","title":"Topic.Code","content":"Topic.Code \nCode \n Get the WorldBank code of the topic","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topic.html#Name","title":"Topic.Name","content":"Topic.Name \nName \n Get the name of the topic","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-topiccollection-1.html","title":"TopicCollection\u003C\u0027T\u003E","content":"TopicCollection\u003C\u0027T\u003E \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-worldbankdata.html","title":"WorldBankData","content":"WorldBankData \n \nWorldBankData.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/fsharp-data-runtime-worldbank-worldbankdata.html#\u0060\u0060.ctor\u0060\u0060","title":"WorldBankData.\u0060\u0060.ctor\u0060\u0060","content":"WorldBankData.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-jsoninference.html","title":"JsonInference","content":"JsonInference \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel.html","title":"XsdModel","content":"XsdModel \n Simplified model to represent schemas (XSD). \nXsdModel.IsOptional \nIsOptional \nXsdModel.Occurs \nOccurs \nXsdModel.XsdComplexType \nXsdComplexType \nXsdModel.XsdContent \nXsdContent \nXsdModel.XsdElement \nXsdElement \nXsdModel.XsdParticle \nXsdParticle \nXsdModel.XsdType \nXsdType","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-isoptional.html","title":"IsOptional","content":"IsOptional \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-occurs.html","title":"Occurs","content":"Occurs \n \nOccurs.Item1 \nItem1 \nOccurs.Item2 \nItem2","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-occurs.html#Item1","title":"Occurs.Item1","content":"Occurs.Item1 \nItem1 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-occurs.html#Item2","title":"Occurs.Item2","content":"Occurs.Item2 \nItem2 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdcomplextype.html","title":"XsdComplexType","content":"XsdComplexType \n \nXsdComplexType.Attributes \nAttributes \nXsdComplexType.Contents \nContents","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdcomplextype.html#Attributes","title":"XsdComplexType.Attributes","content":"XsdComplexType.Attributes \nAttributes \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdcomplextype.html#Contents","title":"XsdComplexType.Contents","content":"XsdComplexType.Contents \nContents \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdcontent.html","title":"XsdContent","content":"XsdContent \n \nXsdContent.SimpleContent \nSimpleContent \nXsdContent.ComplexContent \nComplexContent","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdcontent.html#SimpleContent","title":"XsdContent.SimpleContent","content":"XsdContent.SimpleContent \nSimpleContent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdcontent.html#ComplexContent","title":"XsdContent.ComplexContent","content":"XsdContent.ComplexContent \nComplexContent \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdelement.html","title":"XsdElement","content":"XsdElement \n \nXsdElement.Name \nName \nXsdElement.Type \nType \nXsdElement.SubstitutionGroup \nSubstitutionGroup \nXsdElement.IsAbstract \nIsAbstract \nXsdElement.IsNillable \nIsNillable","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdelement.html#Name","title":"XsdElement.Name","content":"XsdElement.Name \nName \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdelement.html#Type","title":"XsdElement.Type","content":"XsdElement.Type \nType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdelement.html#SubstitutionGroup","title":"XsdElement.SubstitutionGroup","content":"XsdElement.SubstitutionGroup \nSubstitutionGroup \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdelement.html#IsAbstract","title":"XsdElement.IsAbstract","content":"XsdElement.IsAbstract \nIsAbstract \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdelement.html#IsNillable","title":"XsdElement.IsNillable","content":"XsdElement.IsNillable \nIsNillable \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html","title":"XsdParticle","content":"XsdParticle \n \nXsdParticle.Empty \nEmpty \nXsdParticle.Any \nAny \nXsdParticle.Element \nElement \nXsdParticle.All \nAll \nXsdParticle.Choice \nChoice \nXsdParticle.Sequence \nSequence","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html#Empty","title":"XsdParticle.Empty","content":"XsdParticle.Empty \nEmpty \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html#Any","title":"XsdParticle.Any","content":"XsdParticle.Any \nAny \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html#Element","title":"XsdParticle.Element","content":"XsdParticle.Element \nElement \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html#All","title":"XsdParticle.All","content":"XsdParticle.All \nAll \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html#Choice","title":"XsdParticle.Choice","content":"XsdParticle.Choice \nChoice \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdparticle.html#Sequence","title":"XsdParticle.Sequence","content":"XsdParticle.Sequence \nSequence \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdtype.html","title":"XsdType","content":"XsdType \n \nXsdType.SimpleType \nSimpleType \nXsdType.ComplexType \nComplexType","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdtype.html#SimpleType","title":"XsdType.SimpleType","content":"XsdType.SimpleType \nSimpleType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdmodel-xsdtype.html#ComplexType","title":"XsdType.ComplexType","content":"XsdType.ComplexType \nComplexType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html","title":"XsdParsing","content":"XsdParsing \n A simplified schema model is built from xsd.\n The actual parsing is done using BCL classes. \nXsdParsing.ParsingContext \nParsingContext \nXsdParsing.ofType \nofType \nXsdParsing.getTypeCode \ngetTypeCode \nXsdParsing.parseElement \nparseElement \nXsdParsing.parseComplexType \nparseComplexType \nXsdParsing.parseParticle \nparseParticle \nXsdParsing.getElements \ngetElements","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html#ofType","title":"XsdParsing.ofType","content":"XsdParsing.ofType \nofType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html#getTypeCode","title":"XsdParsing.getTypeCode","content":"XsdParsing.getTypeCode \ngetTypeCode \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html#parseElement","title":"XsdParsing.parseElement","content":"XsdParsing.parseElement \nparseElement \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html#parseComplexType","title":"XsdParsing.parseComplexType","content":"XsdParsing.parseComplexType \nparseComplexType \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html#parseParticle","title":"XsdParsing.parseParticle","content":"XsdParsing.parseParticle \nparseParticle \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing.html#getElements","title":"XsdParsing.getElements","content":"XsdParsing.getElements \ngetElements \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing-parsingcontext.html","title":"ParsingContext","content":"ParsingContext \n \nParsingContext.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \nParsingContext.GetElement \nGetElement \nParsingContext.GetSubstitutions \nGetSubstitutions \nParsingContext.Elements \nElements","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing-parsingcontext.html#\u0060\u0060.ctor\u0060\u0060","title":"ParsingContext.\u0060\u0060.ctor\u0060\u0060","content":"ParsingContext.\u0060\u0060.ctor\u0060\u0060 \n\u0060\u0060.ctor\u0060\u0060 \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing-parsingcontext.html#GetElement","title":"ParsingContext.GetElement","content":"ParsingContext.GetElement \nGetElement \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing-parsingcontext.html#GetSubstitutions","title":"ParsingContext.GetSubstitutions","content":"ParsingContext.GetSubstitutions \nGetSubstitutions \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/reference/providerimplementation-xsdparsing-parsingcontext.html#Elements","title":"ParsingContext.Elements","content":"ParsingContext.Elements \nElements \n","headings":[],"type":"apiDocs"},{"uri":"https://fsprojects.github.io/FSharp.Data/index.html","title":"FSharp.Data: Data Access Made Simple\r\n","content":"FSharp.Data: Data Access Made Simple\r\nThe FSharp.Data package implements core functionality to\r\naccess common data formats in your F# applications and scripts. It contains F# type\r\nproviders for working with structured file formats (CSV, HTML, JSON and XML) and helpers for parsing\r\nCSV, HTML and JSON files and for sending HTTP requests.\r\nThis library focuses on providing simple access to the structured documents\r\nand other data sources.\r\nFSharp.Data stems from Types from data Making structured data first-class citizens in F# by Petricek, Syme and Guerra. This paper\r\nreceived a Distinguished Paper award at PLDI 2016 and was selected as one of three CACM Research\r\nHighlight in 2018. \uD83C\uDFC6\uD83C\uDFC6\uD83C\uDFC6\r\nThe package is available on NuGet. \r\nType Providers\r\n\r\n    \r\n        \r\n        \r\n            \r\n        \r\n        \r\n    \r\n\r\nThe FSharp.Data type providers for CSV, HTML, JSON and XML infer types from the structure of a sample\r\ndocument (or a document containing multiple samples). The structure is then used\r\nto provide easy to use type-safe access to documents that follow the same structure.\r\n\r\nCSV Type Provider - discusses the CsvProvider\u0026lt;..\u0026gt; type\r\nHTML Type Provider - discusses the HtmlProvider\u0026lt;...\u0026gt; type\r\nJSON Type Provider - discusses the JsonProvider\u0026lt;..\u0026gt; type\r\nXML Type Provider - discusses the XmlProvider\u0026lt;..\u0026gt; type\r\n\r\nThe package also contains a type provider for accessing data from\r\nthe WorldBank.\r\nData Access Tools\r\nThe package contains functionality to simplify data access. In particular, it includes tools for HTTP web requests and\r\nCSV, HTML, and JSON parsers with simple dynamic API. For more information, see the\r\nfollowing topics:\r\n\r\n\r\nHTTP Utilities - discusses the Http type that can be used\r\nto send HTTP web requests.\r\n\r\n\r\nCSV Parser - introduces the CSV parser \r\n(without using the type provider)\r\n\r\n\r\nHTML Parser - introduces the HTML parser \r\n(without using the type provider)\r\n\r\n\r\nJSON Parser - introduces the JSON parser \r\n(without using the type provider)\r\n\r\n\r\nTutorials\r\nThe following tutorials contain additional examples that\r\nuse multiple features together:\r\n\r\n\r\nConverting between JSON and XML - implements two serialization \r\nfunctions that convert between the standard .NET XElement and the JsonValue from FSharp.Data.\r\nThe tutorial demonstrates pattern matching on JsonValue.\r\n\r\n\r\nAnonymizing JSON - implements a function to anonymize a JsonValue from FSharp.Data.\r\nThe tutorial demonstrates pattern matching on JsonValue.\r\n\r\n\r\nBelow is a brief practical demonstration of using FSharp.Data:\r\n\r\nReference Documentation\r\nThere\u0027s also reference documentation available. Please note that everything under\r\nthe FSharp.Data.Runtime namespace is not considered as part of the public API and can change without notice.\r\nContributing and license\r\nThe library is available under Apache 2.0. For more information see the\r\nLicense file in the GitHub repository. In summary, this means that you can\r\nuse the library for commercial purposes, fork it, and modify it as you wish. FSharp.Data is made possible by the volunteer work of more than a dozen\r\ncontributors and we\u0027re open to\r\ncontributions from anyone. If you want to help out but don\u0027t know where to start, you\r\ncan take one of the Up-For-Grabs\r\nissues, or help to improve the documentation.\r\nThe project is hosted on GitHub where you can report issues, fork\r\nthe project and submit pull requests. If you\u0027re adding new public API\u0027s, please also\r\ncontribute samples to the docs.\r\n","headings":["FSharp.Data: Data Access Made Simple","Type Providers","Data Access Tools","Tutorials","Reference Documentation","Contributing and license"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/CsvFile.html","title":"CSV Parser\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nCSV Parser\r\nThe F# CSV Type Provider is built on top of an efficient CSV parser written\r\nin F#. There\u0027s also a simple API that can be used to access values dynamically.\r\nWhen working with well-defined CSV documents, it is easier to use the\r\ntype provider, but in a more dynamic scenario or when writing\r\nquick and simple scripts, the parser might be a simpler option.\r\nLoading CSV documents\r\nTo load a sample CSV document, we first need to reference the FSharp.Data package.\r\nopen FSharp.Data\r\n\r\nThe FSharp.Data namespace contains the CsvFile type that provides two static methods\r\nfor loading data. The CsvFile.Parse method can be used if we have the data in a string value.\r\nThe CsvFile.Load method allows reading the data from a file or from a web resource (and there\u0027s\r\nalso an asynchronous CsvFile.AsyncLoad version). The following sample calls CsvFile.Load with a URL that\r\npoints to a live CSV file on the Yahoo finance web site:\r\n// Download the stock prices\r\nlet msft = CsvFile.Load(__SOURCE_DIRECTORY__ \u002B \u0026quot;/../data/MSFT.csv\u0026quot;).Cache()\r\n\r\n// Print the prices in the HLOC format\r\nfor row in msft.Rows |\u0026gt; Seq.truncate 10 do\r\n    printfn \u0026quot;HLOC: (%s, %s, %s)\u0026quot; (row.GetColumn \u0026quot;High\u0026quot;) (row.GetColumn \u0026quot;Low\u0026quot;) (row.GetColumn \u0026quot;Date\u0026quot;)\r\n\r\nHLOC: (76.55, 75.86, 9-Oct-17)\r\nHLOC: (76.03, 75.54, 6-Oct-17)\r\nHLOC: (76.12, 74.96, 5-Oct-17)\r\nHLOC: (74.72, 73.71, 4-Oct-17)\r\nHLOC: (74.88, 74.20, 3-Oct-17)\r\nHLOC: (75.01, 74.30, 2-Oct-17)\r\nHLOC: (74.54, 73.88, 29-Sep-17)\r\nHLOC: (73.97, 73.31, 28-Sep-17)\r\nHLOC: (74.17, 73.17, 27-Sep-17)\r\nHLOC: (73.81, 72.99, 26-Sep-17)\r\nval msft: Runtime.CsvFile\u0026lt;CsvRow\u0026gt;\r\nval it: unit = ()\r\nNote that unlike CsvProvider, CsvFile works in streaming mode for performance reasons, which means\r\nthat CsvFile.Rows can only be iterated once. If you need to iterate multiple times, use the CsvFile.Cache method,\r\nbut please note that this will increase memory usage and should not be used in large datasets.\r\nUsing CSV extensions\r\nNow, we look at a number of extensions that become available after\r\nopening the CsvExtensions namespace. Once opened, we can write:\r\n\r\n\r\nrow?column uses the dynamic operator to obtain the column value named column;\r\nalternatively, you can also use an indexer row.[column].\r\n\r\nvalue.AsBoolean() returns the value as boolean if it is either true or false (see StringExtensions.AsBoolean)\r\n\r\nvalue.AsInteger() returns the value as integer if it is numeric and can be\r\nconverted to an integer; value.AsInteger64(), value.AsDecimal() and\r\nvalue.AsFloat() behave similarly.\r\n\r\n\r\nvalue.AsDateTime() returns the value as a DateTime value using either the\r\nISO 8601 format, or using the\r\n\\/Date(...)\\/ JSON format containing number of milliseconds since 1/1/1970.\r\n\r\n\r\nvalue.AsDateTimeOffset() parses the string as a DateTimeOffset value using either the\r\nISO 8601 format, or using the\r\n\\/Date(...[\u002B/-]offset)\\/ JSON format containing number of milliseconds since 1/1/1970,\r\n[\u002B/-] the 4 digit offset. Example- \\/Date(1231456\u002B1000)\\/.\r\n\r\nvalue.AsTimeSpan() parses the string as a TimeSpan value.\r\nvalue.AsGuid() returns the value as a Guid value.\r\n\r\nMethods that may need to parse a numeric value or date (such as AsFloat and\r\nAsDateTime) receive an optional culture parameter.\r\nThe following example shows how to process the sample previous CSV sample using these extensions:\r\nopen FSharp.Data.CsvExtensions\r\n\r\nfor row in msft.Rows |\u0026gt; Seq.truncate 10 do\r\n    printfn \u0026quot;HLOC: (%f, %M, %O)\u0026quot; (row.[\u0026quot;High\u0026quot;].AsFloat()) (row?Low.AsDecimal()) (row?Date.AsDateTime())\r\n\r\nHLOC: (76.550000, 75.86, 10/9/2017 12:00:00 AM)\r\nHLOC: (76.030000, 75.54, 10/6/2017 12:00:00 AM)\r\nHLOC: (76.120000, 74.96, 10/5/2017 12:00:00 AM)\r\nHLOC: (74.720000, 73.71, 10/4/2017 12:00:00 AM)\r\nHLOC: (74.880000, 74.20, 10/3/2017 12:00:00 AM)\r\nHLOC: (75.010000, 74.30, 10/2/2017 12:00:00 AM)\r\nHLOC: (74.540000, 73.88, 9/29/2017 12:00:00 AM)\r\nHLOC: (73.970000, 73.31, 9/28/2017 12:00:00 AM)\r\nHLOC: (74.170000, 73.17, 9/27/2017 12:00:00 AM)\r\nHLOC: (73.810000, 72.99, 9/26/2017 12:00:00 AM)\r\nval it: unit = ()\r\nTransforming CSV files\r\nIn addition to reading, CsvFile also has support for transforming CSV files. The operations\r\navailable are CsvFile.Filter, Take, TakeWhile, Skip, SkipWhile, and Truncate. After transforming\r\nyou can save the results by using one of the overloads of the Save method. You can choose different\r\nseparator and quote characters when saving.\r\n// Saving the first 10 stock prices where the closing price is higher than the opening price in TSV format:\r\nmsft.Filter(fun row -\u0026gt; row?Close.AsFloat() \u0026gt; row?Open.AsFloat()).Truncate(10).SaveToString(\u0026#39;\\t\u0026#39;)\r\n\r\nval it: string =\r\n  \u0022Date\tOpen\tHigh\tLow\tClose\tVolume\r\n9-Oct-17\t75.97\t76.55\t75.86\t76.29\t11386502\r\n6-Oct-17\t75.67\t76.03\t75.54\t76.00\t13959814\r\n5-Oct-17\t75.22\t76.12\t74.96\t75.97\t21195261\r\n4-Oct-17\t74.09\t74.72\t73.71\t74.69\t13317681\r\n29-Sep-17\t73.94\t74.54\t73.88\t74.49\t17079114\r\n28-Sep-17\t73.54\t73.97\t73.31\t73.87\t10883787\r\n27-Sep-17\t73.55\t74.17\t73.17\t73.85\t19375099\r\n22-Sep-17\t73.99\t74.51\t73.85\t74.41\t14111365\r\n19-Sep-17\t75.21\t75.71\t75.01\t75.44\t16093344\r\n15-Sep-17\t74.83\t75.39\t74.07\t75.31\t38578441\r\n\u0022\r\nRelated articles\r\n\r\n\r\nCSV Type Provider - discusses F# type provider\r\nthat provides type-safe access to CSV data\r\n\r\nAPI Reference: CsvFile\r\nAPI Reference: CsvRow\r\nAPI Reference: CsvExtensions\r\n\r\n","headings":["CSV Parser","Loading CSV documents","Using CSV extensions","Transforming CSV files","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/CsvProvider.html","title":"CSV Type Provider\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nCSV Type Provider\r\nThis article demonstrates how to use the CSV type provider to read CSV files\r\nin a statically typed way.\r\nThe CSV type provider takes a sample CSV as input and generates a type based on the data\r\npresent on the columns of that sample. The column names are obtained from the first\r\n(header) row, and the types are inferred from the values present on the subsequent rows.\r\nIntroducing the provider\r\n\r\n    \r\n        \r\n        \r\n            \r\n        \r\n        \r\n    \r\n\r\nThe type provider is located in the FSharp.Data.dll assembly. Assuming the package is referenced\r\nwe can access its namespace as follows:\r\nopen FSharp.Data\r\n\r\nParsing stock prices\r\nThe Yahoo Finance web site provides daily stock prices in a CSV format that has the\r\nfollowing structure (you can find a larger example in the data/MSFT.csv file):\r\nDate,Open,High,Low,Close,Volume,Adj Close\r\n2012-01-27,29.45,29.53,29.17,29.23,44187700,29.23\r\n2012-01-26,29.61,29.70,29.40,29.50,49102800,29.50\r\n2012-01-25,29.07,29.65,29.07,29.56,59231700,29.56\r\n2012-01-24,29.47,29.57,29.18,29.34,51703300,29.34\r\n\r\nAs usual with CSV files, the first row contains the headers (names of individual columns)\r\nand the next rows define the data. We can pass reference to the file to CsvProvider to\r\nget a strongly typed view of the file:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet ResolutionFolder = __SOURCE_DIRECTORY__\r\n\r\ntype Stocks = CsvProvider\u0026lt;\u0026quot;../data/MSFT.csv\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nThe generated type provides two static methods for loading data. The Parse method can be\r\nused if we have the data in a string value. The Load method allows reading the data from\r\na file or from a web resource (and there\u0027s also an asynchronous AsyncLoad version). We could also\r\nhave used a web URL instead of a local file in the sample parameter of the type provider.\r\nThe following sample calls the Load method with an URL that points to a live CSV file on the Yahoo finance web site:\r\n// Download the stock prices\r\nlet msft = Stocks.Load(__SOURCE_DIRECTORY__ \u002B \u0026quot;/../data/MSFT.csv\u0026quot;).Cache()\r\n\r\n// Look at the most recent row. Note the \u0026#39;Date\u0026#39; property\r\n// is of type \u0026#39;DateTime\u0026#39; and \u0026#39;Open\u0026#39; has a type \u0026#39;decimal\u0026#39;\r\nlet firstRow = msft.Rows |\u0026gt; Seq.head\r\nlet lastDate = firstRow.Date\r\nlet lastOpen = firstRow.Open\r\n\r\n// Print the first 10 prices in the HLOC format\r\nfor row in msft.Rows |\u0026gt; Seq.truncate 10 do\r\n    printfn \u0026quot;HLOC: (%A, %A, %A, %A)\u0026quot; row.High row.Low row.Open row.Close\r\n\r\nHLOC: (76.55M, 75.86M, 75.97M, 76.29M)\r\nHLOC: (76.03M, 75.54M, 75.67M, 76.00M)\r\nHLOC: (76.12M, 74.96M, 75.22M, 75.97M)\r\nHLOC: (74.72M, 73.71M, 74.09M, 74.69M)\r\nHLOC: (74.88M, 74.20M, 74.67M, 74.26M)\r\nHLOC: (75.01M, 74.30M, 74.71M, 74.61M)\r\nHLOC: (74.54M, 73.88M, 73.94M, 74.49M)\r\nHLOC: (73.97M, 73.31M, 73.54M, 73.87M)\r\nHLOC: (74.17M, 73.17M, 73.55M, 73.85M)\r\nHLOC: (73.81M, 72.99M, 73.67M, 73.26M)\r\nval msft: Runtime.CsvFile\u0026lt;CsvProvider\u0026lt;...\u0026gt;.Row\u0026gt;\r\nval firstRow: CsvProvider\u0026lt;...\u0026gt;.Row =\r\n  (10/9/2017 12:00:00 AM, 75.97M, 76.55M, 75.86M, 76.29M, 11386502)\r\nval lastDate: System.DateTime = 10/9/2017 12:00:00 AM\r\nval lastOpen: decimal = 75.97M\r\nval it: unit = ()\r\nThe generated type has a property Rows that returns the data from the CSV file as a\r\ncollection of rows. We iterate over the rows using a for loop. As you can see the\r\n(generated) type for rows has properties such as High, Low and Close that correspond\r\nto the columns in the CSV file.\r\nAs you can see, the type provider also infers types of individual rows. The Date\r\nproperty is inferred to be a DateTime (because the values in the sample file can all\r\nbe parsed as dates) while HLOC prices are inferred as decimal.\r\nUsing units of measure\r\nThe CSV type provider supports F# units of measure: if the header includes the name or symbol of one of the standard SI units, then the generated type\r\nreturns values annotated with the appropriate unit.\r\nIn this section, we use a simple file data/SmallTest.csv which\r\nlooks as follows:\r\nName,  Distance (metre), Time (s)\r\nFirst, 50.0,             3.7\r\n\r\nAs you can see, the second and third columns are annotated with metre and s,\r\nrespectively. To use units of measure in our code, we need to open the namespace with\r\nstandard unit names. Then, we pass the SmallTest.csv file to the type provider as\r\na static argument. Also, note that in this case, we\u0027re using the same data at runtime,\r\nso we use the GetSample method instead of calling Load and passing the same parameter again.\r\nlet small =\r\n    CsvProvider\u0026lt;\u0026quot;../data/SmallTest.csv\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;.GetSample()\r\n\r\nval small: CsvProvider\u0026lt;...\u0026gt;\r\nWe can also use the default constructor instead of the GetSample static method:\r\nlet small2 =\r\n    new CsvProvider\u0026lt;\u0026quot;../data/SmallTest.csv\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;()\r\n\r\nval small2: CsvProvider\u0026lt;...\u0026gt;\r\nbut the VisualStudio IntelliSense for the type provider parameters doesn\u0027t work when we use a default\r\nconstructor for a type provider, so we\u0027ll keep using GetSample instead.\r\nAs in the previous example, the small value exposes the rows using the Rows property.\r\nThe generated properties Distance and Time are now annotated with units. Look at the\r\nfollowing simple calculation:\r\nopen FSharp.Data.UnitSystems.SI.UnitNames\r\n\r\nfor row in small.Rows do\r\n    let speed = row.Distance / row.Time\r\n\r\n    if speed \u0026gt; 15.0M\u0026lt;metre / second\u0026gt; then\r\n        printfn \u0026quot;%s (%A m/s)\u0026quot; row.Name speed\r\n\r\nSecond (19.230769230769230769230769231M m/s)\r\nThird (23.4375M m/s)\r\nval it: unit = ()\r\nThe numerical values of Distance and Time are both inferred as decimal (because they\r\nare small enough). Thus the type of speed becomes decimal\u0026lt;metre/second\u0026gt;. The compiler\r\ncan then statically check that we\u0027re not comparing incompatible values - e.g. number in\r\nmeters per second against a value in kilometres per hour.\r\nCustom separators and tab-separated files\r\nBy default, the CSV type provider uses a comma (,) as a separator. However, CSV\r\nfiles sometimes use a different separator character than ,. In some European\r\ncountries, , is already used as the numeric decimal separator, so a semicolon (;) is used\r\ninstead to separate CSV columns. The CsvProvider has an optional Separators static parameter\r\nwhere you can specify what to use as a separator. This means that you can consume\r\nany textual tabular format. Here is an example using ; as a separator:\r\ntype AirQuality = CsvProvider\u0026lt;\u0026quot;../data/AirQuality.csv\u0026quot;, \u0026quot;;\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nlet airQuality = new AirQuality()\r\n\r\nfor row in airQuality.Rows |\u0026gt; Seq.truncate 10 do\r\n    if row.Month \u0026gt; 6 then\r\n        printfn \u0026quot;Temp: %i Ozone: %f \u0026quot; row.Temp row.Ozone\r\n\r\ntype AirQuality = CsvProvider\u0026lt;...\u0026gt;\r\nval airQuality: AirQuality\r\nval it: unit = ()\r\nThe air quality dataset (data/AirQuality.csv) is used in many\r\nsamples for the Statistical Computing language R. A short description of the dataset can be found\r\nin the R language manual.\r\nIf you are parsing a tab-separated file that uses \\t as the separator, you can also\r\nspecify the separator explicitly. However, if you\u0027re using an url or file that has\r\nthe .tsv extension, the type provider will use \\t by default. In the following example,\r\nwe also set IgnoreErrors static parameter to true so that lines with an incorrect number of elements\r\nare automatically skipped (the sample file (data/MortalityNY.csv) contains additional unstructured data at the end):\r\nlet mortalityNy =\r\n    CsvProvider\u0026lt;\u0026quot;../data/MortalityNY.tsv\u0026quot;, IgnoreErrors=true, ResolutionFolder=ResolutionFolder\u0026gt;.GetSample()\r\n\r\n// Find the name of a cause based on code\r\n// (Pedal cyclist injured in an accident)\r\nlet cause =\r\n    mortalityNy.Rows |\u0026gt; Seq.find (fun r -\u0026gt; r.\u0060\u0060Cause of death Code\u0060\u0060 = \u0026quot;V13.4\u0026quot;)\r\n\r\n// Print the number of injured cyclists\r\nprintfn \u0026quot;CAUSE: %s\u0026quot; cause.\u0060\u0060Cause of death\u0060\u0060\r\n\r\nfor r in mortalityNy.Rows do\r\n    if r.\u0060\u0060Cause of death Code\u0060\u0060 = \u0026quot;V13.4\u0026quot; then\r\n        printfn \u0026quot;%s (%d cases)\u0026quot; r.County r.Count\r\n\r\nCAUSE: Pedal cyclist injured in collision with car, pick-up truck or van, driver injured in traffic accident\r\nAlbany County, NY (1 cases)\r\nBronx County, NY (1 cases)\r\nBroome County, NY (1 cases)\r\nCayuga County, NY (1 cases)\r\nChemung County, NY (1 cases)\r\nDutchess County, NY (1 cases)\r\nKings County, NY (3 cases)\r\nMonroe County, NY (1 cases)\r\nNassau County, NY (8 cases)\r\nNew York County, NY (1 cases)\r\nNiagara County, NY (2 cases)\r\nOneida County, NY (2 cases)\r\nOnondaga County, NY (2 cases)\r\nOrange County, NY (2 cases)\r\nOswego County, NY (2 cases)\r\nQueens County, NY (1 cases)\r\nRensselaer County, NY (2 cases)\r\nSaratoga County, NY (2 cases)\r\nSchenectady County, NY (1 cases)\r\nSeneca County, NY (1 cases)\r\nSteuben County, NY (1 cases)\r\nSuffolk County, NY (9 cases)\r\nSullivan County, NY (1 cases)\r\nUlster County, NY (1 cases)\r\nWestchester County, NY (3 cases)\r\nval mortalityNy: CsvProvider\u0026lt;...\u0026gt;\r\nval cause: CsvProvider\u0026lt;...\u0026gt;.Row =\r\n  (\u0022\u0022, \u0022Albany County, NY\u0022, 36001,\r\n   \u0022Pedal cyclist injured in collision with car, pick-up truck or\u0022\u002B[40 chars],\r\n   \u0022V13.4\u0022, 1, 2072701, \u00220.0 (Unreliable)\u0022)\r\nval it: unit = ()\r\nFinally, note that it is also possible to specify multiple different separators\r\nfor the CsvProvider. This might be useful if a file is irregular and contains\r\nrows separated by either a semicolon or a colon. You can use:\r\nCsvProvider\u0026lt;\u0022../data/AirQuality.csv\u0022, Separators=\u0022;,\u0022, ResolutionFolder=ResolutionFolder\u0026gt;.\r\nMissing values\r\nIt is quite common in statistical datasets for some values to be missing. If\r\nyou open the data/AirQuality.csv file, you will see\r\nthat some values for the ozone observations are marked #N/A. Such values are\r\nparsed as float and will be marked with Double.NaN in F#. The values\r\nNaN, NA, N/A, #N/A, :, -, TBA, and TBD\r\nare recognized as missing values by default, but you can customize it by specifying\r\nthe MissingValues static parameter of CsvProvider as a comma-separated string.\r\nFor example, to ignore this and that we could do:\r\nCsvProvider\u0026lt;\u0026quot;X,Y,Z\\nthis,that,1.0\u0026quot;, MissingValues=\u0026quot;this,that\u0026quot;\u0026gt;.GetSample().Rows\r\n\r\nval it: CsvProvider\u0026lt;...\u0026gt;.Row seq = seq [(nan, nan, 1.0M {Scale = 1uy;})]\r\nThe following snippet calculates the mean of the ozone observations\r\nexcluding the Double.NaN values. We first obtain the Ozone property for\r\neach row, then remove missing values and then use the standard Seq.average function:\r\nopen System\r\n\r\nlet mean =\r\n    airQuality.Rows\r\n    |\u0026gt; Seq.toArray\r\n    |\u0026gt; Array.map (fun row -\u0026gt; row.Ozone)\r\n    |\u0026gt; Array.filter (fun elem -\u0026gt; not (Double.IsNaN elem))\r\n    |\u0026gt; Array.average\r\n\r\nval mean: float = 42.12931034\r\nIf the sample doesn\u0027t have missing values on all columns, but at runtime missing values could\r\nappear anywhere, you can set the static parameter AssumeMissingValues to true in order to force CsvProvider\r\nto assume missing values can occur in any column.\r\nControlling the column types\r\nBy default, the CSV type provider checks the first 1000 rows to infer the types, but you can customize\r\nit by specifying the InferRows static parameter of CsvProvider. If you specify 0 the entire file will be used.\r\nColumns with only 0, 1, Yes, No, True, or False will be set to bool. Columns with numerical values\r\nwill be set to either int, int64, decimal, or float, in that order of preference.\r\nIf a value is missing in any row, by default the CSV type provider will infer a nullable (for int and int64) or an optional\r\n(for bool, DateTime and Guid). When a decimal would be inferred but there are missing values, we will infer a\r\nfloat instead, and use Double.NaN to represent those missing values. The string type is already inherently nullable,\r\nso by default, we won\u0027t generate a string option. If you prefer to use optionals in all cases, you can set the static parameter\r\nPreferOptionals to true. In that case, you\u0027ll never get an empty string or a Double.NaN and will always get a None instead.\r\nIf you have other preferences, e.g. if you want a column to be a float instead of a decimal,\r\nyou can override the default behaviour by specifying the types in the header column between braces, similar to what can be done to\r\nspecify the units of measure. This will override both AssumeMissingValues and PreferOptionals. The valid types are:\r\n\r\nint\r\nint?\r\nint option\r\nint64\r\nint64?\r\nint64 option\r\nbool\r\nbool?\r\nbool option\r\nfloat\r\nfloat?\r\nfloat option\r\ndecimal\r\ndecimal?\r\ndecimal option\r\ndate\r\ndate?\r\ndate option\r\ndatetimeoffset\r\ndatetimeoffset?\r\ndatetimeoffset option\r\nguid\r\nguid?\r\nguid option\r\nstring\r\nstring option.\r\n\r\nYou can also specify both the type and a unit (e.g float\u0026lt;metre\u0026gt;). Example:\r\nName,  Distance (decimal?\u0026lt;metre\u0026gt;), Time (float)\r\nFirst, 50,                        3\r\n\r\nAdditionally, you can also specify some or all the types in the Schema static parameter of CsvProvider. Valid formats are:\r\n\r\nType\r\nType\u0026lt;Measure\u0026gt;\r\nName (Type)\r\nName (Type\u0026lt;Measure\u0026gt;)\r\n\r\nWhat\u0027s specified in the Schema static parameter will always take precedence to what\u0027s specified in the column headers.\r\nIf the first row of the file is not a header row, you can specify the HasHeaders static parameter to false in order to\r\nconsider that row as a data row. In that case, the columns will be named Column1, Column2, etc..., unless the\r\nnames are overridden using the Schema parameter. Note that you can override only the name in the Schema parameter\r\nand still have the provider infer the type for you. Example:\r\ntype OneTwoThree = CsvProvider\u0026lt;\u0026quot;1,2,3\u0026quot;, HasHeaders=false, Schema=\u0026quot;Duration (float\u0026lt;second\u0026gt;),foo,float option\u0026quot;\u0026gt;\r\n\r\nlet csv = OneTwoThree.GetSample()\r\n\r\nfor row in csv.Rows do\r\n    printfn \u0026quot;%f %d %f\u0026quot; (row.Duration / 1.0\u0026lt;second\u0026gt;) row.Foo (defaultArg row.Column3 1.0)\r\n\r\n1.000000 2 3.000000\r\ntype OneTwoThree = CsvProvider\u0026lt;...\u0026gt;\r\nval csv: CsvProvider\u0026lt;...\u0026gt;\r\nval it: unit = ()\r\nYou don\u0027t need to override all the columns, you can skip the ones to leave as default.\r\nFor example, in the titanic training dataset from Kaggle (data/Titanic.csv),\r\nif you want to rename the 3rd column (the PClass column) to Passenger Class and override the\r\n6th column (the Fare column) to be a float instead of a decimal, you can define only that, and leave\r\nthe other columns as blank in the schema (you also don\u0027t need to add all the trailing commas).\r\ntype Titanic1 =\r\n    CsvProvider\u0026lt;\u0026quot;../data/Titanic.csv\u0026quot;, Schema=\u0026quot;,,Passenger Class,,,float\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nlet titanic1 = Titanic1.GetSample()\r\n\r\nfor row in titanic1.Rows |\u0026gt; Seq.truncate 10 do\r\n    printfn \u0026quot;%s Class = %d Fare = %g\u0026quot; row.Name row.\u0060\u0060Passenger Class\u0060\u0060 row.Fare\r\n\r\nBraund, Mr. Owen Harris Class = 3 Fare = 7.25\r\nCumings, Mrs. John Bradley (Florence Briggs Thayer) Class = 1 Fare = 71.2833\r\nHeikkinen, Miss. Laina Class = 3 Fare = 7.925\r\nFutrelle, Mrs. Jacques Heath (Lily May Peel) Class = 1 Fare = 53.1\r\nAllen, Mr. William Henry Class = 3 Fare = 8.05\r\nMoran, Mr. James Class = 3 Fare = 8.4583\r\nMcCarthy, Mr. Timothy J Class = 1 Fare = 51.8625\r\nPalsson, Master. Gosta Leonard Class = 3 Fare = 21.075\r\nJohnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) Class = 3 Fare = 11.1333\r\nNasser, Mrs. Nicholas (Adele Achem) Class = 2 Fare = 30.0708\r\ntype Titanic1 = CsvProvider\u0026lt;...\u0026gt;\r\nval titanic1: CsvProvider\u0026lt;...\u0026gt;\r\nval it: unit = ()\r\nAlternatively, you can rename and override the type of any column by name instead of by position:\r\ntype Titanic2 =\r\n    CsvProvider\u0026lt;\u0026quot;../data/Titanic.csv\u0026quot;, Schema=\u0026quot;Fare=float,PClass-\u0026gt;Passenger Class\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nlet titanic2 = Titanic2.GetSample()\r\n\r\nfor row in titanic2.Rows |\u0026gt; Seq.truncate 10 do\r\n    printfn \u0026quot;%s Class = %d Fare = %g\u0026quot; row.Name row.\u0060\u0060Passenger Class\u0060\u0060 row.Fare\r\n\r\nBraund, Mr. Owen Harris Class = 3 Fare = 7.25\r\nCumings, Mrs. John Bradley (Florence Briggs Thayer) Class = 1 Fare = 71.2833\r\nHeikkinen, Miss. Laina Class = 3 Fare = 7.925\r\nFutrelle, Mrs. Jacques Heath (Lily May Peel) Class = 1 Fare = 53.1\r\nAllen, Mr. William Henry Class = 3 Fare = 8.05\r\nMoran, Mr. James Class = 3 Fare = 8.4583\r\nMcCarthy, Mr. Timothy J Class = 1 Fare = 51.8625\r\nPalsson, Master. Gosta Leonard Class = 3 Fare = 21.075\r\nJohnson, Mrs. Oscar W (Elisabeth Vilhelmina Berg) Class = 3 Fare = 11.1333\r\nNasser, Mrs. Nicholas (Adele Achem) Class = 2 Fare = 30.0708\r\ntype Titanic2 = CsvProvider\u0026lt;...\u0026gt;\r\nval titanic2: CsvProvider\u0026lt;...\u0026gt;\r\nval it: unit = ()\r\nYou can even mix and match the two syntaxes like this Schema=\u0022int64,DidSurvive,PClass-\u0026gt;Passenger Class=string\u0022\r\nTransforming CSV files\r\nIn addition to reading, CsvProvider also has support for transforming the row collection of CSV files. The operations\r\navailable are Filter, Take, TakeWhile, Skip, SkipWhile, and Truncate. All these operations\r\npreserve the schema, so after transforming, you can save the results by using one of the overloads of\r\nthe Save method. You can also use the SaveToString() to get the output directly as a string.\r\n// Saving the first 10 rows that don\u0026#39;t have missing values to a new csv file\r\nairQuality\r\n    .Filter(fun row -\u0026gt; not (Double.IsNaN row.Ozone) \u0026amp;\u0026amp; not (Double.IsNaN row.\u0060\u0060Solar.R\u0060\u0060))\r\n    .Truncate(10)\r\n    .SaveToString()\r\n\r\nval it: string =\r\n  \u0022Ozone;Solar.R;Wind;Temp;Month;Day\r\n41;190;7.4;67;5;1\r\n36;118;8;72;5;2\r\n12;149;12.6;74;5;3\r\n18;313;11.5;62;5;4\r\n23;299;8.6;65;5;7\r\n19;99;13.8;59;5;8\r\n8;19;20.1;61;5;9\r\n16;256;9.7;69;5;12\r\n11;290;9.2;66;5;13\r\n14;274;10.9;68;5;14\r\n\u0022\r\nIt\u0027s also possible to transform the columns themselves by using Map and the constructor for the Row type.\r\nlet doubleOzone =\r\n    airQuality.Map(fun row -\u0026gt; AirQuality.Row(row.Ozone * 2.0, row.\u0060\u0060Solar.R\u0060\u0060, row.Wind, row.Temp, row.Month, row.Day))\r\n\r\nval doubleOzone: Runtime.CsvFile\u0026lt;CsvProvider\u0026lt;...\u0026gt;.Row\u0026gt;\r\nYou can also append new rows, either by creating them directly as in the previous example, or by parsing them from a string.\r\nlet newRows =\r\n    AirQuality.ParseRows(\r\n        \u0026quot;\u0026quot;\u0026quot;41;190;7.4;67;5;1\r\n        36;118;8;72;5;2\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nlet airQualityWithExtraRows = airQuality.Append newRows\r\n\r\nval newRows: CsvProvider\u0026lt;...\u0026gt;.Row array =\r\n  [|(41.0, 190.0, 7.4M, 67, 5, 1); (36.0, 118.0, 8M, 72, 5, 2)|]\r\nval airQualityWithExtraRows: Runtime.CsvFile\u0026lt;CsvProvider\u0026lt;...\u0026gt;.Row\u0026gt;\r\nIt\u0027s even possible to create csv files without parsing at all:\r\ntype MyCsvType = CsvProvider\u0026lt;Schema=\u0026quot;A (int), B (string), C (date option)\u0026quot;, HasHeaders=false\u0026gt;\r\n\r\nlet myRows =\r\n    [ MyCsvType.Row(1, \u0026quot;a\u0026quot;, None); MyCsvType.Row(2, \u0026quot;B\u0026quot;, Some System.DateTime.Now) ]\r\n\r\nlet myCsv = new MyCsvType(myRows)\r\nmyCsv.SaveToString()\r\n\r\ntype MyCsvType = CsvProvider\u0026lt;...\u0026gt;\r\nval myRows: CsvProvider\u0026lt;...\u0026gt;.Row list =\r\n  [(1, \u0022a\u0022, None); (2, \u0022B\u0022, Some 9/1/2025 2:55:10 PM)]\r\nval myCsv: MyCsvType\r\nval it: string = \u00221,a,\r\n2,B,2025-09-01T14:55:10.5664838\u002B00:00\r\n\u0022\r\nHandling big datasets\r\nBy default, the rows are cached so you can iterate over the Rows property multiple times without worrying.\r\nBut if you will only iterate once, you can disable caching by setting the CacheRows static parameter of CsvProvider\r\nto false. If the number of rows is very big, you have to do this otherwise you may exhaust the memory.\r\nYou can still cache the data at some point by using the Cache method, but only do that if you have already\r\ntransformed the dataset to be smaller.\r\nRelated articles\r\n\r\nUsing JSON provider in a library also applies to CSV type provider\r\n\r\nCSV Parser - provides more information about\r\nworking with CSV documents dynamically.\r\n\r\nAPI Reference: CsvProvider type provider\r\n\r\n","headings":["CSV Type Provider","Introducing the provider","Parsing stock prices","Using units of measure","Custom separators and tab-separated files","Missing values","Controlling the column types","Transforming CSV files","Handling big datasets","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/HtmlCssSelectors.html","title":"HTML CSS selectors\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nHTML CSS selectors\r\nThis article demonstrates how to use HTML CSS selectors to browse the DOM of parsed HTML files.\r\nWe use the HtmlDocument type and associated HtmlDocument module\r\nand HtmlDocumentExtensions extensions.\r\nThe usage of CSS selectors is a very natural way to parse HTML when we come from Web developments.\r\nThe HTML CSS selectors are based on the JQuery selectors.\r\nTo use CSS selectors, reference the FSharp.Data package. You then need to open FSharp.Data namespace, which\r\nautomatically exposes extension methods that implement the CSS selectors.\r\nopen FSharp.Data\r\n\r\nPractice 1: Search for FSharp.Data on Google\r\nWe will parse links of a Google to search for FSharp.Data like in the HTML Parser article.\r\nlet googleUrl = \u0026quot;http://www.google.co.uk/search?q=FSharp.Data\u0026quot;\r\nlet doc = HtmlDocument.Load(googleUrl)\r\n\r\nval googleUrl: string = \u0022http://www.google.co.uk/search?q=FSharp.Data\u0022\r\nval doc: HtmlDocument =\r\n  \u0026lt;!DOCTYPE html\u0026gt;\r\n\u0026lt;html lang=\u0022en\u0022\u0026gt;\r\n  \u0026lt;head\u0026gt;\r\n    \u0026lt;title\u0026gt;Google Search\u0026lt;/title\u0026gt;\u0026lt;style\u0026gt;body{background-color:#fff}\u0026lt;/style\u0026gt;\u0026lt;script nonce=\u0022Kk2eSbmLnHwm7ypNP3K_CQ\u0022\u0026gt;window.google = window.google || {};window.google.c = window.google.c || {ezx:false,cap:0};\u0026lt;/script\u0026gt;\r\n  \u0026lt;/head\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n    \u0026lt;noscript\u0026gt;\r\n      \u0026lt;style\u0026gt;table,div,span,p{display:none}\u0026lt;/style\u0026gt;\u0026lt;meta content=\u00220;url=/httpservice/retry/enablejs?sei=1rO1aNisGa6lqtsP4PSBmA4\u0022 http-equiv=\u0022refresh\u0022 /\u0026gt;\r\n      \u0026lt;div style=\u0022display:block\u0022\u0026gt;\r\n        Please click \u0026lt;a...\r\nTo make sure we extract search results only, we will parse links in the \u0026lt;div\u0026gt; with id search.\r\nThen we can, for example, use the direct descendants selector to select another \u0026lt;div\u0026gt; with the\r\nid ires. The CSS selector to do so is div#search \u0026gt; div#ires:\r\nlet links =\r\n    doc.CssSelect(\u0026quot;div#search \u0026gt; div#ires div.g \u0026gt; div.s div.kv cite\u0026quot;)\r\n    |\u0026gt; List.map (fun n -\u0026gt;\r\n        match n.InnerText() with\r\n        | t when (t.StartsWith(\u0026quot;https://\u0026quot;) || t.StartsWith(\u0026quot;http://\u0026quot;)) -\u0026gt; t\r\n        | t -\u0026gt; \u0026quot;http://\u0026quot; \u002B t)\r\n\r\nval links: string list = []\r\nThe rest of the selector (written as li.g \u0026gt; div.s) skips the first 4 sub-results targeting GitHub pages,\r\nso we only extract proper links.\r\nNow, we might want the page titles associated with their URLs. To do this, we can use the List.zip function:\r\nlet searchResults =\r\n    doc.CssSelect(\u0026quot;div#search \u0026gt; div#ires div.g \u0026gt; h3\u0026quot;)\r\n    |\u0026gt; List.map (fun n -\u0026gt; n.InnerText())\r\n    |\u0026gt; List.zip (links)\r\n\r\nval searchResults: (string * string) list = []\r\nPractice 2: Search F# books on Google Books\r\nWe will parse links of the Google Books web site, searching for F#. After downloading the document,\r\nwe simply ensure to match good links with their CSS\u0027s styles and DOM\u0027s hierarchy. In case of Google Books,\r\nwe need to look for \u0026lt;div\u0026gt; with class set to g, then for \u0026lt;h3\u0026gt; with CSS class r and then for all \u0026lt;a\u0026gt; elements:\r\nlet fsys = \u0026quot;https://www.google.com/search?tbm=bks\u0026amp;q=F%23\u0026quot;\r\nlet doc2 = HtmlDocument.Load(fsys)\r\n\r\nlet books =\r\n    doc2.CssSelect(\u0026quot;div.g h3.r a\u0026quot;)\r\n    |\u0026gt; List.map (fun a -\u0026gt; a.InnerText().Trim(), a.AttributeValue(\u0026quot;href\u0026quot;))\r\n    |\u0026gt; List.filter (fun (title, href) -\u0026gt; title.Contains(\u0026quot;F#\u0026quot;))\r\n\r\nval fsys: string = \u0022https://www.google.com/search?tbm=bks\u0026amp;q=F%23\u0022\r\nval doc2: HtmlDocument =\r\n  \u0026lt;!-- html\u0026gt;--\u0026gt;\u0026lt;html lang=\u0022en\u0022\u0026gt;\r\n  \u0026lt;head\u0026gt;\r\n    \u0026lt;meta charset=\u0022UTF-8\u0022 /\u0026gt;\u0026lt;meta content=\u0022/images/branding/googleg/1x/googleg_standard_color_128dp.png\u0022 itemprop=\u0022image\u0022 /\u0026gt;\u0026lt;title\u0026gt;F# - Google Search\u0026lt;/title\u0026gt;\u0026lt;script nonce=\u0022VIVqzuIhyWsD0N22xUQPGA\u0022\u0026gt;(function(){\ndocument.documentElement.addEventListener(\u0022submit\u0022,function(b){var a;if(a=b.target){var c=a.getAttribute(\u0022data-submitfalse\u0022);a=c===\u00221\u0022||c===\u0022q\u0022\u0026amp;\u0026amp;!a.elements.q.value?!0:!1}else a=!1;a\u0026amp;\u0026amp;(b.preventDefault(),b.stopPropagation())},!0);document.documentElement.addE...\r\nval books: (string * string) list = []\r\nJQuery selectors\r\nThis section provides a quick overview of the supported CSS selectors. If you are familiar\r\nwith CSS selectors in JQuery, then you will see that most of the features are the same.\r\nYou can also refer to the table below for a complete list of supported selectors.\r\nAttribute Contains Prefix Selector\r\nFinds all links with an English hreflang attribute.\r\nlet englishDoc =\r\n    HtmlDocument.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;!doctype html\u0026gt;\r\n  \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n    \u0026lt;a href=\u0026quot;example.html\u0026quot; hreflang=\u0026quot;en\u0026quot;\u0026gt;Some text\u0026lt;/a\u0026gt;\r\n    \u0026lt;a href=\u0026quot;example.html\u0026quot; hreflang=\u0026quot;en-UK\u0026quot;\u0026gt;Some other text\u0026lt;/a\u0026gt;\r\n    \u0026lt;a href=\u0026quot;example.html\u0026quot; hreflang=\u0026quot;english\u0026quot;\u0026gt;will not be outlined\u0026lt;/a\u0026gt;\r\n  \u0026lt;/body\u0026gt;\r\n  \u0026lt;/html\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nlet englishLinks = englishDoc.CssSelect(\u0026quot;a[hreflang|=en]\u0026quot;)\r\n\r\nval englishDoc: HtmlDocument =\r\n  \u0026lt;!-- html\u0026gt;--\u0026gt;\u0026lt;html lang=\u0022en\u0022\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n    \u0026lt;a href=\u0022example.html\u0022 hreflang=\u0022en\u0022\u0026gt;Some text\u0026lt;/a\u0026gt;\u0026lt;a href=\u0022example.html\u0022 hreflang=\u0022en-UK\u0022\u0026gt;Some other text\u0026lt;/a\u0026gt;\u0026lt;a href=\u0022example.html\u0022 hreflang=\u0022english\u0022\u0026gt;will not be outlined\u0026lt;/a\u0026gt;\r\n  \u0026lt;/body\u0026gt;\r\n\u0026lt;/html\u0026gt;\r\nval englishLinks: HtmlNode list =\r\n  [\u0026lt;a href=\u0022example.html\u0022 hreflang=\u0022en\u0022\u0026gt;Some text\u0026lt;/a\u0026gt;;\r\n   \u0026lt;a href=\u0022example.html\u0022 hreflang=\u0022en-UK\u0022\u0026gt;Some other text\u0026lt;/a\u0026gt;]\r\nAttribute Contains Selector\r\nFinds all inputs with a name containing \u0022man\u0022. This includes results where \u0022man\u0022 is a substring:\r\nlet manDoc =\r\n    HtmlDocument.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;!doctype html\u0026gt;\r\n  \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n    \u0026lt;input name=\u0026quot;man-news\u0026quot;\u0026gt;\r\n    \u0026lt;input name=\u0026quot;milkman\u0026quot;\u0026gt;\r\n    \u0026lt;input name=\u0026quot;milk man\u0026quot;\u0026gt;\r\n    \u0026lt;input name=\u0026quot;letterman2\u0026quot;\u0026gt;\r\n    \u0026lt;input name=\u0026quot;newmilk\u0026quot;\u0026gt;\r\n    \u0026lt;input name=\u0026quot;man\u0026quot;\u0026gt;\r\n    \u0026lt;input name=\u0026quot;newsletter\u0026quot;\u0026gt;\r\n  \u0026lt;/body\u0026gt;\r\n  \u0026lt;/html\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nlet manElems = manDoc.CssSelect(\u0026quot;input[name*=\u0026#39;man\u0026#39;]\u0026quot;)\r\n\r\nval manDoc: HtmlDocument =\r\n  \u0026lt;!-- html\u0026gt;--\u0026gt;\u0026lt;html lang=\u0022en\u0022\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n    \u0026lt;input name=\u0022man-news\u0022 /\u0026gt;\u0026lt;input name=\u0022milkman\u0022 /\u0026gt;\u0026lt;input name=\u0022milk man\u0022 /\u0026gt;\u0026lt;input name=\u0022letterman2\u0022 /\u0026gt;\u0026lt;input name=\u0022newmilk\u0022 /\u0026gt;\u0026lt;input name=\u0022man\u0022 /\u0026gt;\u0026lt;input name=\u0022newsletter\u0022 /\u0026gt;\r\n  \u0026lt;/body\u0026gt;\r\n\u0026lt;/html\u0026gt;\r\nval manElems: HtmlNode list =\r\n  [\u0026lt;input name=\u0022man-news\u0022 /\u0026gt;; \u0026lt;input name=\u0022milkman\u0022 /\u0026gt;;\r\n   \u0026lt;input name=\u0022milk man\u0022 /\u0026gt;; \u0026lt;input name=\u0022letterman2\u0022 /\u0026gt;;\r\n   \u0026lt;input name=\u0022man\u0022 /\u0026gt;]\r\nAttribute Contains Word Selector\r\nFinds all inputs with a name containing the word \u0022man\u0022. This requires a whitespace around the word:\r\nlet manWordElems = manDoc.CssSelect(\u0026quot;input[name~=\u0026#39;man\u0026#39;]\u0026quot;)\r\n\r\nval manWordElems: HtmlNode list =\r\n  [\u0026lt;input name=\u0022milk man\u0022 /\u0026gt;; \u0026lt;input name=\u0022man\u0022 /\u0026gt;]\r\nAttribute Ends With Selector\r\nFinds all inputs with a name ending with \u0022man\u0022.\r\nlet manEndElemes = manDoc.CssSelect(\u0026quot;input[name$=\u0026#39;man\u0026#39;]\u0026quot;)\r\n\r\nval manEndElemes: HtmlNode list =\r\n  [\u0026lt;input name=\u0022milkman\u0022 /\u0026gt;; \u0026lt;input name=\u0022milk man\u0022 /\u0026gt;; \u0026lt;input name=\u0022man\u0022 /\u0026gt;]\r\nAttribute Equals Selector\r\nFinds all inputs with a name equal to \u0022man\u0022.\r\nlet manEqElemes = manDoc.CssSelect(\u0026quot;input[name=\u0026#39;man\u0026#39;]\u0026quot;)\r\n\r\nval manEqElemes: HtmlNode list = [\u0026lt;input name=\u0022man\u0022 /\u0026gt;]\r\nAttribute Not Equal Selector\r\nFinds all inputs with a name different to \u0022man\u0022.\r\nlet notManElems = manDoc.CssSelect(\u0026quot;input[name!=\u0026#39;man\u0026#39;]\u0026quot;)\r\n\r\nval notManElems: HtmlNode list =\r\n  [\u0026lt;input name=\u0022man-news\u0022 /\u0026gt;; \u0026lt;input name=\u0022milkman\u0022 /\u0026gt;;\r\n   \u0026lt;input name=\u0022milk man\u0022 /\u0026gt;; \u0026lt;input name=\u0022letterman2\u0022 /\u0026gt;;\r\n   \u0026lt;input name=\u0022newmilk\u0022 /\u0026gt;; \u0026lt;input name=\u0022newsletter\u0022 /\u0026gt;]\r\nAttribute Starts With Selector\r\nFinds all inputs with a name starting with \u0022man\u0022.\r\nlet manStartElems = manDoc.CssSelect(\u0026quot;input[name^=\u0026#39;man\u0026#39;]\u0026quot;)\r\n\r\nval manStartElems: HtmlNode list =\r\n  [\u0026lt;input name=\u0022man-news\u0022 /\u0026gt;; \u0026lt;input name=\u0022man\u0022 /\u0026gt;]\r\nForms helpers\r\nThere are some syntax shortcuts to find forms controls.\r\nlet htmlForm =\r\n    HtmlDocument.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;!doctype html\u0026gt;\r\n  \u0026lt;html\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n  \u0026lt;form\u0026gt;\r\n    \u0026lt;fieldset\u0026gt;\r\n      \u0026lt;input type=\u0026quot;button\u0026quot; value=\u0026quot;Input Button\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;check1\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;hidden\u0026quot; id=\u0026quot;hidden1\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;password\u0026quot; id=\u0026quot;pass1\u0026quot;\u0026gt;\r\n      \u0026lt;input name=\u0026quot;email\u0026quot; disabled=\u0026quot;disabled\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;radio\u0026quot; id=\u0026quot;radio1\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;checkbox\u0026quot; id=\u0026quot;check2\u0026quot; checked=\u0026quot;checked\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;file\u0026quot; id=\u0026quot;uploader1\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;reset\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;submit\u0026quot;\u0026gt;\r\n      \u0026lt;input type=\u0026quot;text\u0026quot;\u0026gt;\r\n      \u0026lt;select\u0026gt;\u0026lt;option\u0026gt;Option\u0026lt;/option\u0026gt;\u0026lt;/select\u0026gt;\r\n      \u0026lt;textarea class=\u0026quot;comment box1\u0026quot;\u0026gt;Type a comment here\u0026lt;/textarea\u0026gt;\r\n      \u0026lt;button\u0026gt;Go !\u0026lt;/button\u0026gt;\r\n    \u0026lt;/fieldset\u0026gt;\r\n  \u0026lt;/form\u0026gt;\r\n  \u0026lt;/body\u0026gt;\r\n  \u0026lt;/html\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nYou can use :prop to find CSS elements with the specified value of the type attribute\r\nor a specified form control property. This lets you easily select all buttons, checkboxes,\r\nradio buttons, but also hidden or disabled form elements:\r\n// Find all buttons.\r\nlet buttons = htmlForm.CssSelect(\u0026quot;:button\u0026quot;)\r\n\r\n// Find all checkboxes.\r\nlet checkboxes = htmlForm.CssSelect(\u0026quot;:checkbox\u0026quot;)\r\n\r\n// Find all checked checkboxs or radio.\r\nlet checkd = htmlForm.CssSelect(\u0026quot;:checked\u0026quot;)\r\n\r\n// Find all disabled controls.\r\nlet disabled = htmlForm.CssSelect(\u0026quot;:disabled\u0026quot;)\r\n\r\n// Find all inputs with type hidden.\r\nlet hidden = htmlForm.CssSelect(\u0026quot;:hidden\u0026quot;)\r\n\r\n// Find all inputs with type radio.\r\nlet radio = htmlForm.CssSelect(\u0026quot;:radio\u0026quot;)\r\n\r\n// Find all inputs with type password.\r\nlet password = htmlForm.CssSelect(\u0026quot;:password\u0026quot;)\r\n\r\n// Find all files uploaders.\r\nlet file = htmlForm.CssSelect(\u0026quot;:file\u0026quot;)\r\n\r\nval buttons: HtmlNode list =\r\n  [\u0026lt;button\u0026gt;Go !\u0026lt;/button\u0026gt;; \u0026lt;input type=\u0022button\u0022 value=\u0022Input Button\u0022 /\u0026gt;]\r\nval checkboxes: HtmlNode list =\r\n  [\u0026lt;input type=\u0022checkbox\u0022 id=\u0022check1\u0022 /\u0026gt;;\r\n   \u0026lt;input type=\u0022checkbox\u0022 id=\u0022check2\u0022 checked=\u0022checked\u0022 /\u0026gt;]\r\nval checkd: HtmlNode list =\r\n  [\u0026lt;input type=\u0022checkbox\u0022 id=\u0022check2\u0022 checked=\u0022checked\u0022 /\u0026gt;]\r\nval disabled: HtmlNode list = [\u0026lt;input name=\u0022email\u0022 disabled=\u0022disabled\u0022 /\u0026gt;]\r\nval hidden: HtmlNode list = [\u0026lt;input type=\u0022hidden\u0022 id=\u0022hidden1\u0022 /\u0026gt;]\r\nval radio: HtmlNode list = [\u0026lt;input type=\u0022radio\u0022 id=\u0022radio1\u0022 /\u0026gt;]\r\nval password: HtmlNode list = [\u0026lt;input type=\u0022password\u0022 id=\u0022pass1\u0022 /\u0026gt;]\r\nval file: HtmlNode list = [\u0026lt;input type=\u0022file\u0022 id=\u0022uploader1\u0022 /\u0026gt;]\r\nImplemented and missing features\r\nBasic CSS selectors are implemented, but some JQuery selectors are missing\r\nThis table lists all JQuery selectors and their status\r\n\r\n\r\n\r\nSelector name\r\nStatus\r\nspecification\r\n\r\n\r\n\r\n\r\n*All Selector *\r\nTODO\r\nspecification\r\n\r\n\r\n:animated Selector\r\nnot possible\r\nspecification\r\n\r\n\r\nAttribute Contains Prefix Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n*Attribute Contains Selector *\r\nimplemented\r\nspecification\r\n\r\n\r\nAttribute Contains Word Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n*Attribute Ends With Selector *\r\nimplemented\r\nspecification\r\n\r\n\r\n*Attribute Equals Selector *\r\nimplemented\r\nspecification\r\n\r\n\r\nAttribute Not Equal Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n*Attribute Starts With Selector *\r\nimplemented\r\nspecification\r\n\r\n\r\n*:button Selector *\r\nimplemented\r\nspecification\r\n\r\n\r\n:checkbox Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:checked Selector\r\nimplemented\r\nspecification\r\n\r\n\r\nChild Selector (\u201Cparent \u0026gt; child\u201D)\r\nimplemented\r\nspecification\r\n\r\n\r\nClass Selector (\u201C.class\u201D)\r\nimplemented\r\nspecification\r\n\r\n\r\n:contains() Selector\r\nTODO\r\nspecification\r\n\r\n\r\nDescendant Selector (\u201Cancestor descendant\u201D)\r\nimplemented\r\nspecification\r\n\r\n\r\n:disabled Selector\r\nimplemented\r\nspecification\r\n\r\n\r\nElement Selector (\u201Celement\u201D)\r\nimplemented\r\nspecification\r\n\r\n\r\n:empty Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:enabled Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:eq() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:even Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:file Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:first-child Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:first-of-type Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:first Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:focus Selector\r\nnot possible\r\nspecification\r\n\r\n\r\n:gt() Selector\r\nTODO\r\nspecification\r\n\r\n\r\nHas Attribute Selector [name]\r\nimplemented\r\nspecification\r\n\r\n\r\n:has() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:header Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:hidden Selector\r\nimplemented\r\nspecification\r\n\r\n\r\nID Selector (\u201C#id\u201D)\r\nimplemented\r\nspecification\r\n\r\n\r\n:image Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:input Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:lang() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:last-child Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:last-of-type Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:last Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:lt() Selector\r\nTODO\r\nspecification\r\n\r\n\r\nMultiple Attribute Selector [name=\u201Dvalue\u201D][name2=\u201Dvalue2\u2033]\r\nimplemented\r\nspecification\r\n\r\n\r\nMultiple Selector (\u201Cselector1, selector2, selectorN\u201D)\r\nTODO\r\nspecification\r\n\r\n\r\nNext Adjacent Selector (\u201Cprev \u002B next\u201D)\r\nTODO\r\nspecification\r\n\r\n\r\nNext Siblings Selector (\u201Cprev ~ siblings\u201D)\r\nTODO\r\nspecification\r\n\r\n\r\n:not() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:nth-child() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:nth-last-child() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:nth-last-of-type() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:nth-of-type() Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:odd Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:only-child Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:only-of-type Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:parent Selector\r\nTODO\r\nspecification\r\n\r\n\r\n:password Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:radio Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:reset Selector\r\nnot possible\r\nspecification\r\n\r\n\r\n:root Selector\r\nuseless[1]\r\nspecification\r\n\r\n\r\n:selected Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:submit Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:target Selector\r\nnot possible\r\nspecification\r\n\r\n\r\n:text Selector\r\nimplemented\r\nspecification\r\n\r\n\r\n:visible Selector\r\nnot possible\r\nspecification\r\n\r\n\r\n\r\n\r\n[1] :root Selector seems to be useless in our case because with the HTML parser the root is always the html node.\r\n","headings":["HTML CSS selectors","Practice 1: Search for FSharp.Data on Google","Practice 2: Search F# books on Google Books","JQuery selectors","Attribute Contains Prefix Selector","Attribute Contains Selector","Attribute Contains Word Selector","Attribute Ends With Selector","Attribute Equals Selector","Attribute Not Equal Selector","Attribute Starts With Selector","Forms helpers","Implemented and missing features"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/HtmlParser.html","title":"HTML Parser\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nHTML Parser\r\nThis article demonstrates how to use the HTML Parser to parse HTML files.\r\nThe HTML parser takes any fragment of HTML, uri or a stream and trys to parse it into a DOM.\r\nThe parser is based on the HTML Living Standard\r\nOnce a document/fragment has been parsed, a set of extension methods over the HTML DOM elements allow you to extract information from a web page\r\nindependently of the actual HTML Type provider.\r\nopen FSharp.Data\r\n\r\nThe following example uses Google to search for FSharp.Data and then parses the first set of\r\nsearch results from the page, extracting the URL and Title of the link.\r\nWe use the HtmlDocument type.\r\nTo achieve this we must first parse the webpage into our DOM. We can do this using\r\nthe HtmlDocument.Load method. This method will take a URL and make a synchronous web call\r\nto extract the data from the page. Note: an asynchronous variant HtmlDocument.AsyncLoad is also available\r\nlet results = HtmlDocument.Load(\u0026quot;http://www.google.co.uk/search?q=FSharp.Data\u0026quot;)\r\n\r\nval results: HtmlDocument =\r\n  \u0026lt;!DOCTYPE html\u0026gt;\r\n\u0026lt;html lang=\u0022en\u0022\u0026gt;\r\n  \u0026lt;head\u0026gt;\r\n    \u0026lt;title\u0026gt;Google Search\u0026lt;/title\u0026gt;\u0026lt;style\u0026gt;body{background-color:#fff}\u0026lt;/style\u0026gt;\u0026lt;script nonce=\u0022OOiQbvbFdLQCWX8LU5Nryw\u0022\u0026gt;window.google = window.google || {};window.google.c = window.google.c || {ezx:false,cap:0};\u0026lt;/script\u0026gt;\r\n  \u0026lt;/head\u0026gt;\r\n  \u0026lt;body\u0026gt;\r\n    \u0026lt;noscript\u0026gt;\r\n      \u0026lt;style\u0026gt;table,div,span,p{display:none}\u0026lt;/style\u0026gt;\u0026lt;meta content=\u00220;url=/httpservice/retry/enablejs?sei=2rO1aOL5BuSnqtsPldrmkQs\u0022 http-equiv=\u0022refresh\u0022 /\u0026gt;\r\n      \u0026lt;div style=\u0022display:block\u0022\u0026gt;\r\n        Please click \u0026lt;a...\r\nNow that we have a loaded HTML document we can begin to extract data from it.\r\nFirstly, we want to extract all of the anchor tags a out of the document, then\r\ninspect the links to see if it has a href attribute, using HtmlDocumentExtensions.Descendants. If it does, extract the value,\r\nwhich in this case is the url that the search result is pointing to, and additionally the\r\nInnerText of the anchor tag to provide the name of the web page for the search result\r\nwe are looking at.\r\nlet links =\r\n    results.Descendants [ \u0026quot;a\u0026quot; ]\r\n    |\u0026gt; Seq.choose (fun x -\u0026gt; x.TryGetAttribute(\u0026quot;href\u0026quot;) |\u0026gt; Option.map (fun a -\u0026gt; x.InnerText(), a.Value()))\r\n    |\u0026gt; Seq.truncate 10\r\n    |\u0026gt; Seq.toList\r\n\r\nval links: (string * string) list =\r\n  [(\u0022here\u0022, \u0022/httpservice/retry/enablejs?sei=2rO1aOL5BuSnqtsPldrmkQs\u0022);\r\n   (\u0022click here\u0022,\r\n    \u0022/search?q=FSharp.Data\u0026amp;sca_esv=6bae24b5c791315b\u0026amp;ie=UTF-8\u0026amp;emsg=\u0022\u002B[34 chars]);\r\n   (\u0022feedback\u0022, \u0022https://support.google.com/websearch\u0022)]\r\nNow that we have extracted our search results you will notice that there are lots of\r\nother links to various Google services and cached/similar results. Ideally, we would\r\nlike to filter these results as we are probably not interested in them.\r\nAt this point we simply have a sequence of Tuples, so F# makes this trivial using Seq.filter\r\nand Seq.map.\r\nlet searchResults =\r\n    links\r\n    |\u0026gt; List.filter (fun (name, url) -\u0026gt; name \u0026lt;\u0026gt; \u0026quot;Cached\u0026quot; \u0026amp;\u0026amp; name \u0026lt;\u0026gt; \u0026quot;Similar\u0026quot; \u0026amp;\u0026amp; url.StartsWith(\u0026quot;/url?\u0026quot;))\r\n    |\u0026gt; List.map (fun (name, url) -\u0026gt; name, url.Substring(0, url.IndexOf(\u0026quot;\u0026amp;sa=\u0026quot;)).Replace(\u0026quot;/url?q=\u0026quot;, \u0026quot;\u0026quot;))\r\n\r\nval searchResults: (string * string) list = []\r\n","headings":["HTML Parser"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/HtmlProvider.html","title":"HTML Type Provider\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nHTML Type Provider\r\nThis article demonstrates how to use the HTML type provider to read HTML tables files\r\nin a statically typed way.\r\nThe HTML Type Provider takes a sample HTML document as input and generates a type based on the data\r\npresent in the columns of that sample. The column names are obtained from the first (header) row.\r\nIntroducing the provider\r\nThe type provider is located in the FSharp.Data.dll assembly. Assuming the assembly\r\nis located in the ../../../bin directory, we can load it in F# Interactive as follows:\r\nopen FSharp.Data\r\n\r\nParsing F1 Calendar Data\r\nThis example shows an example of using the HTML Type Provider to extract each row from a table on a Wikipedia page.\r\nUsually with HTML files headers are demarked by using the \u0026lt;th\u0026gt; tag, however this is not true in general, so the provider assumes that the\r\nfirst row is headers. (This behaviour is likely to get smarter in later releases). But it highlights a general problem about HTML\u0027s strictness.\r\n[\u0026lt;Literal\u0026gt;]\r\nlet F1_2017_URL =\r\n    \u0026quot;https://en.wikipedia.org/wiki/2017_FIA_Formula_One_World_Championship\u0026quot;\r\n\r\ntype F1_2017 = HtmlProvider\u0026lt;F1_2017_URL\u0026gt;\r\n\r\nThe generated type provides a type space of tables that it has managed to parse out of the given HTML Document.\r\nEach type\u0027s name is derived from either the id, title, name, summary or caption attributes/tags provided. If none of these\r\nentities exist then the table will simply be named Tablexx where xx is the position in the HTML document if all of the tables were flattened out into a list.\r\nThe Load method allows reading the data from a file or web resource. We could also have used a web URL instead of a local file in the sample parameter of the type provider.\r\nThe following sample calls the Load method with an URL that points to a live version of the same page on Wikipedia.\r\n// Download the table for the 2017 F1 calendar from Wikipedia\r\nlet f1Calendar = F1_2017.Load(F1_2017_URL).Tables.Calendar\r\n\r\n// Look at the top row, being the first race of the calendar\r\nlet firstRow = f1Calendar.Rows |\u0026gt; Seq.head\r\nlet round = firstRow.Round\r\nlet grandPrix = firstRow.\u0060\u0060Grand Prix\u0060\u0060\r\nlet date = firstRow.Date\r\n\r\n// Print the round, location and date for each race, corresponding to a row\r\nfor row in f1Calendar.Rows do\r\n    printfn \u0026quot;Race, round %A is hosted at %A on %A\u0026quot; row.Round row.\u0060\u0060Grand Prix\u0060\u0060 row.Date\r\n\r\nRace, round \u00221\u0022 is hosted at \u0022Australian Grand Prix\u0022 on \u002226 March\u0022\r\nRace, round \u00222\u0022 is hosted at \u0022Chinese Grand Prix\u0022 on \u00229 April\u0022\r\nRace, round \u00223\u0022 is hosted at \u0022Bahrain Grand Prix\u0022 on \u002216 April\u0022\r\nRace, round \u00224\u0022 is hosted at \u0022Russian Grand Prix\u0022 on \u002230 April\u0022\r\nRace, round \u00225\u0022 is hosted at \u0022Spanish Grand Prix\u0022 on \u002214 May\u0022\r\nRace, round \u00226\u0022 is hosted at \u0022Monaco Grand Prix\u0022 on \u002228 May\u0022\r\nRace, round \u00227\u0022 is hosted at \u0022Canadian Grand Prix\u0022 on \u002211 June\u0022\r\nRace, round \u00228\u0022 is hosted at \u0022Azerbaijan Grand Prix\u0022 on \u002225 June\u0022\r\nRace, round \u00229\u0022 is hosted at \u0022Austrian Grand Prix\u0022 on \u00229 July\u0022\r\nRace, round \u002210\u0022 is hosted at \u0022British Grand Prix\u0022 on \u002216 July\u0022\r\nRace, round \u002211\u0022 is hosted at \u0022Hungarian Grand Prix\u0022 on \u002230 July\u0022\r\nRace, round \u002212\u0022 is hosted at \u0022Belgian Grand Prix\u0022 on \u002227 August\u0022\r\nRace, round \u002213\u0022 is hosted at \u0022Italian Grand Prix\u0022 on \u00223 September\u0022\r\nRace, round \u002214\u0022 is hosted at \u0022Singapore Grand Prix\u0022 on \u002217 September\u0022\r\nRace, round \u002215\u0022 is hosted at \u0022Malaysian Grand Prix\u0022 on \u00221 October\u0022\r\nRace, round \u002216\u0022 is hosted at \u0022Japanese Grand Prix\u0022 on \u00228 October\u0022\r\nRace, round \u002217\u0022 is hosted at \u0022United States Grand Prix\u0022 on \u002222 October\u0022\r\nRace, round \u002218\u0022 is hosted at \u0022Mexican Grand Prix\u0022 on \u002229 October\u0022\r\nRace, round \u002219\u0022 is hosted at \u0022Brazilian Grand Prix\u0022 on \u002212 November\u0022\r\nRace, round \u002220\u0022 is hosted at \u0022Abu Dhabi Grand Prix\u0022 on \u002226 November\u0022\r\nRace, round \u0022Source:[63]\u0022 is hosted at \u0022Source:[63]\u0022 on \u0022Source:[63]\u0022\r\nval f1Calendar: HtmlProvider\u0026lt;...\u0026gt;.Calendar\r\nval firstRow: HtmlProvider\u0026lt;...\u0026gt;.Calendar.Row =\r\n  (\u00221\u0022, \u0022Australian Grand Prix\u0022, \u0022Albert Park Circuit, Melbourne\u0022, \u002226 March\u0022)\r\nval round: string = \u00221\u0022\r\nval grandPrix: string = \u0022Australian Grand Prix\u0022\r\nval date: string = \u002226 March\u0022\r\nval it: unit = ()\r\nThe generated type has a property Rows that returns the data from the HTML file as a\r\ncollection of rows. We iterate over the rows using a for loop. As you can see the\r\n(generated) type for rows has properties such as Grand Prix, Circuit, Round and Date that correspond\r\nto the columns in the selected HTML table file.\r\nAs you can see, the type provider also infers types of individual rows. The Date\r\nproperty is inferred to be a DateTime (because the values in the sample file can all\r\nbe parsed as dates) while other columns are inferred as the correct type where possible.\r\nParsing Nuget package stats\r\nThis small sample shows how the HTML Type Provider can be used to scrape data from a website. In this example, we analyze the download counts of the FSharp.Data package on NuGet.\r\nNote that we\u0027re using the live URL as the sample, so we can just use the default constructor as the runtime data will be the same as the compile time data.\r\n// Configure the type provider\r\ntype NugetStats = HtmlProvider\u0026lt;\u0026quot;https://www.nuget.org/packages/FSharp.Data\u0026quot;\u0026gt;\r\n\r\n// load the live package stats for FSharp.Data\r\nlet rawStats = NugetStats().Tables.\u0060\u0060Version History of FSharp.Data\u0060\u0060\r\n\r\n// helper function to analyze version numbers from Nuget\r\nlet getMinorVersion (v: string) =\r\n    System.Text.RegularExpressions.Regex(@\u0026quot;\\d.\\d\u0026quot;).Match(v).Value\r\n\r\n// group by minor version and calculate the download count\r\nlet stats =\r\n    rawStats.Rows\r\n    |\u0026gt; Seq.groupBy (fun r -\u0026gt; getMinorVersion r.Version)\r\n    |\u0026gt; Seq.map (fun (k, xs) -\u0026gt; k, xs |\u0026gt; Seq.sumBy (fun x -\u0026gt; x.Downloads))\r\n    |\u0026gt; Seq.toArray\r\n\r\ntype NugetStats = HtmlProvider\u0026lt;...\u0026gt;\r\nval rawStats: HtmlProvider\u0026lt;...\u0026gt;.VersionHistoryOfFSharpData\r\nval getMinorVersion: v: string -\u0026gt; string\r\nval stats: (string * decimal) array =\r\n  [|(\u00226.6\u0022, 140747M); (\u00226.5\u0022, 3788M); (\u00226.4\u0022, 589138M); (\u00226.3\u0022, 397317M);\r\n    (\u00226.2\u0022, 156895M); (\u00226.1\u0022, 3205M); (\u00226.0\u0022, 18902M); (\u00225.0\u0022, 494859M);\r\n    (\u00224.2\u0022, 944741M); (\u00224.1\u0022, 207622M); (\u00224.0\u0022, 124078M); (\u00223.3\u0022, 1301429M);\r\n    (\u00223.2\u0022, 69107M); (\u00223.1\u0022, 265699M); (\u00223.0\u0022, 661332M); (\u00222.4\u0022, 492190M);\r\n    (\u00222.3\u0022, 659792M); (\u00222.2\u0022, 380499M); (\u00222.1\u0022, 46816M); (\u00222.0\u0022, 173216M);\r\n    (\u00221.1\u0022, 128894M); (\u00221.0\u0022, 80907M)|]\r\nGetting statistics on Doctor Who\r\nThis sample shows some more screen scraping from Wikipedia:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet DrWho =\r\n    \u0026quot;https://en.wikipedia.org/wiki/List_of_Doctor_Who_episodes_(1963%E2%80%931989)\u0026quot;\r\n\r\nlet doctorWho = new HtmlProvider\u0026lt;DrWho\u0026gt;()\r\n\r\n// Get the average number of viewers for each doctor\u0026#39;s series run\r\nlet viewersByDoctor =\r\n    doctorWho.Tables.\u0060\u0060Season 1 (1963-1964)\u0060\u0060.Rows\r\n    |\u0026gt; Seq.groupBy (fun season -\u0026gt; season.\u0060\u0060Directed by\u0060\u0060)\r\n    |\u0026gt; Seq.map (fun (doctor, seasons) -\u0026gt;\r\n        let averaged =\r\n            seasons |\u0026gt; Seq.averageBy (fun season -\u0026gt; season.\u0060\u0060UK viewers (millions)\u0060\u0060)\r\n\r\n        doctor, averaged)\r\n    |\u0026gt; Seq.toArray\r\n\r\n[\u0026lt;Literal\u0026gt;]\r\nval DrWho: string\r\n  =\r\n  \u0022https://en.wikipedia.org/wiki/List_of_Doctor_Who_episodes_(1963%E2%80%931989)\u0022\r\nval doctorWho: HtmlProvider\u0026lt;...\u0026gt;\r\nval viewersByDoctor: (string * float) array =\r\n  [|(\u0022Waris Hussein\u0022, 8.0); (\u0022\u0022, nan); (\u0022Christopher Barry\u0022, 8.275);\r\n    (\u0022Richard Martin\u0022, 10.025); (\u0022Frank Cox\u0022, 7.9); (\u0022John Crockett\u0022, 8.0);\r\n    (\u0022John Gorrie\u0022, 9.066666667); (\u0022Mervyn Pinfield\u0022, 6.925);\r\n    (\u0022Henric Hirsch\u0022, 6.733333333)|]\r\nRelated articles\r\n\r\n\r\nHTML Parser - provides more information about\r\nworking with HTML documents dynamically.\r\n\r\n\r\n","headings":["HTML Type Provider","Introducing the provider","Parsing F1 Calendar Data","Parsing Nuget package stats","Getting statistics on Doctor Who","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/Http.html","title":"HTTP Utilities\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nHTTP Utilities\r\nThe .NET library provides a powerful API for creating and sending HTTP web requests.\r\nThere is a simple WebClient type (see MSDN) and a more flexible HttpWebRequest\r\ntype (see MSDN). However, these two types are quite difficult to use if you\r\nwant to quickly run a simple HTTP request and specify parameters such as method,\r\nHTTP POST data, or additional headers.\r\nThe FSharp.Data package provides a simple Http type with four methods:\r\nHttp.RequestString and Http.AsyncRequestString, that can be used to create a simple request and\r\nperform it synchronously or asynchronously, and Http.Request and it\u0027s async companion Http.AsyncRequest if\r\nyou want to request binary files or you want to know more about the response like the status code,\r\nthe response URL, or the returned headers and cookies.\r\nThe type is located in FSharp.Data namespace:\r\nopen FSharp.Data\r\n\r\nSending simple requests\r\nTo send a simple HTTP (GET) request that downloads a specified web page, you\r\ncan use Http.RequestString and Http.AsyncRequestString with just a single parameter:\r\n// Download the content of a web site\r\nHttp.RequestString(\u0026quot;http://tomasp.net\u0026quot;)\r\n\r\n// Download web site asynchronously\r\nasync {\r\n    let! html = Http.AsyncRequestString(\u0026quot;http://tomasp.net\u0026quot;)\r\n    printfn \u0026quot;%d\u0026quot; html.Length\r\n}\r\n|\u0026gt; Async.Start\r\n\r\nval it: unit = ()\r\nIn the rest of the documentation, we focus on the RequestString method, because\r\nthe use of AsyncRequestString is exactly the same.\r\nQuery parameters and headers\r\nYou can specify query parameters either by constructing\r\nan URL that includes the parameters (e.g. http://...?test=foo\u0026amp;more=bar) or you\r\ncan pass them using the optional parameter query. The following example also explicitly\r\nspecifies the GET method, but it will be set automatically for you if you omit it:\r\nHttp.RequestString(\u0026quot;http://httpbin.org/get\u0026quot;, query = [ \u0026quot;test\u0026quot;, \u0026quot;foo\u0026quot; ], httpMethod = \u0026quot;GET\u0026quot;)\r\n\r\n38968\r\nval it: string =\r\n  \u0022{\n  \u0022args\u0022: {\n    \u0022test\u0022: \u0022foo\u0022\n  }, \n  \u0022headers\u0022: {\n    \u0022Accept-Encoding\u0022: \u0022gzip, deflate\u0022, \n    \u0022Host\u0022: \u0022httpbin.org\u0022, \n    \u0022X-Amzn-Trace-Id\u0022: \u0022Root=1-68b5b3e4-3227e5457f08a9e86c59c7ff\u0022\n  }, \n  \u0022origin\u0022: \u002264.236.161.17\u0022, \n  \u0022url\u0022: \u0022http://httpbin.org/get?test=foo\u0022\n}\n\u0022\r\nAdditional headers are specified similarly - using an optional parameter headers.\r\nThe collection can contain custom headers, but also standard headers such as the\r\nAccept header (which has to be set using a specific property when using HttpWebRequest).\r\nThe following example uses The Movie Database API\r\nto search for the word \u0022batman\u0022. To run the sample, you\u0027ll need to register and\r\nprovide your API key:\r\n// API key for http://www.themoviedb.org\r\nlet apiKey = \u0026quot;\u0026lt;please register to get a key\u0026gt;\u0026quot;\r\n\r\n// Run the HTTP web request\r\nHttp.RequestString(\r\n    \u0026quot;http://api.themoviedb.org/3/search/movie\u0026quot;,\r\n    httpMethod = \u0026quot;GET\u0026quot;,\r\n    query = [ \u0026quot;api_key\u0026quot;, apiKey; \u0026quot;query\u0026quot;, \u0026quot;batman\u0026quot; ],\r\n    headers = [ \u0026quot;Accept\u0026quot;, \u0026quot;application/json\u0026quot; ]\r\n)\r\n\r\nThe library supports a simple and unchecked string based API (used in the previous example),\r\nbut you can also use pre-defined header names to avoid spelling mistakes. The named headers\r\nare available in HttpRequestHeaders (and HttpResponseHeaders) modules, so you can either\r\nuse the full name HttpRequestHeaders.Accept, or open the module and use just the short name\r\nAccept as in the following example. Similarly, the HttpContentTypes enumeration provides\r\nwell known content types:\r\nopen FSharp.Data.HttpRequestHeaders\r\n\r\n// Run the HTTP web request\r\nHttp.RequestString(\r\n    \u0026quot;http://api.themoviedb.org/3/search/movie\u0026quot;,\r\n    query = [ \u0026quot;api_key\u0026quot;, apiKey; \u0026quot;query\u0026quot;, \u0026quot;batman\u0026quot; ],\r\n    headers = [ Accept HttpContentTypes.Json ]\r\n)\r\n\r\nGetting extra information\r\nNote that in the previous snippet, if you don\u0027t specify a valid API key, you\u0027ll get a (401) Unauthorized error,\r\nand that will throw an exception. Unlike when using WebRequest directly, the exception message will still include\r\nthe response content, so it\u0027s easier to debug in F# interactive when the server returns extra info.\r\nYou can also opt out of the exception by specifying the silentHttpErrors parameter:\r\nHttp.RequestString(\u0026quot;http://api.themoviedb.org/3/search/movie\u0026quot;, silentHttpErrors = true)\r\n\r\nval it: string =\r\n  \u0022{\u0022status_code\u0022:7,\u0022status_message\u0022:\u0022Invalid API key: You must be granted a valid key.\u0022,\u0022success\u0022:false}\n\u0022\r\nIn this case, you might want to look at the HTTP status code so you don\u0027t confuse an error message for an actual response.\r\nIf you want to see more information about the response, including the status code, the response\r\nheaders, the returned cookies, and the response url (which might be different to\r\nthe url you passed when there are redirects), you can use the Http.Request method\r\ninstead of the Http.RequestString method:\r\nlet response =\r\n    Http.Request(\u0026quot;http://api.themoviedb.org/3/search/movie\u0026quot;, silentHttpErrors = true)\r\n\r\n// Examine information about the response\r\nresponse.Headers\r\nresponse.Cookies\r\nresponse.ResponseUrl\r\nresponse.StatusCode\r\n\r\nSending request data\r\nIf you want to create a POST request with HTTP POST data, you can specify the\r\nadditional data in the body optional parameter. This parameter is of type HttpRequestBody, which\r\nis a discriminated union with three cases:\r\n\r\nTextRequest for sending a string in the request body.\r\nBinaryUpload for sending binary content in the request.\r\nFormValues for sending a set of name-value pairs correspondent to form values.\r\n\r\nIf you specify a body, you do not need to set the httpMethod parameter, it will be set to Post automatically.\r\nThe following example uses the httpbin.org service which\r\nreturns the request details:\r\nHttp.RequestString(\u0026quot;http://httpbin.org/post\u0026quot;, body = FormValues [ \u0026quot;test\u0026quot;, \u0026quot;foo\u0026quot; ])\r\n\r\nval it: string =\r\n  \u0022{\n  \u0022args\u0022: {}, \n  \u0022data\u0022: \u0022\u0022, \n  \u0022files\u0022: {}, \n  \u0022form\u0022: {\n    \u0022test\u0022: \u0022foo\u0022\n  }, \n  \u0022headers\u0022: {\n    \u0022Accept-Encoding\u0022: \u0022gzip, deflate\u0022, \n    \u0022Content-Length\u0022: \u00228\u0022, \n    \u0022Content-Type\u0022: \u0022application/x-www-form-urlencoded\u0022, \n    \u0022Host\u0022: \u0022httpbin.org\u0022, \n    \u0022X-Amzn-Trace-Id\u0022: \u0022Root=1-68b5b3e4-124daaeb6d8c32d02fc4321d\u0022\n  }, \n  \u0022json\u0022: null, \n  \u0022origin\u0022: \u002264.236.161.17\u0022, \n  \u0022url\u0022: \u0022http://httpbin.org/post\u0022\n}\n\u0022\r\nBy default, the Content-Type header is set to text/plain, application/x-www-form-urlencoded,\r\nor application/octet-stream, depending on which kind of HttpRequestBody you specify, but you can change\r\nthis behaviour by adding content-type to the list of headers using the optional argument headers:\r\nHttp.RequestString(\r\n    \u0026quot;http://httpbin.org/post\u0026quot;,\r\n    headers = [ ContentType HttpContentTypes.Json ],\r\n    body = TextRequest \u0026quot;\u0026quot;\u0026quot; {\u0026quot;test\u0026quot;: 42} \u0026quot;\u0026quot;\u0026quot;\r\n)\r\n\r\nval it: string =\r\n  \u0022{\n  \u0022args\u0022: {}, \n  \u0022data\u0022: \u0022 {\\\u0022test\\\u0022: 42} \u0022, \n  \u0022files\u0022: {}, \n  \u0022form\u0022: {}, \n  \u0022headers\u0022: {\n    \u0022Accept-Encoding\u0022: \u0022gzip, deflate\u0022, \n    \u0022Content-Length\u0022: \u002214\u0022, \n    \u0022Content-Type\u0022: \u0022application/json\u0022, \n    \u0022Host\u0022: \u0022httpbin.org\u0022, \n    \u0022X-Amzn-Trace-Id\u0022: \u0022Root=1-68b5b3e5-541d802332e9523736f08911\u0022\n  }, \n  \u0022json\u0022: {\n    \u0022test\u0022: 42\n  }, \n  \u0022origin\u0022: \u002264.236.161.17\u0022, \n  \u0022url\u0022: \u0022http://httpbin.org/post\u0022\n}\n\u0022\r\nMaintaining cookies across requests\r\nIf you want to maintain cookies between requests, you can specify the cookieContainer\r\nparameter.\r\nThe following is an old sample showing how this is set.\r\n// Build URL with documentation for a given class\r\nlet msdnUrl className =\r\n    let root = \u0026quot;http://msdn.microsoft.com\u0026quot;\r\n    sprintf \u0026quot;%s/en-gb/library/%s.aspx\u0026quot; root className\r\n\r\n// Get the page and search for F# code\r\nlet docInCSharp = Http.RequestString(msdnUrl \u0026quot;system.web.httprequest\u0026quot;)\r\ndocInCSharp.Contains \u0026quot;\u0026lt;a\u0026gt;F#\u0026lt;/a\u0026gt;\u0026quot;\r\n\r\nopen System.Net\r\nlet cc = CookieContainer()\r\n\r\n// Send a request to switch the language\r\nHttp.RequestString(\r\n    msdnUrl \u0026quot;system.datetime\u0026quot;,\r\n    query = [ \u0026quot;cs-save-lang\u0026quot;, \u0026quot;1\u0026quot;; \u0026quot;cs-lang\u0026quot;, \u0026quot;fsharp\u0026quot; ],\r\n    cookieContainer = cc\r\n)\r\n|\u0026gt; ignore\r\n\r\n// Request the documentation again \u0026amp; search for F#\r\nlet docInFSharp =\r\n    Http.RequestString(msdnUrl \u0026quot;system.web.httprequest\u0026quot;, cookieContainer = cc)\r\n\r\ndocInFSharp.Contains \u0026quot;\u0026lt;a\u0026gt;F#\u0026lt;/a\u0026gt;\u0026quot;\r\n\r\nRequesting binary data\r\nThe Http.RequestString method will always return the response as a string, but if you use the\r\nHttp.Request method, it will return a HttpResponseBody.Text or a\r\nHttpResponseBody.Binary depending on the response content-type header:\r\nlet logoUrl = \u0026quot;https://raw.github.com/fsharp/FSharp.Data/master/misc/logo.png\u0026quot;\r\n\r\nmatch Http.Request(logoUrl).Body with\r\n| Text text -\u0026gt; printfn \u0026quot;Got text content: %s\u0026quot; text\r\n| Binary bytes -\u0026gt; printfn \u0026quot;Got %d bytes of binary content\u0026quot; bytes.Length\r\n\r\nCustomizing the HTTP request\r\nFor the cases where you need something not natively provided by the library, you can use the\r\ncustomizeHttpRequest parameter, which expects a function that transforms an HttpWebRequest.\r\nAs an example, let\u0027s say you want to add a client certificate to your request. To do that,\r\nyou need to open the X509Certificates namespace from  System.Security.Cryptography,\r\ncreate a X509ClientCertificate2 value, and add it to the ClientCertificates list of the request.\r\nAssuming the certificate is stored in myCertificate.pfx:\r\nopen System.Security.Cryptography.X509Certificates\r\n\r\n// Load the certificate from local file\r\nlet clientCert = new X509Certificate2(\u0026quot;.\\myCertificate.pfx\u0026quot;, \u0026quot;password\u0026quot;)\r\n\r\n// Send the request with certificate\r\nHttp.Request(\r\n    \u0026quot;http://yourprotectedresouce.com/data\u0026quot;,\r\n    customizeHttpRequest =\r\n        fun req -\u0026gt;\r\n            req.ClientCertificates.Add(clientCert) |\u0026gt; ignore\r\n            req\r\n)\r\n\r\nHandling multipart form data\r\nYou can also send http multipart form data via the Multipart HttpRequestBody case.\r\nData sent in this way is streamed instead of being read into memory in its entirety, allowing for\r\nuploads of arbitrary size.\r\nlet largeFilePath = \u0026quot;//path/to/large/file.mp4\u0026quot;\r\nlet data = System.IO.File.OpenRead(largeFilePath) :\u0026gt; System.IO.Stream\r\n\r\nHttp.Request(\r\n    \u0026quot;http://endpoint/for/multipart/data\u0026quot;,\r\n    body =\r\n        Multipart(\r\n            boundary = \u0026quot;define a custom boundary here\u0026quot;, // this is used to separate the items you\u0026#39;re streaming\r\n            parts = [ MultipartItem(\u0026quot;formFieldName\u0026quot;, System.IO.Path.GetFileName(largeFilePath), data) ]\r\n        )\r\n)\r\n\r\nRelated articles\r\n\r\nAPI Reference: Http\r\nAPI Reference: HttpContentTypes\r\nAPI Reference: HttpEncodings\r\nAPI Reference: HttpMethod\r\nAPI Reference: HttpRequestBody\r\nAPI Reference: HttpRequestHeaders\r\nAPI Reference: HttpResponse\r\nAPI Reference: HttpResponseBody\r\nAPI Reference: HttpResponseHeaders\r\nAPI Reference: HttpResponseWithStream\r\nAPI Reference: HttpStatusCodes\r\n\r\n","headings":["HTTP Utilities","Sending simple requests","Query parameters and headers","Getting extra information","Sending request data","Maintaining cookies across requests","Requesting binary data","Customizing the HTTP request","Handling multipart form data","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/JsonProvider.html","title":"JSON Type Provider\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nJSON Type Provider\r\nThis article demonstrates how to use the JSON Type Provider to access JSON files\r\nin a statically typed way. We first look at how the structure is inferred and then\r\ndemonstrate the provider by parsing data from WorldBank and Twitter.\r\nThe JSON Type Provider provides statically typed access to JSON documents.\r\nIt takes a sample document as an input (or a document containing a JSON array of samples).\r\nThe generated type can then be used to read files with the same structure.\r\nIf the loaded file does not match the structure of the sample, a runtime error may occur\r\n(but only when explicitly accessing an element incompatible with the original sample \u2014 e.g. if it is no longer present).\r\nIntroducing the provider\r\n\r\n    \r\n        \r\n        \r\n            \r\n        \r\n        \r\n    \r\n\r\nThe type provider is located in the FSharp.Data.dll assembly and namespace:\r\nopen FSharp.Data\r\n\r\nInferring types from the sample\r\nThe JsonProvider\u0026lt;...\u0026gt; takes one static parameter of type string. The parameter can\r\nbe either a sample string or a sample file (relative to the current folder or online\r\naccessible via http or https). It is not likely that this could lead to ambiguities.\r\nThe following sample passes a small JSON string to the provider:\r\ntype Simple = JsonProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot; { \u0026quot;name\u0026quot;:\u0026quot;John\u0026quot;, \u0026quot;age\u0026quot;:94 } \u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\nlet simple = Simple.Parse(\u0026quot;\u0026quot;\u0026quot; { \u0026quot;name\u0026quot;:\u0026quot;Tomas\u0026quot;, \u0026quot;age\u0026quot;:4 } \u0026quot;\u0026quot;\u0026quot;)\r\nsimple.Age\r\nsimple.Name\r\n\r\ntype Simple = JsonProvider\u0026lt;...\u0026gt;\r\nval simple: JsonProvider\u0026lt;...\u0026gt;.Root = {\r\n  \u0022name\u0022: \u0022Tomas\u0022,\r\n  \u0022age\u0022: 4\r\n}\r\nval it: string = \u0022Tomas\u0022\r\nYou can see that the generated type has two properties - Age of type int and Name of\r\ntype string. The provider successfully infers the types from the sample and exposes the\r\nfields as properties (with PascalCase name to follow standard naming conventions).\r\nInferring numeric types\r\nIn the previous case, the sample document simply contained an integer and so the provider\r\ninferred the type int. Sometimes, the types in the sample document (or a list of samples)\r\nmay not match exactly. For example, a list may mix integers and floats:\r\ntype Numbers = JsonProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot; [1, 2, 3, 3.14] \u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\nlet nums = Numbers.Parse(\u0026quot;\u0026quot;\u0026quot; [1.2, 45.1, 98.2, 5] \u0026quot;\u0026quot;\u0026quot;)\r\nlet total = nums |\u0026gt; Seq.sum\r\n\r\ntype Numbers = JsonProvider\u0026lt;...\u0026gt;\r\nval nums: decimal array = [|1.2M; 45.1M; 98.2M; 5M|]\r\nval total: decimal = 149.5M\r\nWhen the sample is a collection, the type provider generates a type that can be used to store\r\nall values in the sample. In this case, the resulting type is decimal, because one\r\nof the values is not an integer. In general, the provider supports (and prefers them\r\nin this order): int, int64, decimal and float.\r\nOther primitive types cannot be combined into a single type. For example, if the list contains\r\nnumbers and strings. In this case, the provider generates two methods that can be used\r\nto get values that match one of the types:\r\ntype Mixed = JsonProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot; [1, 2, \u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot;] \u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\nlet mixed = Mixed.Parse(\u0026quot;\u0026quot;\u0026quot; [4, 5, \u0026quot;hello\u0026quot;, \u0026quot;world\u0026quot; ] \u0026quot;\u0026quot;\u0026quot;)\r\n\r\nmixed.Numbers |\u0026gt; Seq.sum\r\nmixed.Strings |\u0026gt; String.concat \u0026quot;, \u0026quot;\r\n\r\ntype Mixed = JsonProvider\u0026lt;...\u0026gt;\r\nval mixed: JsonProvider\u0026lt;...\u0026gt;.Root = [\r\n  4,\r\n  5,\r\n  \u0022hello\u0022,\r\n  \u0022world\u0022\r\n]\r\nval it: string = \u00224, 5, hello, world\u0022\r\nAs you can see, the Mixed type has properties Numbers and Strings that\r\nreturn only int and string values from the collection. This means that we get\r\ntype-safe access to the values, but not in the original order (if order matters, then\r\nyou can use the mixed.JsonValue property to get the underlying JsonValue and\r\nprocess it dynamically as described in the documentation for JsonValue.\r\nInferring record types\r\nNow let\u0027s look at a sample JSON document that contains a list of records. The\r\nfollowing example uses two records - one with name and age and the second with just\r\nname. If a property is missing, then the provider infers it as optional.\r\nIf we want to just use the same text used for the schema at runtime, we can use the GetSamples method:\r\ntype People =\r\n    JsonProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot;\r\n  [ { \u0026quot;name\u0026quot;:\u0026quot;John\u0026quot;, \u0026quot;age\u0026quot;:94 },\r\n    { \u0026quot;name\u0026quot;:\u0026quot;Tomas\u0026quot; } ] \u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\n\r\nfor item in People.GetSamples() do\r\n    printf \u0026quot;%s \u0026quot; item.Name\r\n    item.Age |\u0026gt; Option.iter (printf \u0026quot;(%d)\u0026quot;)\r\n    printfn \u0026quot;\u0026quot;\r\n\r\nJohn (94)\r\nTomas \r\ntype People = JsonProvider\u0026lt;...\u0026gt;\r\nval it: unit = ()\r\nThe inferred type for items is a collection of (anonymous) JSON entities - each entity\r\nhas properties Name and Age. As Age is unavailable for all records in the sample\r\ndata set, it is inferred as option\u0026lt;int\u0026gt;. The above sample uses Option.iter to print\r\nthe value only when it is available.\r\nIn the previous case, the values of individual properties had common types - string\r\nfor the Name property and numeric type for Age. However, what if the property of\r\na record can have multiple different types? In that case, the type provider behaves\r\nas follows:\r\ntype Values = JsonProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot; [{\u0026quot;value\u0026quot;:94 }, {\u0026quot;value\u0026quot;:\u0026quot;Tomas\u0026quot; }] \u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\n\r\nfor item in Values.GetSamples() do\r\n    match item.Value.Number, item.Value.String with\r\n    | Some num, _ -\u0026gt; printfn \u0026quot;Numeric: %d\u0026quot; num\r\n    | _, Some str -\u0026gt; printfn \u0026quot;Text: %s\u0026quot; str\r\n    | _ -\u0026gt; printfn \u0026quot;Some other value!\u0026quot;\r\n\r\nNumeric: 94\r\nText: Tomas\r\ntype Values = JsonProvider\u0026lt;...\u0026gt;\r\nval it: unit = ()\r\nHere, the Value property is either a number or a string, The type provider generates\r\na type that has an optional property for each possible option, so we can use\r\nsimple pattern matching on option\u0026lt;int\u0026gt; and option\u0026lt;string\u0026gt; values to distinguish\r\nbetween the two options. This is similar to the handling of heterogeneous arrays.\r\nNote that we have a GetSamples method because the sample is a JSON list. If it was a JSON\r\nobject, we would have a GetSample method instead.\r\nMore complex object type on the root level\r\nIf you want the root type to be an object type, not an array, but\r\nyou need more samples at the root level, you can use the SampleIsList parameter.\r\nApplied to the previous example, this would be:\r\ntype People2 =\r\n    JsonProvider\u0026lt;\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n  [ { \u0026quot;name\u0026quot;:\u0026quot;John\u0026quot;, \u0026quot;age\u0026quot;:94 },\r\n    { \u0026quot;name\u0026quot;:\u0026quot;Tomas\u0026quot; } ] \u0026quot;\u0026quot;\u0026quot;,\r\n        SampleIsList=true\r\n     \u0026gt;\r\n\r\nlet person = People2.Parse(\u0026quot;\u0026quot;\u0026quot;{ \u0026quot;name\u0026quot;:\u0026quot;Gustavo\u0026quot; }\u0026quot;\u0026quot;\u0026quot;)\r\n\r\ntype People2 = JsonProvider\u0026lt;...\u0026gt;\r\nval person: JsonProvider\u0026lt;...\u0026gt;.Root = {\r\n  \u0022name\u0022: \u0022Gustavo\u0022\r\n}\r\nNote that starting with version 4.2.9 of this package, JSON comments are supported\r\n(Comments are either single-line and start with // or multi-line when wrapped in /* and */).\r\nThis is not a standard feature of JSON, but it can be really convenient,\r\ne.g. to annotate each sample when using multiple ones.\r\nType inference hints / inline schemas\r\nStarting with version 4.2.10 of this package, it\u0027s possible to enable basic type annotations\r\ndirectly in the sample used by the provider, to complete or to override type inference.\r\n(Only basic types are supported. See the reference documentation of the provider for the full list)\r\nThis feature is disabled by default and has to be explicitly enabled with the InferenceMode\r\nstatic parameter.\r\nLet\u0027s consider an example where this can be useful:\r\ntype AmbiguousEntity =\r\n    JsonProvider\u0026lt;\r\n        Sample=\u0026quot;\u0026quot;\u0026quot;\r\n        { \u0026quot;code\u0026quot;:\u0026quot;000\u0026quot;, \u0026quot;length\u0026quot;:\u0026quot;0\u0026quot; }\r\n        { \u0026quot;code\u0026quot;:\u0026quot;123\u0026quot;, \u0026quot;length\u0026quot;:\u0026quot;42\u0026quot; }\r\n        { \u0026quot;code\u0026quot;:\u0026quot;4E5\u0026quot;, \u0026quot;length\u0026quot;:\u0026quot;1.83\u0026quot; }\r\n        \u0026quot;\u0026quot;\u0026quot;,\r\n        SampleIsList=true\r\n     \u0026gt;\r\n\r\nlet code = (AmbiguousEntity.GetSamples()[1]).Code\r\nlet length = (AmbiguousEntity.GetSamples()[1]).Length\r\n\r\ntype AmbiguousEntity = JsonProvider\u0026lt;...\u0026gt;\r\nval code: float = 123.0\r\nval length: decimal = 42M\r\nIn the previous example, Code is inferred as a float,\r\neven though it looks more like it should be a string.\r\n(4E5 is interpreted as an exponential float notation instead of a string)\r\nNow, let\u0027s enable inline schemas:\r\nopen FSharp.Data.Runtime.StructuralInference\r\n\r\ntype AmbiguousEntity2 =\r\n    JsonProvider\u0026lt;\r\n        Sample=\u0026quot;\u0026quot;\u0026quot;\r\n        { \u0026quot;code\u0026quot;:\u0026quot;typeof\u0026lt;string\u0026gt;\u0026quot;, \u0026quot;length\u0026quot;:\u0026quot;typeof\u0026lt; float\u0026lt;metre\u0026gt; \u0026gt;\u0026quot; }\r\n        { \u0026quot;code\u0026quot;:\u0026quot;123\u0026quot;, \u0026quot;length\u0026quot;:\u0026quot;42\u0026quot; }\r\n        { \u0026quot;code\u0026quot;:\u0026quot;4E5\u0026quot;, \u0026quot;length\u0026quot;:\u0026quot;1.83\u0026quot; }\r\n        \u0026quot;\u0026quot;\u0026quot;,\r\n        SampleIsList=true,\r\n        InferenceMode=InferenceMode.ValuesAndInlineSchemasOverrides\r\n     \u0026gt;\r\n\r\nlet code2 = (AmbiguousEntity2.GetSamples().[1]).Code\r\nlet length2 = (AmbiguousEntity2.GetSamples().[1]).Length\r\n\r\ntype AmbiguousEntity2 = JsonProvider\u0026lt;...\u0026gt;\r\nval code2: string = \u0022123\u0022\r\nval length2: JsonProvider\u0026lt;...\u0026gt;.DecimalOrString = \u002242\u0022\r\nWith the ValuesAndInlineSchemasOverrides inference mode, the typeof\u0026lt;string\u0026gt; inline schema\r\ntakes priority over the type inferred from other values.\r\nCode is now a string, as we wanted it to be!\r\nNote that an alternative to obtain the same result would have been to replace all the Code values\r\nin the samples with unambiguous string values. (But this can be very cumbersome, especially with big samples)\r\nIf we had used the ValuesAndInlineSchemasHints inference mode instead, our inline schema\r\nwould have had the same precedence as the types inferred from other values, and Code\r\nwould have been inferred as a choice between either a number or a string,\r\nexactly as if we had added another sample with an unambiguous string value for Code.\r\nYou can use either angle brackets \u0026lt;\u0026gt; or curly brackets {} when defining inline schemas.\r\nUnits of measure\r\nInline schemas also enable support for units of measure.\r\nIn the previous example, the Length property is now inferred as a float\r\nwith the metre unit of measure (from the default SI units).\r\nWarning: units of measures are discarded when merged with types without a unit or with a different unit.\r\nAs mentioned previously, with the ValuesAndInlineSchemasHints inference mode,\r\ninline schemas types are merged with other inferred types with the same precedence.\r\nSince values-inferred types never have units, inline-schemas-inferred types will lose their\r\nunit if the sample contains other values...\r\nLoading WorldBank data\r\nNow, let\u0027s use the type provider to process some real data. We use a data set returned by\r\nthe WorldBank, which has (roughly) the following structure:\r\n[ { \u0022page\u0022: 1, \u0022pages\u0022: 1, \u0022total\u0022: 53 },\r\n  [ { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\r\n      \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\r\n      \u0022value\u0022:null,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222000\u0022},\r\n    { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\r\n      \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\r\n      \u0022value\u0022:\u002216.6567773464055\u0022,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222010\u0022} ] ]\r\n\r\nThe response to a request contains an array of two items. The first item is a record\r\nwith general information about the response (page, total pages, etc.) and the second item\r\nis another array which contains the actual data points. For every data point, we get\r\nsome information and the actual value. Note that the value is passed as a string\r\n(for some unknown reason). It is wrapped in quotes, so the provider infers its type as\r\nstring (and we need to convert it manually).\r\nThe following sample generates type based on the data/WorldBank.json\r\nfile and loads it:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet ResolutionFolder = __SOURCE_DIRECTORY__\r\n\r\ntype WorldBank = JsonProvider\u0026lt;\u0026quot;../data/WorldBank.json\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\nlet doc = WorldBank.GetSample()\r\n\r\nNote that we can also load the data directly from the web both in the Load method and in\r\nthe type provider sample parameter, and there\u0027s an asynchronous AsyncLoad method available too:\r\nlet wbReq =\r\n    \u0026quot;https://api.worldbank.org/country/cz/indicator/\u0026quot;\r\n    \u002B \u0026quot;GC.DOD.TOTL.GD.ZS?format=json\u0026quot;\r\n\r\nlet docAsync = WorldBank.AsyncLoad(wbReq)\r\n\r\nval wbReq: string =\r\n  \u0022https://api.worldbank.org/country/cz/indicator/GC.DOD.TOTL.GD\u0022\u002B[15 chars]\r\nval docAsync: Async\u0026lt;JsonProvider\u0026lt;...\u0026gt;.Root\u0026gt;\r\nThe doc is an array of heterogeneous types, so the provider generates a type\r\nthat can be used to get the record and the array, respectively. Note that the\r\nprovider infers that there is only one record and one array. We can print the data set as follows:\r\n// Print general information\r\nlet info = doc.Record\r\nprintfn \u0026quot;Showing page %d of %d. Total records %d\u0026quot; info.Page info.Pages info.Total\r\n\r\n// Print all data points\r\nfor record in doc.Array do\r\n    record.Value |\u0026gt; Option.iter (fun value -\u0026gt; printfn \u0026quot;%d: %f\u0026quot; record.Date value)\r\n\r\nShowing page 1 of 1. Total records 53\r\n2010: 35.142297\r\n2009: 31.034880\r\n2008: 25.475164\r\n2007: 24.193320\r\n2006: 23.708055\r\n2005: 22.033462\r\n2004: 20.108379\r\n2003: 18.267725\r\n2002: 15.425565\r\n2001: 14.874434\r\n2000: 13.218869\r\n1999: 11.356696\r\n1998: 10.178780\r\n1997: 10.153566\r\n1996: 10.520301\r\n1995: 12.707834\r\n1994: 14.781808\r\n1993: 16.656777\r\nval info: JsonProvider\u0026lt;...\u0026gt;.Record2 =\r\n  {\r\n  \u0022page\u0022: 1,\r\n  \u0022pages\u0022: 1,\r\n  \u0022per_page\u0022: \u00221000\u0022,\r\n  \u0022total\u0022: 53\r\n}\r\nval it: unit = ()\r\nWhen printing the data points, some of the values might be missing (in the input, the value\r\nis null instead of a valid number). This is another example of a heterogeneous type -\r\nthe type is either Number or some other type (representing null value). This means\r\nthat record.Value has a Number property (when the value is a number) and we can use\r\nit to print the result only when the data point is available.\r\nParsing Twitter stream\r\nWe now look at how to parse tweets returned by the Twitter API.\r\nTweets are quite heterogeneous, so we infer the structure from a list of inputs rather than from\r\njust a single input. To do that, we use the file data/TwitterStream.json\r\n(containing a list of tweets) and pass an optional parameter SampleIsList=true which tells the\r\nprovider that the sample is actually a list of samples:\r\ntype Tweet = JsonProvider\u0026lt;\u0026quot;../data/TwitterStream.json\u0026quot;, SampleIsList=true, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nlet text = (omitted)\r\n\r\nlet tweet = Tweet.Parse(text)\r\n\r\nprintfn \u0026quot;%s (retweeted %d times)\\n:%s\u0026quot; tweet.User.Value.Name tweet.RetweetCount.Value tweet.Text.Value\r\n\r\n\r\nAfter creating the Tweet type, we parse a single sample tweet and print some details about the\r\ntweet. As you can see, the tweet.User property has been inferred as optional (meaning that a\r\ntweet might not have an author?) so we unsafely get the value using the Value property.\r\nThe RetweetCount and Text properties may be also missing, so we also access them unsafely.\r\nGetting and creating GitHub issues\r\nIn this example we will now also create JSON in addition to consuming it.\r\nLet\u0027s start by listing the 5 most recently updated open issues in the FSharp.Data repository.\r\n// GitHub.json downloaded from\r\n// https://api.github.com/repos/fsharp/FSharp.Data/issues\r\n// to prevent rate limit when generating these docs\r\ntype GitHub = JsonProvider\u0026lt;\u0026quot;../data/GitHub.json\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nlet topRecentlyUpdatedIssues =\r\n    GitHub.GetSamples()\r\n    |\u0026gt; Seq.filter (fun issue -\u0026gt; issue.State = \u0026quot;open\u0026quot;)\r\n    |\u0026gt; Seq.sortBy (fun issue -\u0026gt; System.DateTimeOffset.Now - issue.UpdatedAt)\r\n    |\u0026gt; Seq.truncate 5\r\n\r\nfor issue in topRecentlyUpdatedIssues do\r\n    printfn \u0026quot;#%d %s\u0026quot; issue.Number issue.Title\r\n\r\n#879 Bug when call request from Http module\r\n#867 XmlProvider in 2.2.5 on F# 4 project causes multiple FSharp.Core assembly references\r\n#877 Header being considered as data row in HTMLProvider\r\n#878 Replace GitHub JsonProvider example with something else in ConsoleTests because of rate limit\r\n#873 Fix HtmlInference inferListType when passing an empty seq\r\ntype GitHub = JsonProvider\u0026lt;...\u0026gt;\r\nval topRecentlyUpdatedIssues: JsonProvider\u0026lt;...\u0026gt;.Root seq\r\nval it: unit = ()\r\nAnd now let\u0027s create a new issue. We look into the documentation at http://developer.github.com/v3/issues/#create-an-issue and we see that\r\nwe need to post a JSON value similar to this:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet issueSample =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;title\u0026quot;: \u0026quot;Found a bug\u0026quot;,\r\n  \u0026quot;body\u0026quot;: \u0026quot;I\u0026#39;m having a problem with this.\u0026quot;,\r\n  \u0026quot;assignee\u0026quot;: \u0026quot;octocat\u0026quot;,\r\n  \u0026quot;milestone\u0026quot;: 1,\r\n  \u0026quot;labels\u0026quot;: [\r\n    \u0026quot;Label1\u0026quot;,\r\n    \u0026quot;Label2\u0026quot;\r\n  ]\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n\r\nThis JSON is different from what we got for each issue in the previous API call, so we\u0027ll define a new type based on this sample,\r\ncreate an instance, and send a POST request:\r\ntype GitHubIssue = JsonProvider\u0026lt;issueSample, RootName=\u0026quot;issue\u0026quot;\u0026gt;\r\n\r\nlet newIssue =\r\n    GitHubIssue.Issue(\r\n        \u0026quot;Test issue\u0026quot;,\r\n        \u0026quot;This is a test issue created in FSharp.Data documentation\u0026quot;,\r\n        assignee = \u0026quot;\u0026quot;,\r\n        labels = [||],\r\n        milestone = 0\r\n    )\r\n\r\nnewIssue.JsonValue.Request \u0026quot;https://api.github.com/repos/fsharp/FSharp.Data/issues\u0026quot;\r\n\r\n\r\nUsing JSON provider in a library\r\nYou can use the types created by JSON type provider in a public API of a library that you are building,\r\nbut there is one important thing to keep in mind - when the user references your library, the type\r\nprovider will be loaded, and the types will be generated at that time (the JSON provider is not\r\ncurrently a generative type provider). This means that the type provider will need to be able to\r\naccess the sample JSON. This works fine when the sample is specified inline, but it won\u0027t work when\r\nthe sample is specified as a local file (unless you distribute the samples with your library).\r\nFor this reason, the JSON provider lets you specify samples as embedded resources using the\r\nstatic parameter EmbeddedResource (don\u0027t forget then to include the file as EmbeddedResource in the\r\nproject file). If you are building a library MyLib.dll, you can write:\r\ntype WB =\r\n    JsonProvider\u0026lt;\r\n        \u0026quot;../data/WorldBank.json\u0026quot;,\r\n        EmbeddedResource=\u0026quot;MyLib, MyLib.data.worldbank.json\u0026quot;,\r\n        ResolutionFolder=ResolutionFolder\r\n     \u0026gt;\r\n\r\nYou still need to specify the local path, but this is only used when compiling MyLib.dll.\r\nWhen a user of your library references MyLib.dll later, the JSON Type Provider will be able\r\nto load MyLib.dll and locate the sample worldbank.json as a resource of the library. When\r\nthis succeeds, it does not attempt to find the local file and so your library can be used\r\nwithout providing a local copy of the sample JSON files.\r\nRelated articles\r\n\r\n\r\nJSON Parser - provides more information about\r\nworking with JSON values dynamically.\r\n\r\nAPI Reference: JsonProvider\r\nAPI Reference: JsonValue\r\n\r\n","headings":["JSON Type Provider","Introducing the provider","Inferring types from the sample","Inferring numeric types","Inferring record types","More complex object type on the root level","Type inference hints / inline schemas","Units of measure","Loading WorldBank data","Parsing Twitter stream","Getting and creating GitHub issues","Using JSON provider in a library","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/JsonSchema.html","title":"Using JSON Schema with the JSON Type Provider\r\n","content":"Using JSON Schema with the JSON Type Provider\r\nThe JSON Type Provider allows you to use JSON Schema to provide statically typed\r\naccess to JSON documents, similar to how the XML Type Provider supports XML Schema.\r\nBasic Usage with JSON Schema\r\nLet\u0027s start with a basic JSON Schema example:\r\nlet personSchema =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-07/schema#\u0026quot;,\r\n  \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n  \u0026quot;properties\u0026quot;: {\r\n    \u0026quot;firstName\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;description\u0026quot;: \u0026quot;The person\u0026#39;s first name.\u0026quot;\r\n    },\r\n    \u0026quot;lastName\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;description\u0026quot;: \u0026quot;The person\u0026#39;s last name.\u0026quot;\r\n    },\r\n    \u0026quot;age\u0026quot;: {\r\n      \u0026quot;description\u0026quot;: \u0026quot;Age in years\u0026quot;,\r\n      \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot;,\r\n      \u0026quot;minimum\u0026quot;: 0\r\n    },\r\n    \u0026quot;email\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;format\u0026quot;: \u0026quot;email\u0026quot;\r\n    },\r\n    \u0026quot;phoneNumbers\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;,\r\n      \u0026quot;items\u0026quot;: {\r\n        \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n        \u0026quot;properties\u0026quot;: {\r\n          \u0026quot;type\u0026quot;: {\r\n            \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n            \u0026quot;enum\u0026quot;: [\u0026quot;home\u0026quot;, \u0026quot;work\u0026quot;, \u0026quot;mobile\u0026quot;]\r\n          },\r\n          \u0026quot;number\u0026quot;: {\r\n            \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;\r\n          }\r\n        },\r\n        \u0026quot;required\u0026quot;: [\u0026quot;type\u0026quot;, \u0026quot;number\u0026quot;]\r\n      }\r\n    }\r\n  },\r\n  \u0026quot;required\u0026quot;: [\u0026quot;firstName\u0026quot;, \u0026quot;lastName\u0026quot;]\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n\r\n// Create a type based on the schema\r\n[\u0026lt;Literal\u0026gt;]\r\nlet PersonSchemaLiteral =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-07/schema#\u0026quot;,\r\n  \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n  \u0026quot;properties\u0026quot;: {\r\n    \u0026quot;firstName\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;description\u0026quot;: \u0026quot;The person\u0026#39;s first name.\u0026quot;\r\n    },\r\n    \u0026quot;lastName\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;description\u0026quot;: \u0026quot;The person\u0026#39;s last name.\u0026quot;\r\n    },\r\n    \u0026quot;age\u0026quot;: {\r\n      \u0026quot;description\u0026quot;: \u0026quot;Age in years\u0026quot;,\r\n      \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot;,\r\n      \u0026quot;minimum\u0026quot;: 0\r\n    },\r\n    \u0026quot;email\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;format\u0026quot;: \u0026quot;email\u0026quot;\r\n    },\r\n    \u0026quot;phoneNumbers\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;,\r\n      \u0026quot;items\u0026quot;: {\r\n        \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n        \u0026quot;properties\u0026quot;: {\r\n          \u0026quot;type\u0026quot;: {\r\n            \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n            \u0026quot;enum\u0026quot;: [\u0026quot;home\u0026quot;, \u0026quot;work\u0026quot;, \u0026quot;mobile\u0026quot;]\r\n          },\r\n          \u0026quot;number\u0026quot;: {\r\n            \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;\r\n          }\r\n        },\r\n        \u0026quot;required\u0026quot;: [\u0026quot;type\u0026quot;, \u0026quot;number\u0026quot;]\r\n      }\r\n    }\r\n  },\r\n  \u0026quot;required\u0026quot;: [\u0026quot;firstName\u0026quot;, \u0026quot;lastName\u0026quot;]\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n\r\ntype Person = JsonProvider\u0026lt;Schema=PersonSchemaLiteral\u0026gt;\r\n\r\n// Parse a JSON document that conforms to the schema\r\nlet person =\r\n    Person.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;,\r\n  \u0026quot;lastName\u0026quot;: \u0026quot;Smith\u0026quot;,\r\n  \u0026quot;age\u0026quot;: 42,\r\n  \u0026quot;email\u0026quot;: \u0026quot;john.smith@example.com\u0026quot;,\r\n  \u0026quot;phoneNumbers\u0026quot;: [\r\n    {\r\n      \u0026quot;type\u0026quot;: \u0026quot;home\u0026quot;,\r\n      \u0026quot;number\u0026quot;: \u0026quot;555-1234\u0026quot;\r\n    },\r\n    {\r\n      \u0026quot;type\u0026quot;: \u0026quot;mobile\u0026quot;,\r\n      \u0026quot;number\u0026quot;: \u0026quot;555-6789\u0026quot;\r\n    }\r\n  ]\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\n// Access the strongly typed properties\r\nprintfn \u0026quot;Name: %s %s\u0026quot; person.FirstName person.LastName\r\nprintfn \u0026quot;Age: %A\u0026quot; person.Age\r\nprintfn \u0026quot;Email: %A\u0026quot; person.Email\r\nprintfn \u0026quot;Phone: %s\u0026quot; person.PhoneNumbers.[0].Number\r\n\r\nUsing Schema Files\r\nYou can also load a JSON Schema from a file:\r\n// Assuming you have a schema file:\r\n// type Product = JsonProvider\u0026lt;Schema=\u0026quot;schemas/product.json\u0026quot;\u0026gt;\r\n\r\nValidating JSON Against Schema\r\nWhen using the JSON Provider with the Schema parameter, data validation occurs automatically at parse time\r\nbased on the schema rules:\r\n\r\nProperties are required according to the schema (firstName and lastName)\r\nProperty types match those defined in the schema (age is a non-negative integer)\r\nFormat constraints are checked (email is a valid email format)\r\nPattern constraints are validated (orderId matches the pattern \u0022^ORD-[0-9]{6}$\u0022)\r\nNumeric constraints are enforced (minimum/maximum values)\r\n\r\nHere\u0027s how validation works:\r\n// Valid JSON that conforms to the schema\r\nlet validPerson =\r\n    Person.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;firstName\u0026quot;: \u0026quot;Jane\u0026quot;,\r\n  \u0026quot;lastName\u0026quot;: \u0026quot;Doe\u0026quot;,\r\n  \u0026quot;age\u0026quot;: 35,\r\n  \u0026quot;email\u0026quot;: \u0026quot;jane.doe@example.com\u0026quot;\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nprintfn \u0026quot;Valid JSON: %s %s\u0026quot; validPerson.FirstName validPerson.LastName\r\n\r\n// Invalid JSON that violates schema rules will cause an exception\r\n// Let\u0026#39;s use try-catch to demonstrate validation errors:\r\nlet invalidJson =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;firstName\u0026quot;: \u0026quot;John\u0026quot;,\r\n  \u0026quot;age\u0026quot;: -5\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n\r\n// In a real project when using the Schema parameter, the JsonProvider would validate\r\n// against the schema rules. For the purposes of this demonstration, let\u0026#39;s manually\r\n// validate the JSON against the schema:\r\n\r\n// Create a JSON value from the invalid JSON\r\nlet jsonValue = JsonValue.Parse(invalidJson)\r\n\r\n// Check required fields from the schema\r\nif jsonValue.TryGetProperty(\u0026quot;lastName\u0026quot;).IsNone then\r\n    printfn \u0026quot;Schema validation failed: missing required property \u0026#39;lastName\u0026#39;\u0026quot;\r\n\r\n// Check numeric constraints from the schema\r\nif jsonValue.TryGetProperty(\u0026quot;age\u0026quot;).IsSome \u0026amp;\u0026amp; jsonValue.[\u0026quot;age\u0026quot;].AsInteger() \u0026lt; 0 then\r\n    printfn \u0026quot;Schema validation failed: \u0026#39;age\u0026#39; must be non-negative\u0026quot;\r\n\r\nSchema Constraints and Validation\r\nJSON Schema supports various constraints that are validated:\r\nString Constraints\r\n{\r\n  \u0022type\u0022: \u0022string\u0022,\r\n  \u0022minLength\u0022: 3,\r\n  \u0022maxLength\u0022: 50,\r\n  \u0022pattern\u0022: \u0022^[A-Z][a-z]\u002B$\u0022\r\n}\r\n\r\nNumeric Constraints\r\n{\r\n  \u0022type\u0022: \u0022number\u0022,\r\n  \u0022minimum\u0022: 0,\r\n  \u0022maximum\u0022: 100\r\n}\r\n\r\nArray Constraints\r\n{\r\n  \u0022type\u0022: \u0022array\u0022,\r\n  \u0022items\u0022: {\r\n    \u0022type\u0022: \u0022string\u0022\r\n  },\r\n  \u0022minItems\u0022: 1,\r\n  \u0022maxItems\u0022: 10\r\n}\r\n\r\nObject Constraints\r\n{\r\n  \u0022type\u0022: \u0022object\u0022,\r\n  \u0022required\u0022: [\u0022id\u0022, \u0022name\u0022],\r\n  \u0022properties\u0022: {\r\n    \u0022id\u0022: { \u0022type\u0022: \u0022integer\u0022 },\r\n    \u0022name\u0022: { \u0022type\u0022: \u0022string\u0022 }\r\n  }\r\n}\r\n\r\nWorking with Schema References\r\nJSON Schema allows references to reuse schema definitions:\r\n{\r\n  \u0022$schema\u0022: \u0022http://json-schema.org/draft-07/schema#\u0022,\r\n  \u0022definitions\u0022: {\r\n    \u0022address\u0022: {\r\n      \u0022type\u0022: \u0022object\u0022,\r\n      \u0022properties\u0022: {\r\n        \u0022street\u0022: { \u0022type\u0022: \u0022string\u0022 },\r\n        \u0022city\u0022: { \u0022type\u0022: \u0022string\u0022 },\r\n        \u0022zipCode\u0022: { \u0022type\u0022: \u0022string\u0022 }\r\n      },\r\n      \u0022required\u0022: [\u0022street\u0022, \u0022city\u0022, \u0022zipCode\u0022]\r\n    }\r\n  },\r\n  \u0022type\u0022: \u0022object\u0022,\r\n  \u0022properties\u0022: {\r\n    \u0022billingAddress\u0022: { \u0022$ref\u0022: \u0022#/definitions/address\u0022 },\r\n    \u0022shippingAddress\u0022: { \u0022$ref\u0022: \u0022#/definitions/address\u0022 }\r\n  }\r\n}\r\n\r\nAdvantages of Using JSON Schema\r\n\r\nDocumentation: Schema provides documentation on what properties are available.\r\nValidation: Schema enforces constraints on data types, required properties, etc.\r\nType Safety: Strong typing to prevent errors when working with JSON data.\r\nDiscoverability: Better IntelliSense in your IDE.\r\nConsistency: Ensure all documents follow the same structure.\r\nContract First Development: Define your data contract before implementation.\r\n\r\nJSON Schema Features Supported\r\nThe JSON Schema support in FSharp.Data includes:\r\n\r\nBasic types (string, number, integer, boolean, object, array)\r\nRequired properties\r\nProperty format definitions (date-time, email, etc.)\r\nEnumerations\r\nNested objects and arrays\r\nMinimum/maximum constraints\r\nString patterns and length constraints\r\nReferences ($ref) for reusing schema definitions\r\nValidation of documents against schema\r\n\r\nRequirements and Limitations\r\n\r\nWhen using the Schema parameter, you cannot use the Sample parameter\r\nSchema and SampleIsList parameters are mutually exclusive\r\nCurrently supports JSON Schema Draft-07\r\nJSON Schema references ($ref) support is limited to local references within the schema\r\nSome advanced schema features like dependencies, conditionals, and unevaluatedProperties are not fully supported\r\n\r\nUsing JSON Schema in Your Project\r\nTo use JSON Schema with the JSON Type Provider:\r\n\r\nDefine your schema (in a file or as a string)\r\nCreate a type using JsonProvider\u0026lt;Schema=\u0022path-to-schema.json\u0022\u0026gt; or JsonProvider\u0026lt;Schema=schemaString\u0026gt;\r\nUse the generated type to parse and work with your JSON data\r\nOptionally use the validation functions for runtime validation\r\n\r\nComplete Example with Nested Objects\r\nHere\u0027s a more complex example with nested objects:\r\nlet orderSchema =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-07/schema#\u0026quot;,\r\n  \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n  \u0026quot;properties\u0026quot;: {\r\n    \u0026quot;orderId\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;pattern\u0026quot;: \u0026quot;^ORD-[0-9]{6}$\u0026quot;\r\n    },\r\n    \u0026quot;customer\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n      \u0026quot;properties\u0026quot;: {\r\n        \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot; },\r\n        \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; },\r\n        \u0026quot;email\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;email\u0026quot; }\r\n      },\r\n      \u0026quot;required\u0026quot;: [\u0026quot;id\u0026quot;, \u0026quot;name\u0026quot;]\r\n    },\r\n    \u0026quot;items\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;,\r\n      \u0026quot;items\u0026quot;: {\r\n        \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n        \u0026quot;properties\u0026quot;: {\r\n          \u0026quot;productId\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; },\r\n          \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; },\r\n          \u0026quot;quantity\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot;, \u0026quot;minimum\u0026quot;: 1 },\r\n          \u0026quot;price\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0 }\r\n        },\r\n        \u0026quot;required\u0026quot;: [\u0026quot;productId\u0026quot;, \u0026quot;quantity\u0026quot;, \u0026quot;price\u0026quot;]\r\n      },\r\n      \u0026quot;minItems\u0026quot;: 1\r\n    },\r\n    \u0026quot;totalAmount\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0 },\r\n    \u0026quot;orderDate\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;date-time\u0026quot; }\r\n  },\r\n  \u0026quot;required\u0026quot;: [\u0026quot;orderId\u0026quot;, \u0026quot;customer\u0026quot;, \u0026quot;items\u0026quot;, \u0026quot;totalAmount\u0026quot;, \u0026quot;orderDate\u0026quot;]\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n\r\n// Create a type based on the order schema\r\n[\u0026lt;Literal\u0026gt;]\r\nlet OrderSchemaLiteral =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;$schema\u0026quot;: \u0026quot;http://json-schema.org/draft-07/schema#\u0026quot;,\r\n  \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n  \u0026quot;properties\u0026quot;: {\r\n    \u0026quot;orderId\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;,\r\n      \u0026quot;pattern\u0026quot;: \u0026quot;^ORD-[0-9]{6}$\u0026quot;\r\n    },\r\n    \u0026quot;customer\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n      \u0026quot;properties\u0026quot;: {\r\n        \u0026quot;id\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot; },\r\n        \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; },\r\n        \u0026quot;email\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;email\u0026quot; }\r\n      },\r\n      \u0026quot;required\u0026quot;: [\u0026quot;id\u0026quot;, \u0026quot;name\u0026quot;]\r\n    },\r\n    \u0026quot;items\u0026quot;: {\r\n      \u0026quot;type\u0026quot;: \u0026quot;array\u0026quot;,\r\n      \u0026quot;items\u0026quot;: {\r\n        \u0026quot;type\u0026quot;: \u0026quot;object\u0026quot;,\r\n        \u0026quot;properties\u0026quot;: {\r\n          \u0026quot;productId\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; },\r\n          \u0026quot;name\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot; },\r\n          \u0026quot;quantity\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;integer\u0026quot;, \u0026quot;minimum\u0026quot;: 1 },\r\n          \u0026quot;price\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0 }\r\n        },\r\n        \u0026quot;required\u0026quot;: [\u0026quot;productId\u0026quot;, \u0026quot;quantity\u0026quot;, \u0026quot;price\u0026quot;]\r\n      },\r\n      \u0026quot;minItems\u0026quot;: 1\r\n    },\r\n    \u0026quot;totalAmount\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;number\u0026quot;, \u0026quot;minimum\u0026quot;: 0 },\r\n    \u0026quot;orderDate\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;string\u0026quot;, \u0026quot;format\u0026quot;: \u0026quot;date-time\u0026quot; }\r\n  },\r\n  \u0026quot;required\u0026quot;: [\u0026quot;orderId\u0026quot;, \u0026quot;customer\u0026quot;, \u0026quot;items\u0026quot;, \u0026quot;totalAmount\u0026quot;, \u0026quot;orderDate\u0026quot;]\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n\r\ntype Order = JsonProvider\u0026lt;Schema=OrderSchemaLiteral\u0026gt;\r\n\r\nlet order =\r\n    Order.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n{\r\n  \u0026quot;orderId\u0026quot;: \u0026quot;ORD-123456\u0026quot;,\r\n  \u0026quot;customer\u0026quot;: {\r\n    \u0026quot;id\u0026quot;: 1001,\r\n    \u0026quot;name\u0026quot;: \u0026quot;Alice Smith\u0026quot;,\r\n    \u0026quot;email\u0026quot;: \u0026quot;alice@example.com\u0026quot;\r\n  },\r\n  \u0026quot;items\u0026quot;: [\r\n    {\r\n      \u0026quot;productId\u0026quot;: \u0026quot;PROD-001\u0026quot;,\r\n      \u0026quot;name\u0026quot;: \u0026quot;Laptop\u0026quot;,\r\n      \u0026quot;quantity\u0026quot;: 1,\r\n      \u0026quot;price\u0026quot;: 1299.99\r\n    },\r\n    {\r\n      \u0026quot;productId\u0026quot;: \u0026quot;PROD-002\u0026quot;,\r\n      \u0026quot;name\u0026quot;: \u0026quot;Mouse\u0026quot;,\r\n      \u0026quot;quantity\u0026quot;: 2,\r\n      \u0026quot;price\u0026quot;: 25.99\r\n    }\r\n  ],\r\n  \u0026quot;totalAmount\u0026quot;: 1351.97,\r\n  \u0026quot;orderDate\u0026quot;: \u0026quot;2023-10-01T12:00:00Z\u0026quot;\r\n}\r\n\u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nprintfn \u0026quot;Order: %s\u0026quot; order.OrderId\r\nprintfn \u0026quot;Customer: %s\u0026quot; order.Customer.Name\r\nprintfn \u0026quot;Items: %d\u0026quot; order.Items.Length\r\nprintfn \u0026quot;Total: %.2f\u0026quot; order.TotalAmount\r\nprintfn \u0026quot;Date: %A\u0026quot; order.OrderDate\r\n\r\nSummary\r\nThe JSON Schema support in FSharp.Data provides a powerful way to work with strongly-typed JSON data based on schema definitions. It combines the benefits of static typing with the flexibility of JSON, making it an excellent choice for working with well-defined JSON APIs and data structures.\r\n","headings":["Using JSON Schema with the JSON Type Provider","Basic Usage with JSON Schema","Using Schema Files","Validating JSON Against Schema","Schema Constraints and Validation","String Constraints","Numeric Constraints","Array Constraints","Object Constraints","Working with Schema References","Advantages of Using JSON Schema","JSON Schema Features Supported","Requirements and Limitations","Using JSON Schema in Your Project","Complete Example with Nested Objects","Summary"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/JsonValue.html","title":"JSON Parser\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nJSON Parser\r\nThe F# JSON Type Provider is built on top of an efficient JSON parser written\r\nin F#.\r\nWhen working with well-defined JSON documents, it is easier to use the\r\ntype provider, but in a more dynamic scenario or when writing\r\nquick and simple scripts, the parser might be a simpler option.\r\nLoading JSON documents\r\nTo load a sample JSON document, we first need to reference the FSharp.Data package.\r\nopen FSharp.Data\r\n\r\nThe FSharp.Data namespace contains the JsonValue type that can be used\r\nto parse strings formatted using JSON as follows:\r\nlet info =\r\n    JsonValue.Parse(\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n    { \u0026quot;name\u0026quot;: \u0026quot;Tomas\u0026quot;, \u0026quot;born\u0026quot;: 1985,\r\n      \u0026quot;siblings\u0026quot;: [ \u0026quot;Jan\u0026quot;, \u0026quot;Alexander\u0026quot; ] } \u0026quot;\u0026quot;\u0026quot;\r\n    )\r\n\r\nval info: JsonValue =\r\n  {\r\n  \u0022name\u0022: \u0022Tomas\u0022,\r\n  \u0022born\u0022: 1985,\r\n  \u0022siblings\u0022: [\r\n    \u0022Jan\u0022,\r\n    \u0022Alexander\u0022\r\n  ]\r\n}\r\nThe parsed value can be processed using pattern matching - the JsonValue type\r\nis a discriminated union with cases such as Record, Collection and others that\r\ncan be used to examine the structure.\r\nUsing JSON extensions\r\nWe do not cover this technique in this introduction. Instead, we look at a number\r\nof extensions that become available after opening the JsonExtensions\r\nmodule. Once opened, we can write:\r\n\r\nvalue.AsBoolean() returns the value as boolean if it is either true or false.\r\n\r\nvalue.AsInteger() returns the value as an integer if it is numeric and can be\r\nconverted to an integer; value.AsInteger64(), value.AsDecimal() and\r\nvalue.AsFloat() behave similarly.\r\n\r\nvalue.AsString() returns the value as a string.\r\n\r\nvalue.AsDateTime() parses the string as a DateTime value using either the\r\nISO 8601 format, or using the\r\n\\/Date(...)\\/ JSON format containing number of milliseconds since 1/1/1970.\r\n\r\n\r\nvalue.AsDateTimeOffset() parses the string as a DateTimeOffset value using either the\r\nISO 8601 format, or using the\r\n\\/Date(...[\u002B/-]offset)\\/ JSON format containing number of milliseconds since 1/1/1970,\r\n[\u002B/-] the 4 digit offset. Example- \\/Date(1231456\u002B1000)\\/.\r\n\r\nvalue.AsTimeSpan() parses the string as a TimeSpan value.\r\nvalue.AsGuid() parses the string as a Guid value.\r\n\r\nvalue?child uses the dynamic operator to obtain a record member named child;\r\nalternatively, you can also use value.GetProperty(child) or an indexer\r\nvalue.[child].\r\n\r\n\r\nvalue.TryGetProperty(child) can be used to safely obtain a record member\r\n(if the member is missing or the value is not a record then, TryGetProperty\r\nreturns None).\r\n\r\n\r\n[ for v in value -\u0026gt; v ] treats value as a collection and iterates over it;\r\nalternatively, it is possible to obtain all elements as an array using\r\nvalue.AsArray().\r\n\r\nvalue.Properties() returns a list of all properties of a record node.\r\n\r\nvalue.InnerText() concatenates all text or text in an array\r\n(representing e.g. multi-line string).\r\n\r\n\r\nMethods that may need to parse a numeric value or date (such as AsFloat and\r\nAsDateTime) receive an optional culture parameter.\r\nThe following example shows how to process the sample JSON value:\r\nopen FSharp.Data.JsonExtensions\r\n\r\n// Print name and birth year\r\nlet n = info?name\r\nprintfn \u0026quot;%s (%d)\u0026quot; (info?name.AsString()) (info?born.AsInteger())\r\n\r\n// Print names of all siblings\r\nfor sib in info?siblings do\r\n    printfn \u0026quot;%s\u0026quot; (sib.AsString())\r\n\r\nTomas (1985)\r\nJan\r\nAlexander\r\nval n: JsonValue = \u0022Tomas\u0022\r\nval it: unit = ()\r\nNote that the JsonValue type does not actually implement the IEnumerable\u0026lt;\u0027T\u0026gt;\r\ninterface (meaning that it cannot be passed to Seq.xyz functions). It only has\r\nthe GetEnumerator method, which makes it possible to use it in sequence expressions\r\nand with the for loop.\r\nParsing WorldBank response\r\nTo look at a more complex example, consider a sample document\r\ndata/WorldBank.json which was obtained as a response to\r\na WorldBank request (you can access the WorldBank data more conveniently using\r\na type provider). The document looks as follows:\r\n[ { \u0022page\u0022: 1, \u0022pages\u0022: 1, \u0022total\u0022: 53 },\r\n  [ { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\r\n      \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\r\n      \u0022value\u0022:null,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222000\u0022},\r\n    { \u0022indicator\u0022: {\u0022value\u0022: \u0022Central government debt, total (% of GDP)\u0022},\r\n      \u0022country\u0022: {\u0022id\u0022:\u0022CZ\u0022,\u0022value\u0022:\u0022Czech Republic\u0022},\r\n      \u0022value\u0022:\u002216.6567773464055\u0022,\u0022decimal\u0022:\u00221\u0022,\u0022date\u0022:\u00222010\u0022} ] ]\r\n\r\nThe document is formed by an array that contains a record as the first element\r\nand a collection of data points as the second element. The following code\r\nreads the document and parses it:\r\nlet value = JsonValue.Load(__SOURCE_DIRECTORY__ \u002B \u0026quot;../../data/WorldBank.json\u0026quot;)\r\n\r\nNote that we can also load the data directly from the web, and there\u0027s an\r\nasynchronous version available too:\r\nlet wbReq =\r\n    \u0026quot;https://api.worldbank.org/country/cz/indicator/\u0026quot;\r\n    \u002B \u0026quot;GC.DOD.TOTL.GD.ZS?format=json\u0026quot;\r\n\r\nlet valueAsync = JsonValue.AsyncLoad(wbReq)\r\n\r\nval wbReq: string =\r\n  \u0022https://api.worldbank.org/country/cz/indicator/GC.DOD.TOTL.GD\u0022\u002B[15 chars]\r\nval valueAsync: Async\u0026lt;JsonValue\u0026gt;\r\nTo split the top-level array into the first record (with overall information)\r\nand the collection of data points, we use pattern matching and match the value\r\nagainst the JsonValue.Array constructor:\r\nmatch value with\r\n| JsonValue.Array [| info; data |] -\u0026gt;\r\n    // Print overall information\r\n    let page, pages, total = info?page, info?pages, info?total\r\n    printfn \u0026quot;Showing page %d of %d. Total records %d\u0026quot; (page.AsInteger()) (pages.AsInteger()) (total.AsInteger())\r\n\r\n    // Print every non-null data point\r\n    for record in data do\r\n        if record?value \u0026lt;\u0026gt; JsonValue.Null then\r\n            printfn \u0026quot;%d: %f\u0026quot; (record?date.AsInteger()) (record?value.AsFloat())\r\n| _ -\u0026gt; printfn \u0026quot;failed\u0026quot;\r\n\r\nShowing page 1 of 1. Total records 53\r\n2010: 35.142297\r\n2009: 31.034880\r\n2008: 25.475164\r\n2007: 24.193320\r\n2006: 23.708055\r\n2005: 22.033462\r\n2004: 20.108379\r\n2003: 18.267725\r\n2002: 15.425565\r\n2001: 14.874434\r\n2000: 13.218869\r\n1999: 11.356696\r\n1998: 10.178780\r\n1997: 10.153566\r\n1996: 10.520301\r\n1995: 12.707834\r\n1994: 14.781808\r\n1993: 16.656777\r\nval it: unit = ()\r\nThe value property of a data point is not always available - as demonstrated\r\nabove, the value may be null. In that case, we want to skip the data point.\r\nTo check whether the property is null we simply compare it with JsonValue.Null.\r\nThe date values will be parsed as DateTimeOffset if there is an offset present.\r\nHowever, for a mixed collection of DateTime (that is, without the offset) and\r\nDateTimeOffset values, the type of the collection will be collection of DateTime\r\nafter parsing. Also note that the date and value properties are formatted as strings\r\nin the source file (e.g. \u00221990\u0022) instead of numbers (e.g. 1990). When you try\r\naccessing the value as an integer or float, the JsonValue automatically parses\r\nthe string into the desired format. In general, the API attempts to be as tolerant\r\nas possible when parsing the file.\r\nRelated articles\r\n\r\nJsonValue\r\n\r\nJSON Type Provider - discusses a F# type provider\r\nthat provides type-safe access to JSON data\r\n\r\n\r\nWorldBank Provider - the WorldBank type provider\r\ncan be used to easily access data from the WorldBank\r\n\r\nAPI Reference: JsonValue\r\nAPI Reference: JsonExtensions type\r\nAPI Reference: JsonExtensions module\r\n\r\n","headings":["JSON Parser","Loading JSON documents","Using JSON extensions","Parsing WorldBank response","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/WorldBank.html","title":"WorldBank Provider\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nWorldBank Provider\r\nThe World Bank is an international organization that provides\r\nfinancial and technical assistance to developing countries around the world. As one of the\r\nactivities, the World Bank also collects development indicators and other data about\r\ncountries in the world. The data catalog contains over\r\n8,000 indicators that can be programmatically accessed.\r\nThe WorldBank Type Provider makes the WorldBank data easily accessible to F# programs and\r\nscripts in a type-safe manner. This article provides an introduction.\r\nIntroducing the provider\r\n\r\n    \r\n        \r\n        \r\n            \r\n        \r\n        \r\n    \r\n\r\nThe following example initializes a connection to the WorldBank using the GetDataContext method and then\r\nretrieves the percentage of population who attend universities in the UK:\r\nopen FSharp.Data\r\n\r\nlet data = WorldBankData.GetDataContext()\r\n\r\ndata.Countries.\u0060\u0060United Kingdom\u0060\u0060.Indicators.\u0060\u0060Gross capital formation (% of GDP)\u0060\u0060\r\n|\u0026gt; Seq.maxBy fst\r\n\r\nval data: FSharp.Data.WorldBankData.ServiceTypes.WorldBankDataService\r\nval it: int * float = (2024, 17.89624583)\r\nWhen generating the data context, the WorldBank Type Provider retrieves the list of all\r\ncountries known to the WorldBank and the list of all supported indicators. Both of these\r\ndimensions are provided as properties, so you can use autocomplete to easily discover\r\nvarious data sources. Most of the indicators use longer names, so we need to wrap the name\r\nin \\\u0060\u0060.\r\nThe result of the Gross capital formation (% of GDP) property is a sequence with\r\nvalues for different years. Using Seq.maxBy fst we get the most recent available value.\r\nUsing World Bank data asynchronously\r\nIf you need to download large amounts of data or run the operation without\r\nblocking the caller, then you probably want to use F# asynchronous workflows to perform\r\nthe operation. The FSharp.Data package also provides the WorldBankDataProvider type which takes\r\na number of static parameters. If the Asynchronous parameter is set to true then the\r\ntype provider generates all operations as asynchronous:\r\ntype WorldBank = WorldBankDataProvider\u0026lt;\u0026quot;World Development Indicators\u0026quot;, Asynchronous=true\u0026gt;\r\nWorldBank.GetDataContext()\r\n\r\nThe above snippet specified \u0022World Development Indicators\u0022 as the name of the data\r\nsource (a collection of commonly available indicators) and it sets the optional argument\r\nAsynchronous to true. As a result, properties such as\r\nGross capital formation (% of GDP) will now have a type Async\u0026lt;(int * int)[]\u0026gt; meaning\r\nthat they represent an asynchronous computation that can be started and will eventually\r\nproduce the data.\r\nDownloading data in parallel\r\nTo demonstrate the asynchronous version of the type provider, let\u0027s write code that\r\ndownloads the university enrollment data about a number of countries in parallel.\r\nWe first create a data context and then define an array with some countries we want to\r\nprocess:\r\nlet wb = WorldBank.GetDataContext()\r\n\r\n// Create a list of countries to process\r\nlet countries =\r\n    [| wb.Countries.\u0060\u0060Arab World\u0060\u0060\r\n       wb.Countries.\u0060\u0060European Union\u0060\u0060\r\n       wb.Countries.Australia\r\n       wb.Countries.Brazil\r\n       wb.Countries.Canada\r\n       wb.Countries.Chile\r\n       wb.Countries.Czechia\r\n       wb.Countries.Denmark\r\n       wb.Countries.France\r\n       wb.Countries.Greece\r\n       wb.Countries.\u0060\u0060Low income\u0060\u0060\r\n       wb.Countries.\u0060\u0060High income\u0060\u0060\r\n       wb.Countries.\u0060\u0060United Kingdom\u0060\u0060\r\n       wb.Countries.\u0060\u0060United States\u0060\u0060 |]\r\n\r\nTo download the information in parallel, we can create a list of asynchronous\r\ncomputations, compose them using Async.Parallel and then run the (single) obtained\r\ncomputation to perform all the downloads:\r\n[ for c in countries -\u0026gt; c.Indicators.\u0060\u0060Gross capital formation (% of GDP)\u0060\u0060 ]\r\n|\u0026gt; Async.Parallel\r\n|\u0026gt; Async.RunSynchronously\r\n\r\nval it: Runtime.WorldBank.Indicator array =\r\n  [|Gross capital formation (% of GDP); Gross capital formation (% of GDP);\r\n    Gross capital formation (% of GDP); Gross capital formation (% of GDP);\r\n    Gross capital formation (% of GDP); Gross capital formation (% of GDP);\r\n    Gross capital formation (% of GDP); Gross capital formation (% of GDP);\r\n    Gross capital formation (% of GDP); Gross capital formation (% of GDP);\r\n    Gross capital formation (% of GDP); Gross capital formation (% of GDP);\r\n    Gross capital formation (% of GDP); Gross capital formation (% of GDP)|]\r\nRelated articles\r\n\r\nAPI Reference: WorldBankDataProvider type provider\r\n\r\n","headings":["WorldBank Provider","Introducing the provider","Using World Bank data asynchronously","Downloading data in parallel","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/library/XmlProvider.html","title":"XML Type Provider\r\n","content":"\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nXML Type Provider\r\nThis article demonstrates how to use the XML Type Provider to access XML documents\r\nin a statically typed way. We first look at how the structure is inferred and then\r\ndemonstrate the provider by parsing an RSS feed.\r\nThe XML Type Provider provides statically typed access to XML documents.\r\nIt takes a sample document as an input (or a document containing a root XML node with\r\nmultiple child nodes that are used as samples). The generated type can then be used\r\nto read files with the same structure\r\nIf the loaded file does not match the structure of the sample, a runtime error may occur\r\n(but only when explicitly accessing an element incompatible with the original sample \u2014 e.g. if it is no longer present)\r\nStarting from version 3.0.0 there is also the option of using a schema (XSD) instead of\r\nrelying on samples.\r\nIntroducing the provider\r\nThe type provider is located in the FSharp.Data.dll assembly. Assuming the assembly\r\nis located in the ../../bin directory, we can load it in F# Interactive as follows:\r\n(note we also need a reference to System.Xml.Linq, because the provider uses the\r\nXDocument type internally):\r\n#r \u0026quot;System.Xml.Linq.dll\u0026quot;\r\n\r\nopen FSharp.Data\r\n\r\nInferring type from sample\r\nThe XmlProvider\u0026lt;...\u0026gt; takes one static parameter of type string. The parameter can\r\nbe either a sample XML string or a sample file (relative to the current folder or online\r\naccessible via http or https). It is not likely that this could lead to ambiguities.\r\nThe following sample generates a type that can read simple XML documents with a root node\r\ncontaining two attributes:\r\ntype Author = XmlProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot;\u0026lt;author name=\u0026quot;Paul Feyerabend\u0026quot; born=\u0026quot;1924\u0026quot; /\u0026gt;\u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\nlet sample = Author.Parse(\u0026quot;\u0026quot;\u0026quot;\u0026lt;author name=\u0026quot;Karl Popper\u0026quot; born=\u0026quot;1902\u0026quot; /\u0026gt;\u0026quot;\u0026quot;\u0026quot;)\r\n\r\nprintfn \u0026quot;%s (%d)\u0026quot; sample.Name sample.Born\r\n\r\nThe type provider generates a type Author that has properties corresponding to the\r\nattributes of the root element of the XML document. The types of the properties are\r\ninferred based on the values in the sample document. In this case, the Name property\r\nhas a type string and Born is int.\r\nXML is a quite flexible format, so we could represent the same document differently.\r\nInstead of using attributes, we could use nested nodes (\u0026lt;name\u0026gt; and \u0026lt;born\u0026gt; nested\r\nunder \u0026lt;author\u0026gt;) that directly contain the values:\r\ntype AuthorAlt = XmlProvider\u0026lt;\u0026quot;\u0026lt;author\u0026gt;\u0026lt;name\u0026gt;Karl Popper\u0026lt;/name\u0026gt;\u0026lt;born\u0026gt;1902\u0026lt;/born\u0026gt;\u0026lt;/author\u0026gt;\u0026quot;\u0026gt;\r\nlet doc = \u0026quot;\u0026lt;author\u0026gt;\u0026lt;name\u0026gt;Paul Feyerabend\u0026lt;/name\u0026gt;\u0026lt;born\u0026gt;1924\u0026lt;/born\u0026gt;\u0026lt;/author\u0026gt;\u0026quot;\r\nlet sampleAlt = AuthorAlt.Parse(doc)\r\n\r\nprintfn \u0026quot;%s (%d)\u0026quot; sampleAlt.Name sampleAlt.Born\r\n\r\nPaul Feyerabend (1924)\r\ntype AuthorAlt = XmlProvider\u0026lt;...\u0026gt;\r\nval doc: string =\r\n  \u0022\u0026lt;author\u0026gt;\u0026lt;name\u0026gt;Paul Feyerabend\u0026lt;/name\u0026gt;\u0026lt;born\u0026gt;1924\u0026lt;/born\u0026gt;\u0026lt;/author\u0026gt;\u0022\r\nval sampleAlt: XmlProvider\u0026lt;...\u0026gt;.Author =\r\n  \u0026lt;author\u0026gt;\r\n  \u0026lt;name\u0026gt;Paul Feyerabend\u0026lt;/name\u0026gt;\r\n  \u0026lt;born\u0026gt;1924\u0026lt;/born\u0026gt;\r\n\u0026lt;/author\u0026gt;\r\nval it: unit = ()\r\nThe generated type provides exactly the same API for reading documents following this\r\nconvention (Note that you cannot use AuthorAlt to parse samples that use the\r\nfirst style - the implementation of the types differs, they just provide the same public API.)\r\nThe provider turns a node into a simply typed property only when the node contains just\r\na primitive value and has no children or attributes.\r\nTypes for more complex structure\r\nNow let\u0027s look at a number of examples that have more interesting structure. First of\r\nall, what if a node contains some value, but also has some attributes?\r\ntype Detailed = XmlProvider\u0026lt;\u0026quot;\u0026quot;\u0026quot;\u0026lt;author\u0026gt;\u0026lt;name full=\u0026quot;true\u0026quot;\u0026gt;Karl Popper\u0026lt;/name\u0026gt;\u0026lt;/author\u0026gt;\u0026quot;\u0026quot;\u0026quot;\u0026gt;\r\n\r\nlet info =\r\n    Detailed.Parse(\u0026quot;\u0026quot;\u0026quot;\u0026lt;author\u0026gt;\u0026lt;name full=\u0026quot;false\u0026quot;\u0026gt;Thomas Kuhn\u0026lt;/name\u0026gt;\u0026lt;/author\u0026gt;\u0026quot;\u0026quot;\u0026quot;)\r\n\r\nprintfn \u0026quot;%s (full=%b)\u0026quot; info.Name.Value info.Name.Full\r\n\r\nThomas Kuhn (full=false)\r\ntype Detailed = XmlProvider\u0026lt;...\u0026gt;\r\nval info: XmlProvider\u0026lt;...\u0026gt;.Author =\r\n  \u0026lt;author\u0026gt;\r\n  \u0026lt;name full=\u0022false\u0022\u0026gt;Thomas Kuhn\u0026lt;/name\u0026gt;\r\n\u0026lt;/author\u0026gt;\r\nval it: unit = ()\r\nIf the node cannot be represented as a simple type (like string) then the provider\r\nbuilds a new type with multiple properties. Here, it generates a property Full\r\n(based on the name of the attribute) and infers its type to be boolean. Then it\r\nadds a property with a (special) name Value that returns the content of the element.\r\nTypes for multiple simple elements\r\nAnother interesting case is when there are multiple nodes that contain just a\r\nprimitive value. The following example shows what happens when the root node\r\ncontains multiple \u0026lt;value\u0026gt; nodes (note that if we leave out the parameter to the\r\nParse method, the same text used for the schema will be used as the runtime value).\r\ntype Test = XmlProvider\u0026lt;\u0026quot;\u0026lt;root\u0026gt;\u0026lt;value\u0026gt;1\u0026lt;/value\u0026gt;\u0026lt;value\u0026gt;3\u0026lt;/value\u0026gt;\u0026lt;/root\u0026gt;\u0026quot;\u0026gt;\r\n\r\nfor v in Test.GetSample().Values do\r\n    printfn \u0026quot;%d\u0026quot; v\r\n\r\nThe type provider generates a property Values that returns an array with the\r\nvalues - as the \u0026lt;value\u0026gt; nodes do not contain any attributes or children, they\r\nare turned into int values and so the Values property returns just int[]!\r\nType inference hints / inline schemas\r\nStarting with version 4.2.10 of this package, it\u0027s possible to enable basic type annotations\r\ndirectly in the sample used by the provider, to complete or to override type inference.\r\n(Only basic types are supported. See the reference documentation of the provider for the full list)\r\nThis feature is disabled by default and has to be explicitly enabled with the InferenceMode\r\nstatic parameter.\r\nLet\u0027s consider an example where this can be useful:\r\ntype AmbiguousEntity =\r\n    XmlProvider\u0026lt;\r\n        Sample=\u0026quot;\u0026quot;\u0026quot;\r\n        \u0026lt;Entity Code=\u0026quot;000\u0026quot; Length=\u0026quot;0\u0026quot;/\u0026gt;\r\n        \u0026lt;Entity Code=\u0026quot;123\u0026quot; Length=\u0026quot;42\u0026quot;/\u0026gt;\r\n        \u0026lt;Entity Code=\u0026quot;4E5\u0026quot; Length=\u0026quot;1.83\u0026quot;/\u0026gt;\r\n        \u0026quot;\u0026quot;\u0026quot;,\r\n        SampleIsList=true\r\n     \u0026gt;\r\n\r\nlet code = (AmbiguousEntity.GetSamples()[1]).Code\r\nlet length = (AmbiguousEntity.GetSamples()[1]).Length\r\n\r\ntype AmbiguousEntity = XmlProvider\u0026lt;...\u0026gt;\r\nval code: float = 123.0\r\nval length: decimal = 42M\r\nIn the previous example, Code is inferred as a float,\r\neven though it looks more like it should be a string.\r\n(4E5 is interpreted as an exponential float notation instead of a string)\r\nNow let\u0027s enable inline schemas:\r\nopen FSharp.Data.Runtime.StructuralInference\r\n\r\ntype AmbiguousEntity2 =\r\n    XmlProvider\u0026lt;\r\n        Sample=\u0026quot;\u0026quot;\u0026quot;\r\n        \u0026lt;Entity Code=\u0026quot;typeof{string}\u0026quot; Length=\u0026quot;typeof{float{metre}}\u0026quot;/\u0026gt;\r\n        \u0026lt;Entity Code=\u0026quot;123\u0026quot; Length=\u0026quot;42\u0026quot;/\u0026gt;\r\n        \u0026lt;Entity Code=\u0026quot;4E5\u0026quot; Length=\u0026quot;1.83\u0026quot;/\u0026gt;\r\n        \u0026quot;\u0026quot;\u0026quot;,\r\n        SampleIsList=true,\r\n        InferenceMode=InferenceMode.ValuesAndInlineSchemasOverrides\r\n     \u0026gt;\r\n\r\nlet code2 = (AmbiguousEntity2.GetSamples()[1]).Code\r\nlet length2 = (AmbiguousEntity2.GetSamples()[1]).Length\r\n\r\ntype AmbiguousEntity2 = XmlProvider\u0026lt;...\u0026gt;\r\nval code2: string = \u0022123\u0022\r\nval length2: float\u0026lt;UnitSystems.SI.UnitNames.metre\u0026gt; = 42.0\r\nWith the ValuesAndInlineSchemasOverrides inference mode, the typeof{string} inline schema\r\ntakes priority over the type inferred from other values.\r\nCode is now a string, as we wanted it to be!\r\nNote that an alternative to obtain the same result would have been to replace all the Code values\r\nin the samples with unambiguous string values. (But this can be very cumbersome, especially with big samples)\r\nIf we had used the ValuesAndInlineSchemasHints inference mode instead, our inline schema\r\nwould have had the same precedence as the types inferred from other values, and Code\r\nwould have been inferred as a choice between either a number or a string,\r\nexactly as if we had added another sample with an unambiguous string value for Code.\r\nUnits of measure\r\nInline schemas also enable support for units of measure.\r\nIn the previous example, the Length property is now inferred as a float\r\nwith the metre unit of measure (from the default SI units).\r\nWarning: units of measures are discarded when merged with types without a unit or with a different unit.\r\nAs mentioned previously, with the ValuesAndInlineSchemasHints inference mode,\r\ninline schemas types are merged with other inferred types with the same precedence.\r\nSince values-inferred types never have units, inline-schemas-inferred types will lose their\r\nunit if the sample contains other values...\r\nProcessing philosophers\r\nIn this section, we look at an example that demonstrates how the type provider works\r\non a simple document that lists authors who write about a specific topic. The\r\nsample document data/Writers.xml looks as follows:\r\n\u0026lt;authors topic=\u0022Philosophy of Science\u0022\u0026gt;\r\n  \u0026lt;author name=\u0022Paul Feyerabend\u0022 born=\u00221924\u0022 /\u0026gt;\r\n  \u0026lt;author name=\u0022Thomas Kuhn\u0022 /\u0026gt;\r\n\u0026lt;/authors\u0026gt;\r\n\r\nAt runtime, we use the generated type provider to parse the following string\r\n(which has the same structure as the sample document with the exception that\r\none of the author nodes also contains a died attribute):\r\nlet authors =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;authors topic=\u0026quot;Philosophy of Mathematics\u0026quot;\u0026gt;\r\n    \u0026lt;author name=\u0026quot;Bertrand Russell\u0026quot; /\u0026gt;\r\n    \u0026lt;author name=\u0026quot;Ludwig Wittgenstein\u0026quot; born=\u0026quot;1889\u0026quot; /\u0026gt;\r\n    \u0026lt;author name=\u0026quot;Alfred North Whitehead\u0026quot; died=\u0026quot;1947\u0026quot; /\u0026gt;\r\n  \u0026lt;/authors\u0026gt; \u0026quot;\u0026quot;\u0026quot;\r\n\r\nWhen initializing the XmlProvider, we can pass it a file name or a web URL.\r\nThe Load and AsyncLoad methods allow reading the data from a file or from a web resource. The\r\nParse method takes the data as a string, so we can now print the information as follows:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet ResolutionFolder = __SOURCE_DIRECTORY__\r\n\r\ntype Authors = XmlProvider\u0026lt;\u0026quot;../data/Writers.xml\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\nlet topic = Authors.Parse(authors)\r\n\r\nprintfn \u0026quot;%s\u0026quot; topic.Topic\r\n\r\nfor author in topic.Authors do\r\n    printf \u0026quot; - %s\u0026quot; author.Name\r\n    author.Born |\u0026gt; Option.iter (printf \u0026quot; (%d)\u0026quot;)\r\n    printfn \u0026quot;\u0026quot;\r\n\r\nPhilosophy of Mathematics\r\n - Bertrand Russell\r\n - Ludwig Wittgenstein (1889)\r\n - Alfred North Whitehead\r\n[\u0026lt;Literal\u0026gt;]\r\nval ResolutionFolder: string = \u0022D:\\a\\FSharp.Data\\FSharp.Data\\docs\\library\u0022\r\ntype Authors = XmlProvider\u0026lt;...\u0026gt;\r\nval topic: XmlProvider\u0026lt;...\u0026gt;.Authors =\r\n  \u0026lt;authors topic=\u0022Philosophy of Mathematics\u0022\u0026gt;\r\n    \u0026lt;author name=\u0022Bertrand Russell\u0022 /\u0026gt;\r\n    \u0026lt;author name=\u0022Ludwig Wittgenstein\u0022 born=\u00221889\u0022 /\u0026gt;\r\n    \u0026lt;author name=\u0022Alfred North Whitehead\u0022 died=\u00221947\u0022 /\u0026gt;\r\n  \u0026lt;/authors\u0026gt;\r\nval it: unit = ()\r\nThe value topic has a property Topic (of type string), which returns the value\r\nof the attribute with the same name. It also has a property Authors that returns\r\nan array with all the authors. The Born property is missing for some authors,\r\nso it becomes option\u0026lt;int\u0026gt; and we need to print it using Option.iter.\r\nThe died attribute was not present in the sample used for the inference, so we\r\ncannot obtain it in a statically typed way (although it can still be obtained\r\ndynamically using author.XElement.Attribute(XName.Get(\u0022died\u0022))).\r\nGlobal inference mode\r\nIn the examples shown earlier, an element was never (recursively) contained in an\r\nelement of the same name (for example \u0026lt;author\u0026gt; never contained another \u0026lt;author\u0026gt;).\r\nHowever, when we work with documents such as XHTML files, this can often be the case.\r\nConsider for example, the following sample (a simplified version of\r\ndata/HtmlBody.xml):\r\n\u0026lt;div id=\u0022root\u0022\u0026gt;\r\n  \u0026lt;span\u0026gt;Main text\u0026lt;/span\u0026gt;\r\n  \u0026lt;div id=\u0022first\u0022\u0026gt;\r\n    \u0026lt;div\u0026gt;Second text\u0026lt;/div\u0026gt;\r\n  \u0026lt;/div\u0026gt;\r\n\u0026lt;/div\u0026gt;\r\n\r\nHere, a \u0026lt;div\u0026gt; element can contain other \u0026lt;div\u0026gt; elements, and it is quite clear that\r\nthey should all have the same type - we want to be able to write a recursive function\r\nthat processes \u0026lt;div\u0026gt; elements. To make this possible, you need to set an optional\r\nparameter Global to true:\r\ntype Html = XmlProvider\u0026lt;\u0026quot;../data/HtmlBody.xml\u0026quot;, Global=true, ResolutionFolder=ResolutionFolder\u0026gt;\r\nlet html = Html.GetSample()\r\n\r\nWhen the Global parameter is true, the type provider unifies all elements of the\r\nsame name. This means that all \u0026lt;div\u0026gt; elements have the same type (with a union\r\nof all attributes and all possible child nodes that appear in the sample document).\r\nThe type is located under a type Html, so we can write a printDiv function\r\nthat takes Html.Div and acts as follows:\r\n/// Prints the content of a \u0026lt;div\u0026gt; element\r\nlet rec printDiv (div: Html.Div) =\r\n    div.Spans |\u0026gt; Seq.iter (printfn \u0026quot;%s\u0026quot;)\r\n    div.Divs |\u0026gt; Seq.iter printDiv\r\n\r\n    if div.Spans.Length = 0 \u0026amp;\u0026amp; div.Divs.Length = 0 then\r\n        div.Value |\u0026gt; Option.iter (printfn \u0026quot;%s\u0026quot;)\r\n\r\n// Print the root \u0026lt;div\u0026gt; element with all children\r\nprintDiv html\r\n\r\nMain text\r\nFirst text\r\nAnother text\r\nSecond text\r\nval printDiv: div: XmlProvider\u0026lt;...\u0026gt;.Div -\u0026gt; unit\r\nval it: unit = ()\r\nThe function first prints all text included as \u0026lt;span\u0026gt; (the element never has any\r\nattributes in our sample, so it is inferred as string), and then it recursively prints\r\nthe content of all \u0026lt;div\u0026gt; elements. If the element does not contain nested elements,\r\nthen we print the Value (inner text).\r\nLoading Directly from a File or URL\r\nIn many cases, we might want to define schema using a local sample file, but then directly\r\nload the data from disk or from a URL either synchronously (with Load) or asynchronously\r\n(with AsyncLoad).\r\nFor this example, I am using the US Census data set from https://api.census.gov/data.xml, a sample of\r\nwhich I have used here for ../data/Census.xml. This sample is greatly reduced from the live data, so\r\nthat it contains only the elements and attributes relevant to us:\r\n\u0026lt;census-api\r\n    xmlns=\u0022http://thedataweb.rm.census.gov/api/discovery/\u0022\r\n    xmlns:dcat=\u0022http://www.w3.org/ns/dcat#\u0022\r\n    xmlns:dct=\u0022http://purl.org/dc/terms/\u0022\u0026gt;\r\n    \u0026lt;dct:dataset\u0026gt;\r\n        \u0026lt;dct:title\u0026gt;2006-2010 American Community Survey 5-Year Estimates\u0026lt;/dct:title\u0026gt;\r\n        \u0026lt;dcat:distribution\r\n            dcat:accessURL=\u0022https://api.census.gov/data/2010/acs5\u0022\u0026gt;\r\n        \u0026lt;/dcat:distribution\u0026gt;\r\n    \u0026lt;/dct:dataset\u0026gt;\r\n    \u0026lt;dct:dataset\u0026gt;\r\n        \u0026lt;dct:title\u0026gt;2006-2010 American Community Survey 5-Year Estimates\u0026lt;/dct:title\u0026gt;\r\n        \u0026lt;dcat:distribution\r\n            dcat:accessURL=\u0022https://api.census.gov/data/2010/acs5\u0022\u0026gt;\r\n        \u0026lt;/dcat:distribution\u0026gt;\r\n    \u0026lt;/dct:dataset\u0026gt;\r\n\u0026lt;/census-api\u0026gt;\r\n\r\nWhen doing this for your scenario, be careful to ensure that enough data is given for the provider\r\nto infer the schema correctly. For example, the first level \u0026lt;dct:dataset\u0026gt; element must be included at\r\nleast twice for the provider to infer the Datasets array rather than a single Dataset object.\r\ntype Census = XmlProvider\u0026lt;\u0026quot;../data/Census.xml\u0026quot;, ResolutionFolder=ResolutionFolder\u0026gt;\r\n\r\nlet data = Census.Load(\u0026quot;https://api.census.gov/data.xml\u0026quot;)\r\n\r\nlet apiLinks =\r\n    data.Datasets\r\n    |\u0026gt; Array.map (fun ds -\u0026gt; ds.Title, ds.Distribution.AccessUrl)\r\n    |\u0026gt; Array.truncate 10\r\n\r\ntype Census = XmlProvider\u0026lt;...\u0026gt;\r\nval data: XmlProvider\u0026lt;...\u0026gt;.CensusApi =\r\n  \u0026lt;census-api xmlns=\u0022http://thedataweb.rm.census.gov/api/discovery/\u0022 xmlns:dcat=\u0022http://www.w3.org/ns/dcat#\u0022 xmlns:dct=\u0022http://purl.org/dc/terms/\u0022 xmlns:pod=\u0022https://project-open-data.cio.gov/v1.1/schema/\u0022 xmlns:foaf=\u0022http://xmlns.com/foaf/0.1/\u0022 xmlns:org=\u0022http://www.w3.org/ns/org#\u0022 xmlns:vcard=\u0022http://www.w3.org/2006/vcard/ns#\u0022\u0026gt;\r\n    \u0026lt;dct:dataset vintage=\u00221990\u0022 geographyLink=\u0022http://api.census.gov/data/1990/cps/basic/jan/geography.xml\u0022 variablesLink=\u0022http://api.census.gov/data/1990/cps/basic/jan/variables...\r\nval apiLinks: (string * string) array =\r\n  [|(\u0022Jan 1990 Current Population Survey: Basic Monthly\u0022,\r\n     \u0022http://api.census.gov/data/1990/cps/basic/jan\u0022);\r\n    (\u00221986 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1986/cbp\u0022);\r\n    (\u00221991 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1991/cbp\u0022);\r\n    (\u00221987 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1987/cbp\u0022);\r\n    (\u00221992 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1992/cbp\u0022);\r\n    (\u00221988 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1988/cbp\u0022);\r\n    (\u00221994 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1994/cbp\u0022);\r\n    (\u0022Jul 1990 Current Population Survey: Basic Monthly\u0022,\r\n     \u0022http://api.census.gov/data/1990/cps/basic/jul\u0022);\r\n    (\u00221989 County Business Patterns: Business Patterns\u0022,\r\n     \u0022http://api.census.gov/data/1989/cbp\u0022);\r\n    (\u0022Mar 1989 Current Population Survey: Basic Monthly\u0022,\r\n     \u0022http://api.census.gov/data/1989/cps/basic/mar\u0022)|]\r\nThis US Census data is an interesting dataset with this top level API returning hundreds of other\r\ndatasets each with their own API. Here, we use the Census data to get a list of titles and URLs for\r\nthe lower level APIs.\r\nBringing in Some Async Action\r\nLet\u0027s go one step further and assume here a slightly contrived but certainly plausible example where\r\nwe cache the Census URLs and refresh once in a while. Perhaps we want to load this in the background\r\nand then post each link over (for example) a message queue.\r\nThis is where AsyncLoad comes into play:\r\nlet enqueue (title, apiUrl) =\r\n    // do the real message enqueueing here instead of\r\n    printfn \u0026quot;%s -\u0026gt; %s\u0026quot; title apiUrl\r\n\r\n// helper task which gets scheduled on some background thread somewhere...\r\nlet cacheJanitor () =\r\n    async {\r\n        let! reloadData = Census.AsyncLoad(\u0026quot;https://api.census.gov/data.xml\u0026quot;)\r\n\r\n        reloadData.Datasets\r\n        |\u0026gt; Array.map (fun ds -\u0026gt; ds.Title, ds.Distribution.AccessUrl)\r\n        |\u0026gt; Array.iter enqueue\r\n    }\r\n\r\nval enqueue: title: string * apiUrl: string -\u0026gt; unit\r\nval cacheJanitor: unit -\u0026gt; Async\u0026lt;unit\u0026gt;\r\nReading RSS feeds\r\nTo conclude this introduction with a more interesting example, let\u0027s look at how to parse an\r\nRSS feed. As discussed earlier, we can use relative paths or web addresses when calling\r\nthe type provider:\r\ntype Rss = XmlProvider\u0026lt;\u0026quot;https://tomasp.net/rss.xml\u0026quot;\u0026gt;\r\n\r\nThis code builds a type Rss that represents RSS feeds (with the features that are used\r\non https://tomasp.net). The type Rss provides static methods Parse, Load and AsyncLoad\r\nto construct it - here, we just want to reuse the same URI of the schema, so we\r\nuse the GetSample static method:\r\nlet blog = Rss.GetSample()\r\n\r\nPrinting the title of the RSS feed together with a list of recent posts is now quite\r\neasy - you can simply type blog followed by . and see what the autocompletion\r\noffers. The code looks like this:\r\n// Title is a property returning string\r\nprintfn \u0026quot;%s\u0026quot; blog.Channel.Title\r\n\r\n// Get all item nodes and print title with link\r\nfor item in blog.Channel.Items do\r\n    printfn \u0026quot; - %s (%s)\u0026quot; item.Title item.Link\r\n\r\nTomas Petricek - Languages and tools, open-source, philosophy of science and F# coding\r\n - Choose Your Own Adventure Calculus (http://tomasp.net/blog/2025/adventure-calculus/)\r\n - What can routers at Centre Pompidou teach us about software evolution? (http://tomasp.net/blog/2023/pompidou/)\r\n - Where programs live? Vague spaces and software systems (http://tomasp.net/blog/2023/vague-spaces/)\r\n - The Timeless Way of Programming (http://tomasp.net/blog/2022/timeless-way/)\r\n - No-code, no thought? Substrates for simple programming for all (http://tomasp.net/blog/2022/no-code-substrates/)\r\n - Pop-up from Hell: On the growing opacity of web programs (http://tomasp.net/blog/2021/popup-from-hell/)\r\n - Software designers, not engineers: An interview from alternative universe (http://tomasp.net/blog/2021/software-designers/)\r\n - Is deep learning a new kind of programming? Operationalistic look at programming (http://tomasp.net/blog/2020/learning-and-programming/)\r\n - Creating interactive You Draw bar chart with Compost (http://tomasp.net/blog/2020/youdraw-compost-visualization/)\r\n - Data exploration calculus: Capturing the essence of exploratory data scripting (http://tomasp.net/blog/2020/data-exploration-calculus/)\r\n - On architecture, urban planning and software construction (http://tomasp.net/blog/2020/cities-and-programming/)\r\n - What to teach as the first programming language and why (http://tomasp.net/blog/2019/first-language/)\r\n - What should a Software Engineering course look like? (http://tomasp.net/blog/2019/software-engineering/)\r\n - Write your own Excel in 100 lines of F# (http://tomasp.net/blog/2018/write-your-own-excel/)\r\n - Programming as interaction: A new perspective for programming language research (http://tomasp.net/blog/2018/programming-interaction/)\r\n - Would aliens understand lambda calculus? (http://tomasp.net/blog/2018/alien-lambda-calculus/)\r\n - The design side of programming language design (http://tomasp.net/blog/2017/design-side-of-pl/)\r\n - Getting started with The Gamma just got easier (http://tomasp.net/blog/2017/thegamma-getting-started/)\r\n - Papers we Scrutinize: How to critically read papers (http://tomasp.net/blog/2017/papers-we-scrutinize/)\r\n - The mythology of programming language ideas (http://tomasp.net/blog/2017/programming-mythology/)\r\nval it: unit = ()\r\nTransforming XML\r\nIn this example we will now also create XML in addition to consuming it.\r\nConsider the problem of flattening a data set. Let\u0027s say you have xml data that looks like this:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet customersXmlSample =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;Customers\u0026gt;\r\n    \u0026lt;Customer name=\u0026quot;ACME\u0026quot;\u0026gt;\r\n      \u0026lt;Order Number=\u0026quot;A012345\u0026quot;\u0026gt;\r\n        \u0026lt;OrderLine Item=\u0026quot;widget\u0026quot; Quantity=\u0026quot;1\u0026quot;/\u0026gt;\r\n      \u0026lt;/Order\u0026gt;\r\n      \u0026lt;Order Number=\u0026quot;A012346\u0026quot;\u0026gt;\r\n        \u0026lt;OrderLine Item=\u0026quot;trinket\u0026quot; Quantity=\u0026quot;2\u0026quot;/\u0026gt;\r\n      \u0026lt;/Order\u0026gt;\r\n    \u0026lt;/Customer\u0026gt;\r\n    \u0026lt;Customer name=\u0026quot;Southwind\u0026quot;\u0026gt;\r\n      \u0026lt;Order Number=\u0026quot;A012347\u0026quot;\u0026gt;\r\n        \u0026lt;OrderLine Item=\u0026quot;skyhook\u0026quot; Quantity=\u0026quot;3\u0026quot;/\u0026gt;\r\n        \u0026lt;OrderLine Item=\u0026quot;gizmo\u0026quot; Quantity=\u0026quot;4\u0026quot;/\u0026gt;\r\n      \u0026lt;/Order\u0026gt;\r\n    \u0026lt;/Customer\u0026gt;\r\n  \u0026lt;/Customers\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n\r\nand you want to transform it into something like this:\r\n[\u0026lt;Literal\u0026gt;]\r\nlet orderLinesXmlSample =\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;OrderLines\u0026gt;\r\n    \u0026lt;OrderLine Customer=\u0026quot;ACME\u0026quot; Order=\u0026quot;A012345\u0026quot; Item=\u0026quot;widget\u0026quot; Quantity=\u0026quot;1\u0026quot;/\u0026gt;\r\n    \u0026lt;OrderLine Customer=\u0026quot;ACME\u0026quot; Order=\u0026quot;A012346\u0026quot; Item=\u0026quot;trinket\u0026quot; Quantity=\u0026quot;2\u0026quot;/\u0026gt;\r\n    \u0026lt;OrderLine Customer=\u0026quot;Southwind\u0026quot; Order=\u0026quot;A012347\u0026quot; Item=\u0026quot;skyhook\u0026quot; Quantity=\u0026quot;3\u0026quot;/\u0026gt;\r\n    \u0026lt;OrderLine Customer=\u0026quot;Southwind\u0026quot; Order=\u0026quot;A012347\u0026quot; Item=\u0026quot;gizmo\u0026quot; Quantity=\u0026quot;4\u0026quot;/\u0026gt;\r\n  \u0026lt;/OrderLines\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n\r\nWe\u0027ll create types from both the input and output samples and use the constructors on the types generated by the XmlProvider:\r\ntype InputXml = XmlProvider\u0026lt;customersXmlSample\u0026gt;\r\ntype OutputXml = XmlProvider\u0026lt;orderLinesXmlSample\u0026gt;\r\n\r\nlet orderLines =\r\n    OutputXml.OrderLines\r\n        [| for customer in InputXml.GetSample().Customers do\r\n               for order in customer.Orders do\r\n                   for line in order.OrderLines do\r\n                       yield OutputXml.OrderLine(customer.Name, order.Number, line.Item, line.Quantity) |]\r\n\r\ntype InputXml = XmlProvider\u0026lt;...\u0026gt;\r\ntype OutputXml = XmlProvider\u0026lt;...\u0026gt;\r\nval orderLines: XmlProvider\u0026lt;...\u0026gt;.OrderLines =\r\n  \u0026lt;OrderLines\u0026gt;\r\n  \u0026lt;OrderLine Customer=\u0022ACME\u0022 Order=\u0022A012345\u0022 Item=\u0022widget\u0022 Quantity=\u00221\u0022 /\u0026gt;\r\n  \u0026lt;OrderLine Customer=\u0022ACME\u0022 Order=\u0022A012346\u0022 Item=\u0022trinket\u0022 Quantity=\u00222\u0022 /\u0026gt;\r\n  \u0026lt;OrderLine Customer=\u0022Southwind\u0022 Order=\u0022A012347\u0022 Item=\u0022skyhook\u0022 Quantity=\u00223\u0022 /\u0026gt;\r\n  \u0026lt;OrderLine Customer=\u0022Southwind\u0022 Order=\u0022A012347\u0022 Item=\u0022gizmo\u0022 Quantity=\u00224\u0022 /\u0026gt;\r\n\u0026lt;/OrderLines\u0026gt;\r\nUsing a schema (XSD)\r\nThe Schema parameter can be used (instead of Sample) to specify an XML schema.\r\nThe value of the parameter can be either the name of a schema file or plain text\r\nlike in the following example:\r\ntype Person =\r\n    XmlProvider\u0026lt;\r\n        Schema=\u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\r\n    elementFormDefault=\u0026quot;qualified\u0026quot; attributeFormDefault=\u0026quot;unqualified\u0026quot;\u0026gt;\r\n    \u0026lt;xs:element name=\u0026quot;person\u0026quot;\u0026gt;\r\n      \u0026lt;xs:complexType\u0026gt;\r\n        \u0026lt;xs:sequence\u0026gt;\r\n          \u0026lt;xs:element name=\u0026quot;surname\u0026quot; type=\u0026quot;xs:string\u0026quot;/\u0026gt;\r\n          \u0026lt;xs:element name=\u0026quot;birthDate\u0026quot; type=\u0026quot;xs:date\u0026quot;/\u0026gt;\r\n        \u0026lt;/xs:sequence\u0026gt;\r\n      \u0026lt;/xs:complexType\u0026gt;\r\n    \u0026lt;/xs:element\u0026gt;\r\n  \u0026lt;/xs:schema\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n     \u0026gt;\r\n\r\nlet turing =\r\n    Person.Parse\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;person\u0026gt;\r\n    \u0026lt;surname\u0026gt;Turing\u0026lt;/surname\u0026gt;\r\n    \u0026lt;birthDate\u0026gt;1912-06-23\u0026lt;/birthDate\u0026gt;\r\n  \u0026lt;/person\u0026gt;\r\n  \u0026quot;\u0026quot;\u0026quot;\r\n\r\nprintfn \u0026quot;%s was born in %d\u0026quot; turing.Surname turing.BirthDate.Year\r\n\r\nThe properties of the provided type are derived from the schema instead of being inferred from samples.\r\nUsually, a schema is not specified as plain text but stored in a file like\r\ndata/po.xsd and the uri is set in the Schema parameter:\r\ntype PurchaseOrder = XmlProvider\u0026lt;Schema=\u0026quot;../data/po.xsd\u0026quot;\u0026gt;\r\n\r\nWhen the file includes other schema files, the ResolutionFolder parameter can help locating them.\r\nThe uri may also refer to online resources:\r\ntype RssXsd = XmlProvider\u0026lt;Schema=\u0026quot;https://www.w3schools.com/xml/note.xsd\u0026quot;\u0026gt;\r\n\r\nThe schema is expected to define a root element (a global element with a complex type).\r\nIn case of multiple root elements:\r\ntype TwoRoots =\r\n    XmlProvider\u0026lt;\r\n        Schema=\u0026quot;\u0026quot;\u0026quot;\r\n  \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\r\n    elementFormDefault=\u0026quot;qualified\u0026quot; attributeFormDefault=\u0026quot;unqualified\u0026quot;\u0026gt;\r\n    \u0026lt;xs:element name=\u0026quot;root1\u0026quot;\u0026gt;\r\n      \u0026lt;xs:complexType\u0026gt;\r\n        \u0026lt;xs:attribute name=\u0026quot;foo\u0026quot; type=\u0026quot;xs:string\u0026quot; use=\u0026quot;required\u0026quot; /\u0026gt;\r\n        \u0026lt;xs:attribute name=\u0026quot;fow\u0026quot; type=\u0026quot;xs:int\u0026quot; /\u0026gt;\r\n      \u0026lt;/xs:complexType\u0026gt;\r\n    \u0026lt;/xs:element\u0026gt;\r\n    \u0026lt;xs:element name=\u0026quot;root2\u0026quot;\u0026gt;\r\n      \u0026lt;xs:complexType\u0026gt;\r\n        \u0026lt;xs:attribute name=\u0026quot;bar\u0026quot; type=\u0026quot;xs:string\u0026quot; use=\u0026quot;required\u0026quot; /\u0026gt;\r\n        \u0026lt;xs:attribute name=\u0026quot;baz\u0026quot; type=\u0026quot;xs:date\u0026quot; use=\u0026quot;required\u0026quot; /\u0026gt;\r\n      \u0026lt;/xs:complexType\u0026gt;\r\n    \u0026lt;/xs:element\u0026gt;\r\n  \u0026lt;/xs:schema\u0026gt;\r\n\u0026quot;\u0026quot;\u0026quot;\r\n     \u0026gt;\r\n\r\nthe provided type has an optional property for each alternative:\r\nlet e1 = TwoRoots.Parse \u0026quot;\u0026lt;root1 foo=\u0026#39;aa\u0026#39; fow=\u0026#39;2\u0026#39; /\u0026gt;\u0026quot;\r\n\r\nmatch e1.Root1, e1.Root2 with\r\n| Some x, None -\u0026gt; printfn \u0026quot;Foo = %s and Fow = %A\u0026quot; x.Foo x.Fow\r\n| _ -\u0026gt; failwith \u0026quot;Unexpected\u0026quot;\r\n\r\nlet e2 = TwoRoots.Parse \u0026quot;\u0026lt;root2 bar=\u0026#39;aa\u0026#39; baz=\u0026#39;2017-12-22\u0026#39; /\u0026gt;\u0026quot;\r\n\r\nmatch e2.Root1, e2.Root2 with\r\n| None, Some x -\u0026gt; printfn \u0026quot;Bar = %s and Baz = %O\u0026quot; x.Bar x.Baz\r\n| _ -\u0026gt; failwith \u0026quot;Unexpected\u0026quot;\r\n\r\nFoo = aa and Fow = Some 2\r\nBar = aa and Baz = 12/22/2017 12:00:00 AM\r\nval e1: XmlProvider\u0026lt;...\u0026gt;.Choice = \u0026lt;root1 foo=\u0022aa\u0022 fow=\u00222\u0022 /\u0026gt;\r\nval e2: XmlProvider\u0026lt;...\u0026gt;.Choice = \u0026lt;root2 bar=\u0022aa\u0022 baz=\u00222017-12-22\u0022 /\u0026gt;\r\nval it: unit = ()\r\nCommon XSD constructs: sequence and choice\r\nA sequence is the most common way of structuring elements in a schema.\r\nThe following xsd defines foo as a sequence made of an arbitrary number\r\nof bar elements followed by a single baz element.\r\ntype FooSequence =\r\n    XmlProvider\u0026lt;\r\n        Schema=\u0026quot;\u0026quot;\u0026quot;\r\n    \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\r\n      elementFormDefault=\u0026quot;qualified\u0026quot; attributeFormDefault=\u0026quot;unqualified\u0026quot;\u0026gt;\r\n        \u0026lt;xs:element name=\u0026quot;foo\u0026quot;\u0026gt;\r\n          \u0026lt;xs:complexType\u0026gt;\r\n            \u0026lt;xs:sequence\u0026gt;\r\n              \u0026lt;xs:element name=\u0026quot;bar\u0026quot; type=\u0026quot;xs:int\u0026quot; maxOccurs=\u0026quot;unbounded\u0026quot; /\u0026gt;\r\n              \u0026lt;xs:element name=\u0026quot;baz\u0026quot; type=\u0026quot;xs:date\u0026quot; minOccurs=\u0026quot;1\u0026quot; /\u0026gt;\r\n            \u0026lt;/xs:sequence\u0026gt;\r\n          \u0026lt;/xs:complexType\u0026gt;\r\n        \u0026lt;/xs:element\u0026gt;\r\n    \u0026lt;/xs:schema\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n     \u0026gt;\r\n\r\nhere a valid xml element is parsed as an instance of the provided type, with two properties corresponding to bar and baz elements, where the former is an array in order to hold multiple elements:\r\nlet fooSequence =\r\n    FooSequence.Parse\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n\u0026lt;foo\u0026gt;\r\n    \u0026lt;bar\u0026gt;42\u0026lt;/bar\u0026gt;\r\n    \u0026lt;bar\u0026gt;43\u0026lt;/bar\u0026gt;\r\n    \u0026lt;baz\u0026gt;1957-08-13\u0026lt;/baz\u0026gt;\r\n\u0026lt;/foo\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n\r\nprintfn \u0026quot;%d\u0026quot; fooSequence.Bars.[0] // 42\r\nprintfn \u0026quot;%d\u0026quot; fooSequence.Bars.[1] // 43\r\nprintfn \u0026quot;%d\u0026quot; fooSequence.Baz.Year // 1957\r\n\r\nInstead of a sequence we may have a choice:\r\ntype FooChoice =\r\n    XmlProvider\u0026lt;\r\n        Schema=\u0026quot;\u0026quot;\u0026quot;\r\n    \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\r\n      elementFormDefault=\u0026quot;qualified\u0026quot; attributeFormDefault=\u0026quot;unqualified\u0026quot;\u0026gt;\r\n        \u0026lt;xs:element name=\u0026quot;foo\u0026quot;\u0026gt;\r\n          \u0026lt;xs:complexType\u0026gt;\r\n            \u0026lt;xs:choice\u0026gt;\r\n              \u0026lt;xs:element name=\u0026quot;bar\u0026quot; type=\u0026quot;xs:int\u0026quot; maxOccurs=\u0026quot;unbounded\u0026quot; /\u0026gt;\r\n              \u0026lt;xs:element name=\u0026quot;baz\u0026quot; type=\u0026quot;xs:date\u0026quot; minOccurs=\u0026quot;1\u0026quot; /\u0026gt;\r\n            \u0026lt;/xs:choice\u0026gt;\r\n          \u0026lt;/xs:complexType\u0026gt;\r\n        \u0026lt;/xs:element\u0026gt;\r\n    \u0026lt;/xs:schema\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n     \u0026gt;\r\n\r\nalthough a choice is akin to a union type in F#, the provided type still has\r\nproperties for bar and baz directly available on the foo object; in fact\r\nthe properties representing alternatives in a choice are simply made optional\r\n(notice that for arrays this is not even necessary because an array can be empty).\r\nThis decision is due to technical limitations (discriminated unions are not supported\r\nin type providers) but also preferred because it improves discoverability:\r\nintellisense can show both alternatives. There is a lack of precision but this is not the main goal.\r\nlet fooChoice =\r\n    FooChoice.Parse\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n\u0026lt;foo\u0026gt;\r\n  \u0026lt;baz\u0026gt;1957-08-13\u0026lt;/baz\u0026gt;\r\n\u0026lt;/foo\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n\r\nprintfn \u0026quot;%d items\u0026quot; fooChoice.Bars.Length // 0 items\r\n\r\nmatch fooChoice.Baz with\r\n| Some date -\u0026gt; printfn \u0026quot;%d\u0026quot; date.Year // 1957\r\n| None -\u0026gt; ()\r\n\r\n0 items\r\n1957\r\nval fooChoice: XmlProvider\u0026lt;...\u0026gt;.Foo = \u0026lt;foo\u0026gt;\r\n  \u0026lt;baz\u0026gt;1957-08-13\u0026lt;/baz\u0026gt;\r\n\u0026lt;/foo\u0026gt;\r\nval it: unit = ()\r\nAnother xsd construct to model the content of an element is all, which is used less often and\r\nit\u0027s like a sequence where the order of elements does not matter. The corresponding provided type\r\nin fact is essentially the same as for a sequence.\r\nAdvanced schema constructs\r\nXML Schema provides various extensibility mechanisms. The following example\r\nis a terse summary mixing substitution groups with abstract recursive definitions.\r\ntype Prop =\r\n    XmlProvider\u0026lt;\r\n        Schema=\u0026quot;\u0026quot;\u0026quot;\r\n    \u0026lt;xs:schema xmlns:xs=\u0026quot;http://www.w3.org/2001/XMLSchema\u0026quot;\r\n      elementFormDefault=\u0026quot;qualified\u0026quot; attributeFormDefault=\u0026quot;unqualified\u0026quot;\u0026gt;\r\n        \u0026lt;xs:element name=\u0026quot;Formula\u0026quot; abstract=\u0026quot;true\u0026quot;/\u0026gt;\r\n        \u0026lt;xs:element name=\u0026quot;Prop\u0026quot; type=\u0026quot;xs:string\u0026quot; substitutionGroup=\u0026quot;Formula\u0026quot;/\u0026gt;\r\n        \u0026lt;xs:element name=\u0026quot;And\u0026quot; substitutionGroup=\u0026quot;Formula\u0026quot;\u0026gt;\r\n          \u0026lt;xs:complexType\u0026gt;\r\n            \u0026lt;xs:sequence\u0026gt;\r\n              \u0026lt;xs:element ref=\u0026quot;Formula\u0026quot; minOccurs=\u0026quot;2\u0026quot; maxOccurs=\u0026quot;2\u0026quot;/\u0026gt;\r\n              \u0026lt;/xs:sequence\u0026gt;\r\n          \u0026lt;/xs:complexType\u0026gt;\r\n        \u0026lt;/xs:element\u0026gt;\r\n    \u0026lt;/xs:schema\u0026gt;\u0026quot;\u0026quot;\u0026quot;\r\n     \u0026gt;\r\n\r\nlet formula =\r\n    Prop.Parse\r\n        \u0026quot;\u0026quot;\u0026quot;\r\n    \u0026lt;And\u0026gt;\r\n        \u0026lt;Prop\u0026gt;p1\u0026lt;/Prop\u0026gt;\r\n        \u0026lt;And\u0026gt;\r\n            \u0026lt;Prop\u0026gt;p2\u0026lt;/Prop\u0026gt;\r\n            \u0026lt;Prop\u0026gt;p3\u0026lt;/Prop\u0026gt;\r\n        \u0026lt;/And\u0026gt;\r\n    \u0026lt;/And\u0026gt;\r\n    \u0026quot;\u0026quot;\u0026quot;\r\n\r\nprintfn \u0026quot;%s\u0026quot; formula.Props.[0] // p1\r\nprintfn \u0026quot;%s\u0026quot; formula.Ands.[0].Props.[0] // p2\r\nprintfn \u0026quot;%s\u0026quot; formula.Ands.[0].Props.[1] // p3\r\n\r\np1\r\np2\r\np3\r\ntype Prop = XmlProvider\u0026lt;...\u0026gt;\r\nval formula: XmlProvider\u0026lt;...\u0026gt;.And =\r\n  \u0026lt;And\u0026gt;\r\n        \u0026lt;Prop\u0026gt;p1\u0026lt;/Prop\u0026gt;\r\n        \u0026lt;And\u0026gt;\r\n            \u0026lt;Prop\u0026gt;p2\u0026lt;/Prop\u0026gt;\r\n            \u0026lt;Prop\u0026gt;p3\u0026lt;/Prop\u0026gt;\r\n        \u0026lt;/And\u0026gt;\r\n    \u0026lt;/And\u0026gt;\r\nval it: unit = ()\r\nSubstitution groups are like choices, and the type provider produces an optional\r\nproperty for each alternative.\r\nValidation\r\nThe GetSchema method on the generated type returns an instance\r\nof System.Xml.Schema.XmlSchemaSet that can be used to validate documents:\r\nopen System.Xml.Schema\r\nlet schema = Person.GetSchema()\r\nturing.XElement.Document.Validate(schema, validationEventHandler = null)\r\n\r\nThe Validate method accepts a callback to handle validation issues;\r\npassing null will turn validation errors into exceptions.\r\nThere are overloads to allow other effects (for example setting default values\r\nby enabling the population of the XML tree with the post-schema-validation infoset;\r\nfor details see the documentation).\r\nRemarks on using a schema\r\nThe XML Type Provider supports most XSD features.\r\nAnyway the XML Schema specification is rich and complex and also provides a\r\nfair degree of openness\r\nwhich may be difficult to handle in\r\ndata binding tools; but in FSharp.Data, when providing typed views on elements becomes too challenging\r\n(take for example wildcards) the underlying XElement\r\nis still available.\r\nAn important design decision is to focus on elements and not on complex types; while the latter\r\nmay be valuable in schema design, our goal is simply to obtain an easy and safe way to access xml data.\r\nIn other words, the provided types are not intended for domain modeling (it\u0027s one of the very few cases\r\nwhere optional properties are preferred to sum types).\r\nHence, we do not provide types corresponding to complex types in a schema but only corresponding\r\nto elements (of course, the underlying complex types still affect the shape of the provided types\r\nbut this happens only implicitly).\r\nFocusing on element shapes lets us generate a type that should be essentially the same as one\r\ninferred from a significant set of valid samples. This allows a smooth transition (replacing Sample with Schema)\r\nwhen a schema becomes available.\r\nNote that inline schemas (values of the form typeof{...}) are not supported inside XSD documents.\r\nRelated articles\r\n\r\nUsing JSON provider in a library also applies to XML type provider\r\nAPI Reference: XmlProvider type provider\r\nAPI Reference: XElementExtensions\r\n\r\n","headings":["XML Type Provider","Introducing the provider","Inferring type from sample","Types for more complex structure","Types for multiple simple elements","Type inference hints / inline schemas","Units of measure","Processing philosophers","Global inference mode","Loading Directly from a File or URL","Bringing in Some Async Action","Reading RSS feeds","Transforming XML","Using a schema (XSD)","Common XSD constructs: sequence and choice","Advanced schema constructs","Validation","Remarks on using a schema","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/tutorials/JsonAnonymizer.html","title":"Anonymizing JSON\r\n","content":"\r\nAnonymizing JSON\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nThis tutorial shows how to implement an anonymizer for a JSON document (represented using\r\nthe JsonValue type discussed in JSON parser article)\r\nThis functionality is not directly available in the FSharp.Data package, but it can\r\nbe very easily implemented by recursively walking over the JSON document.\r\nIf you want to use the JSON anonymizer in your code, you can copy the\r\nsource from GitHub and just include it in your project. If you use these\r\nfunctions often and would like to see them in the FSharp.Data package, please submit\r\na feature request.\r\nDISCLAIMER: Don\u0027t use this for sensitive data as it\u0027s just a sample\r\nopen System\r\nopen System.Globalization\r\nopen FSharp.Data\r\n\r\ntype JsonAnonymizer(?propertiesToSkip, ?valuesToSkip) =\r\n\r\n    let propertiesToSkip = Set.ofList (defaultArg propertiesToSkip [])\r\n    let valuesToSkip = Set.ofList (defaultArg valuesToSkip [])\r\n\r\n    let rng = Random()\r\n\r\n    let digits = [| \u0026#39;0\u0026#39; .. \u0026#39;9\u0026#39; |]\r\n    let lowerLetters = [| \u0026#39;a\u0026#39; .. \u0026#39;z\u0026#39; |]\r\n    let upperLetters = [| \u0026#39;A\u0026#39; .. \u0026#39;Z\u0026#39; |]\r\n\r\n    let getRandomChar (c: char) =\r\n        if Char.IsDigit c then\r\n            digits.[rng.Next(10)]\r\n        elif Char.IsLetter c then\r\n            if Char.IsLower c then\r\n                lowerLetters.[rng.Next(26)]\r\n            else\r\n                upperLetters.[rng.Next(26)]\r\n        else\r\n            c\r\n\r\n    let randomize (str: string) =\r\n        String(str.ToCharArray() |\u0026gt; Array.map getRandomChar)\r\n\r\n    let isType testType typ =\r\n        match typ with\r\n        | Runtime.StructuralTypes.InferedType.Primitive(typ, _, _, _) -\u0026gt; typ = testType\r\n        | _ -\u0026gt; false\r\n\r\n    let rec anonymize json =\r\n        match json with\r\n        | JsonValue.String s when valuesToSkip.Contains s -\u0026gt; json\r\n        | JsonValue.String s -\u0026gt;\r\n            let typ =\r\n                Runtime.StructuralInference.inferPrimitiveType\r\n                    Runtime.StructuralInference.defaultUnitsOfMeasureProvider\r\n                    Runtime.StructuralInference.InferenceMode\u0026#39;.ValuesOnly\r\n                    CultureInfo.InvariantCulture\r\n                    s\r\n                    None\r\n\r\n            (if typ |\u0026gt; isType typeof\u0026lt;Guid\u0026gt; then\r\n                 Guid.NewGuid().ToString()\r\n             elif\r\n                 typ |\u0026gt; isType typeof\u0026lt;Runtime.StructuralTypes.Bit0\u0026gt;\r\n                 || typ |\u0026gt; isType typeof\u0026lt;Runtime.StructuralTypes.Bit1\u0026gt;\r\n             then\r\n                 s\r\n             elif typ |\u0026gt; isType typeof\u0026lt;DateTime\u0026gt; then\r\n                 s\r\n             else\r\n                 let prefix, s =\r\n                     if s.StartsWith \u0026quot;http://\u0026quot; then\r\n                         \u0026quot;http://\u0026quot;, s.Substring(\u0026quot;http://\u0026quot;.Length)\r\n                     elif s.StartsWith \u0026quot;https://\u0026quot; then\r\n                         \u0026quot;https://\u0026quot;, s.Substring(\u0026quot;https://\u0026quot;.Length)\r\n                     else\r\n                         \u0026quot;\u0026quot;, s\r\n\r\n                 prefix \u002B randomize s)\r\n            |\u0026gt; JsonValue.String\r\n        | JsonValue.Number d -\u0026gt;\r\n            let typ =\r\n                Runtime.StructuralInference.inferPrimitiveType\r\n                    Runtime.StructuralInference.defaultUnitsOfMeasureProvider\r\n                    Runtime.StructuralInference.InferenceMode\u0026#39;.ValuesOnly\r\n                    CultureInfo.InvariantCulture\r\n                    (d.ToString())\r\n                    None\r\n\r\n            if\r\n                typ |\u0026gt; isType typeof\u0026lt;Runtime.StructuralTypes.Bit0\u0026gt;\r\n                || typ |\u0026gt; isType typeof\u0026lt;Runtime.StructuralTypes.Bit1\u0026gt;\r\n            then\r\n                json\r\n            else\r\n                d.ToString() |\u0026gt; randomize |\u0026gt; Decimal.Parse |\u0026gt; JsonValue.Number\r\n        | JsonValue.Float f -\u0026gt; f.ToString() |\u0026gt; randomize |\u0026gt; Double.Parse |\u0026gt; JsonValue.Float\r\n        | JsonValue.Boolean _\r\n        | JsonValue.Null -\u0026gt; json\r\n        | JsonValue.Record props -\u0026gt;\r\n            props\r\n            |\u0026gt; Array.map (fun (key, value) -\u0026gt;\r\n                let newValue =\r\n                    if propertiesToSkip.Contains key then\r\n                        value\r\n                    else\r\n                        anonymize value\r\n\r\n                key, newValue)\r\n            |\u0026gt; JsonValue.Record\r\n        | JsonValue.Array array -\u0026gt; array |\u0026gt; Array.map anonymize |\u0026gt; JsonValue.Array\r\n\r\n    member _.Anonymize json = anonymize json\r\n\r\nlet json = JsonValue.Load(__SOURCE_DIRECTORY__ \u002B \u0026quot;../../data/TwitterStream.json\u0026quot;)\r\n\r\nprintfn \u0026quot;%O\u0026quot; json\r\n\r\nlet anonymizedJson = (JsonAnonymizer [ \u0026quot;lang\u0026quot; ]).Anonymize json\r\nprintfn \u0026quot;%O\u0026quot; anonymizedJson\r\n\r\nRelated articles\r\n\r\nAPI Reference: JsonValue\r\n\r\nJSON Parser - a tutorial that introduces\r\nJsonValue for working with JSON values dynamically.\r\n\r\n\r\nJSON Type Provider - discusses F# type provider\r\nthat provides type-safe access to JSON data.\r\n\r\n\r\n","headings":["Anonymizing JSON","Related articles"],"type":"content"},{"uri":"https://fsprojects.github.io/FSharp.Data/tutorials/JsonToXml.html","title":"Converting between JSON and XML\r\n","content":"\r\nConverting between JSON and XML\r\n\u0026emsp;\r\n\u0026emsp;\r\n\r\nThis tutorial shows how to implement convert JSON document (represented using\r\nthe JsonValue type discussed in JSON parser article) to an\r\nXML document (represented as XElement) and the other way round.\r\nThis functionality is not directly available in the FSharp.Data package, but it can\r\nbe very easily implemented by recursively walking over the JSON (or XML) document.\r\nIf you want to use the JSON to/from XML conversion in your code, you can copy the\r\nsource from GitHub and just include it in your project. If you use these\r\nfunctions often and would like to see them in the FSharp.Data package, please submit\r\na feature request.\r\nInitialization\r\nWe will be using the LINQ to XML API (available in System.Xml.Linq.dll) and the\r\nJsonValue which is available in the FSharp.Data namespace:\r\n#r \u0026quot;System.Xml.Linq.dll\u0026quot;\r\n\r\nopen System.Xml.Linq\r\nopen FSharp.Data\r\n\r\nIn this script, we create a conversion that returns an easy to process value, but the\r\nconversion is not reversible (e.g. converting JSON to XML and then back to JSON will\r\nproduce a different value).\r\nConverting XML to JSON\r\nAlthough XML and JSON are quite similar formats, there are a number of subtle differences.\r\nIn particular, XML distinguishes between attributes and child elements. Moreover,\r\nall XML elements have a name, while JSON arrays or records are anonymous (but records\r\nhave named fields). Consider, for example, the following XML:\r\n\u0026lt;channel version=\u00221.0\u0022\u0026gt;\r\n  \u0026lt;title text=\u0022Sample input\u0022 /\u0026gt;\r\n  \u0026lt;item value=\u0022First\u0022 /\u0026gt;\r\n  \u0026lt;item value=\u0022Second\u0022 /\u0026gt;\r\n\u0026lt;/channel\u0026gt;\r\n\r\nThe JSON that we produce will ignore the top-level element name (channel). It produces\r\na record that contains a unique field for every attribute and the name of a child element.\r\nIf an element appears multiple times, it is turned into an array:\r\n{ \u0022version\u0022: \u00221.0\u0022,\r\n  \u0022title\u0022: { \u0022text\u0022: \u0022Sample input\u0022 },\r\n  \u0022items\u0022: [ { \u0022value\u0022: \u0022First\u0022 },\r\n             { \u0022value\u0022: \u0022Second\u0022 } ]  }\r\n\r\nAs you can see, the item element has been automatically pluralized to items and the\r\narray contains two record values that consist of the value attribute.\r\nThe conversion function is a recursive function that takes an XElement and produces\r\nJsonValue. It builds JSON records (using JsonValue.Record) and arrays (using\r\nJsonValue.Array). All attribute values are turned into JsonValue.String - the\r\nsample does not implement a more sophisticated conversion that would turn numeric\r\nattributes to a corresponding JSON type:\r\n/// Creates a JSON representation of a XML element\r\nlet rec fromXml (xml: XElement) =\r\n\r\n    // Create a collection of key/value pairs for all attributes\r\n    let attrs =\r\n        [ for attr in xml.Attributes() -\u0026gt; (attr.Name.LocalName, JsonValue.String attr.Value) ]\r\n\r\n    // Function that turns a collection of XElement values\r\n    // into an array of JsonValue (using fromXml recursively)\r\n    let createArray xelems =\r\n        [| for xelem in xelems -\u0026gt; fromXml xelem |] |\u0026gt; JsonValue.Array\r\n\r\n    // Group child elements by their name and then turn all single-\r\n    // element groups into a record (recursively) and all multi-\r\n    // element groups into a JSON array using createArray\r\n    let children =\r\n        xml.Elements()\r\n        |\u0026gt; Seq.groupBy (fun x -\u0026gt; x.Name.LocalName)\r\n        |\u0026gt; Seq.map (fun (key, childs) -\u0026gt;\r\n            match Seq.toList childs with\r\n            | [ child ] -\u0026gt; key, fromXml child\r\n            | children -\u0026gt; key \u002B \u0026quot;s\u0026quot;, createArray children)\r\n\r\n    // Concatenate elements produced for child elements \u0026amp; attributes\r\n    Array.append (Array.ofList attrs) (Array.ofSeq children) |\u0026gt; JsonValue.Record\r\n\r\nConverting JSON to XML\r\nWhen converting JSON value to XML, we fact the same mismatch. Consider the following JSON value:\r\n{ \u0022title\u0022 : \u0022Sample input\u0022,\r\n  \u0022paging\u0022 : { \u0022current\u0022: 1 },\r\n  \u0022items\u0022 : [ \u0022First\u0022, \u0022Second\u0022 ] }\r\n\r\nThe top-level record does not have a name, so our conversion produces a list of XObject\r\nvalues that can be wrapped into an XElement by the user (who has to specify the root\r\nname). Record fields that are a primitive value are turned into attributes, while\r\ncomplex values (array or record) become objects:\r\n\u0026lt;root title=\u0022Sample input\u0022\u0026gt;\r\n  \u0026lt;items\u0026gt;\r\n    \u0026lt;item\u0026gt;First\u0026lt;/item\u0026gt;\r\n    \u0026lt;item\u0026gt;Second\u0026lt;/item\u0026gt;\r\n  \u0026lt;/items\u0026gt;\r\n  \u0026lt;paging current=\u00221\u0022 /\u0026gt;\r\n\u0026lt;/root\u0026gt;\r\n\r\nThe conversion function is, again, implemented as a recursive function. This time, we use\r\npattern matching to distinguish between the different possible cases of JsonValue.\r\nThe cases representing a primitive value simply return the value as obj, while array\r\nand record construct nested element(s) or attribute:\r\n/// Creates an XML representation of a JSON value (works\r\n/// only when the top-level value is an object or an array)\r\nlet toXml (x: JsonValue) =\r\n    // Helper functions for constructing XML\r\n    // attributes and XML elements\r\n    let attr name value =\r\n        XAttribute(XName.Get name, value) :\u0026gt; XObject\r\n\r\n    let elem name (value: obj) =\r\n        XElement(XName.Get name, value) :\u0026gt; XObject\r\n\r\n    // Inner recursive function that implements the conversion\r\n    let rec toXml =\r\n        function\r\n        // Primitive values are returned as objects\r\n        | JsonValue.Null -\u0026gt; null\r\n        | JsonValue.Boolean b -\u0026gt; b :\u0026gt; obj\r\n        | JsonValue.Number number -\u0026gt; number :\u0026gt; obj\r\n        | JsonValue.Float number -\u0026gt; number :\u0026gt; obj\r\n        | JsonValue.String s -\u0026gt; s :\u0026gt; obj\r\n\r\n        // JSON object becomes a collection of XML\r\n        // attributes (for primitives) or child elements\r\n        | JsonValue.Record properties -\u0026gt;\r\n            properties\r\n            |\u0026gt; Array.map (fun (key, value) -\u0026gt;\r\n                match value with\r\n                | JsonValue.String s -\u0026gt; attr key s\r\n                | JsonValue.Boolean b -\u0026gt; attr key b\r\n                | JsonValue.Number n -\u0026gt; attr key n\r\n                | JsonValue.Float n -\u0026gt; attr key n\r\n                | _ -\u0026gt; elem key (toXml value))\r\n            :\u0026gt; obj\r\n\r\n        // JSON array is turned into a\r\n        // sequence of \u0026lt;item\u0026gt; elements\r\n        | JsonValue.Array elements -\u0026gt; elements |\u0026gt; Array.map (fun item -\u0026gt; elem \u0026quot;item\u0026quot; (toXml item)) :\u0026gt; obj\r\n\r\n    // Perform the conversion and cast the result to sequence\r\n    // of objects (may fail for unexpected inputs!)\r\n    (toXml x) :?\u0026gt; XObject seq\r\n\r\nRelated articles\r\n\r\nAPI Reference: JsonValue\r\n\r\nJSON Parser - a tutorial that introduces\r\nJsonValue for working with JSON values dynamically.\r\n\r\n\r\nJSON Type Provider - discusses F# type provider\r\nthat provides type-safe access to JSON data.\r\n\r\n\r\nXML Type Provider - discusses the F# type provider\r\nthat provides type-safe access to XML data.\r\n\r\n\r\n","headings":["Converting between JSON and XML","Initialization","Converting XML to JSON","Converting JSON to XML","Related articles"],"type":"content"}]