// --------------------------------------------------------------------------------------
// XML type provider - methods & types used by the generated erased code
// --------------------------------------------------------------------------------------
namespace FSharp.Data

open System.Xml.Linq

[<AutoOpen>]
/// Extension methods for XElement. It is auto opened.
module XElementExtensions = 

    type XElement with

      /// Sends the XML to the specified uri. Defaults to a POST request.
      member x.Request(uri:string, ?httpMethod, ?headers) =  
        let httpMethod = defaultArg httpMethod HttpMethod.Post
        let headers = defaultArg headers []
        let headers =
            if headers |> List.exists (fst >> ((=) (fst (HttpRequestHeaders.UserAgent ""))))
            then headers
            else HttpRequestHeaders.UserAgent "F# Data XML Type Provider" :: headers
        let headers = HttpRequestHeaders.ContentType HttpContentTypes.Xml :: headers
        Http.Request(
          uri,
          body = TextRequest (x.ToString(SaveOptions.DisableFormatting)),
          headers = headers,
          httpMethod = httpMethod)

      /// Sends the XML to the specified uri. Defaults to a POST request.
      member x.RequestAsync(uri:string, ?httpMethod, ?headers) =
        let httpMethod = defaultArg httpMethod HttpMethod.Post
        let headers = defaultArg headers []
        let headers =
            if headers |> List.exists (fst >> ((=) (fst (HttpRequestHeaders.UserAgent ""))))
            then headers
            else HttpRequestHeaders.UserAgent "F# Data XML Type Provider" :: headers
        let headers = HttpRequestHeaders.ContentType HttpContentTypes.Xml :: headers
        Http.AsyncRequest(
          uri,
          body = TextRequest (x.ToString(SaveOptions.DisableFormatting)),
          headers = headers,
          httpMethod = httpMethod)

namespace FSharp.Data.Runtime

open System
open System.ComponentModel
open System.IO
open System.Globalization
open System.Xml.Linq

#nowarn "10001"

/// Underlying representation of types generated by XmlProvider
[<StructuredFormatDisplay("{_Print}")>]
type XmlElement = 
  
  // NOTE: Using a record here to hide the ToString, GetHashCode & Equals
  // (but since this is used across multiple files, we have explicit Create method)
  { XElement : XElement }
  
  /// [omit]
  [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
  [<CompilerMessageAttribute("This method is intended for use in generated code only.", 10001, IsHidden=true, IsError=false)>]
  member x._Print = x.XElement.ToString()

  /// [omit]
  [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
  [<CompilerMessageAttribute("This method is intended for use in generated code only.", 10001, IsHidden=true, IsError=false)>]
  static member Create(element) =
    { XElement = element }
  
  /// [omit]
  [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
  [<CompilerMessageAttribute("This method is intended for use in generated code only.", 10001, IsHidden=true, IsError=false)>]
  static member Create(reader:TextReader) =    
    use reader = reader
    let text = reader.ReadToEnd()
    let element = XDocument.Parse(text).Root 
    { XElement = element }
  
  /// [omit]
  [<EditorBrowsableAttribute(EditorBrowsableState.Never)>]
  [<CompilerMessageAttribute("This method is intended for use in generated code only.", 10001, IsHidden=true, IsError=false)>]
  static member CreateList(reader:TextReader) = 
    use reader = reader
    let text = reader.ReadToEnd()
    try
      XDocument.Parse(text).Root.Elements()
      |> Seq.map (fun value -> { XElement = value })
      |> Seq.toArray
    with _ when text.TrimStart().StartsWith "<" ->
      XDocument.Parse("<root>" + text + "</root>").Root.Elements()
      |> Seq.map (fun value -> { XElement = value })
      |> Seq.toArray

    override this.ToString() = this._Print

/// Static helper methods called from the generated code for working with XML
type XmlRuntime = 

  // Operations for getting node values and values of attributes
    
  static member TryGetValue(xml:XmlElement) = 
    if String.IsNullOrEmpty(xml.XElement.Value) then None else Some xml.XElement.Value

  static member TryGetAttribute(xml:XmlElement, nameWithNS) = 
    let attr = xml.XElement.Attribute(XName.Get(nameWithNS))
    if attr = null then None else Some attr.Value

  // Operations that obtain children - depending on the inference, we may
  // want to get an array, option (if it may or may not be there) or 
  // just the value (if we think it is always there)

  static member private GetChildrenArray(value:XmlElement, nameWithNS:string) =
    let namesWithNS = nameWithNS.Split [| '|' |]
    let mutable current = value.XElement
    for i = 0 to namesWithNS.Length - 2 do
        if current <> null then
            current <- current.Element(XName.Get namesWithNS.[i])
    let value = current
    if value = null then [| |]
    else [| for c in value.Elements(XName.Get namesWithNS.[namesWithNS.Length - 1]) -> { XElement = c } |]
  
  static member private GetChildOption(value:XmlElement, nameWithNS) =
    match XmlRuntime.GetChildrenArray(value, nameWithNS) with
    | [| it |] -> Some it
    | [| |] -> None
    | array -> failwithf "XML mismatch: Expected zero or one '%s' child, got %d" nameWithNS array.Length

  static member GetChild(value:XmlElement, nameWithNS) =
    match XmlRuntime.GetChildrenArray(value, nameWithNS) with
    | [| it |] -> it
    | array -> failwithf "XML mismatch: Expected exactly one '%s' child, got %d" nameWithNS array.Length

  // Functions that transform specified chidlrens using a transformation
  // function - we need a version for array and option
  // (This is used e.g. when transforming `<a>1</a><a>2</a>` to `int[]`)

  static member ConvertArray<'R>(xml:XmlElement, nameWithNS, f:Func<XmlElement,'R>) : 'R[] = 
    XmlRuntime.GetChildrenArray(xml, nameWithNS) |> Array.map f.Invoke

  static member ConvertOptional<'R>(xml:XmlElement, nameWithNS, f:Func<XmlElement,'R>) =
    XmlRuntime.GetChildOption(xml, nameWithNS) |> Option.map f.Invoke

  static member ConvertOptional2<'R>(xml:XmlElement, nameWithNS, f:Func<XmlElement,'R option>) =
    XmlRuntime.GetChildOption(xml, nameWithNS) |> Option.bind f.Invoke

  /// Returns Some if the specified XmlElement has the specified name
  /// (otherwise None is returned). This is used when the current element
  /// can be one of multiple elements.
  static member ConvertAsName<'R>(xml:XmlElement, nameWithNS, f:Func<XmlElement,'R>) = 
    if xml.XElement.Name = XName.Get(nameWithNS) then Some(f.Invoke xml)
    else None

  /// Returns the contents of the element as a JsonValue
  static member GetJsonValue(xml, cultureStr) = 
    match XmlRuntime.TryGetValue(xml) with
    | Some jsonStr -> JsonDocument.Create(new StringReader(jsonStr), cultureStr)
    | None -> failwithf "XML mismatch: Element doesn't contain value: %A" xml

  /// Tries to return the contents of the element as a JsonValue
  static member TryGetJsonValue(xml, cultureStr) = 
    match XmlRuntime.TryGetValue(xml) with
    | Some jsonStr -> 
        try
            JsonDocument.Create(new StringReader(jsonStr), cultureStr) |> Some
        with _ -> None
    | None -> None

  static member CreateObject(name:string,properties:(string*obj)[], cultureStr) =
    let cultureInfo = TextRuntime.GetCulture cultureStr // i dont know what to do with this
    let sb = Text.StringBuilder().AppendFormat("<{0}",NameUtils.niceCamelName name)
    let attributes, elements = properties |> Array.partition(fun (k,_)->k.EndsWith "#Attribute")
    attributes |> Array.iter(fun (k,v) -> sb.AppendFormat(" {0}=\"{1}\"",NameUtils.niceCamelName <| k.Substring(0,k.LastIndexOf("#Attribute"))  ,v.ToString()) |> ignore )
    sb.Append(">") |> ignore
    elements 
    |> Array.iter(fun (k,v) ->
        match v with
        | :? (XmlElement[]) as xs -> 
            let x = String.concat Environment.NewLine (Array.map (fun x -> sprintf "%s" (x.ToString())) xs)
            sb.Append(x) |> ignore
        | :? (XmlElement) as x -> sb.Append(x.ToString()) |> ignore
        | _ ->  
            sb.AppendFormat("<{0}>{1}</{0}>",k,v.ToString()) |> ignore ) 
    XmlElement.Create(new StringReader(sb.AppendFormat("</{0}>",NameUtils.niceCamelName name).ToString()))
    
