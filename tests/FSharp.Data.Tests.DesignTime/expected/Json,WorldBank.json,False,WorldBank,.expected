class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+ArrayOrWorldBank async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "WorldBank.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+ArrayOrWorldBank async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> JsonProvider+ArrayOrWorldBank
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "WorldBank.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+ArrayOrWorldBank
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+ArrayOrWorldBank
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+ArrayOrWorldBank
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), "")

    static member Parse: text:string -> JsonProvider+ArrayOrWorldBank
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+ArrayOrWorldBank : FDR.IJsonDocument
    member Array: JsonProvider+WorldBank[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetArrayChildByTypeTag(this, "", "Array"), new Func<_,_>(id)))

    member Record: JsonProvider+WorldBank2 with get
    JsonRuntime.GetArrayChildByTypeTag(this, "", "Record@WorldBank")


class JsonProvider+WorldBank : FDR.IJsonDocument
    member Country: JsonProvider+Country with get
    JsonRuntime.GetPropertyPacked(this, "country")

    member Date: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Decimal: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "decimal")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Indicator: JsonProvider+Country with get
    JsonRuntime.GetPropertyPacked(this, "indicator")

    member Value: JsonProvider+DecimalChoice with get
    JsonRuntime.GetPropertyPacked(this, "value")


class JsonProvider+WorldBank2 : FDR.IJsonDocument
    member Page: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Pages: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member PerPage: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "per_page")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Total: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Country : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+DecimalChoice : FDR.IJsonDocument
    member Number: decimal option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDecimal("", Some t.JsonValue), Some t.JsonValue)))


