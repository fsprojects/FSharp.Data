class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "optionals.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "optionals.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.IJsonDocument
    member ArrayOfObjects: JsonProvider+ArrayOfObject[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "arrayOfObjects"), new Func<_,_>(id)))

    member EmptyArrayProperty: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "emptyArrayProperty"), new Func<_,_>(id)))

    member EmptyStringProperty: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "emptyStringProperty")

    member HeterogeneousArray: JsonProvider+IntOrBooleanOrArraysOrheterogeneousArray with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousArray")

    member HeterogeneousRecords: JsonProvider+HeterogeneousRecord[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousRecords"), new Func<_,_>(id)))

    member MultipleElementsArrayProperty: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "multipleElementsArrayProperty"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member NullProperty: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "nullProperty")

    member OneElementArrayProperty: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "oneElementArrayProperty"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member OptionalPrimitives: JsonProvider+OptionalPrimitive[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "optionalPrimitives"), new Func<_,_>(id)))

    member OptionalRecords: JsonProvider+OptionalRecord[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "optionalRecords"), new Func<_,_>(id)))

    member RecordProperty: JsonProvider+RecordProperty with get
    JsonRuntime.GetPropertyPacked(this, "recordProperty")


class JsonProvider+ArrayOfObject : FDR.IJsonDocument
    member HeterogeneousArrayProperty: JsonProvider+NumbersOrBooleanOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousArrayProperty")

    member HeterogeneousOptionalProperty: JsonProvider+IntOrBoolean with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousOptionalProperty")

    member HeterogeneousProperty: JsonProvider+IntOrBooleanOrDateTime with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousProperty")


class JsonProvider+HeterogeneousRecord : FDR.IJsonDocument
    member B: JsonProvider+IntOrBooleanOrArrayOrb with get
    JsonRuntime.GetPropertyPackedOrNull(this, "b")


class JsonProvider+IntOrBooleanOrArraysOrheterogeneousArray : FDR.IJsonDocument
    member Arrays: JsonProvider+NumbersOrBooleanOrheterogeneousArray[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Array", new Func<_,_>(id)))

    member Boolean: bool with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "Boolean")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", Some value.JsonValue), Some value.JsonValue)

    member Number: int with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "Number")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", Some value.JsonValue), Some value.JsonValue)

    member Record: JsonProvider+HeterogeneousArray with get
    JsonRuntime.GetArrayChildByTypeTag(this, "", "Record@heterogeneousArray")


class JsonProvider+OptionalPrimitive : FDR.IJsonDocument
    member NotOptional: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "notOptional")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member NullNotOptional: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "nullNotOptional")

    member OptionalBecauseEmptyString: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseEmptyString"))

    member OptionalBecauseMissing: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseMissing"))

    member OptionalBecauseNull: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseNull"))


class JsonProvider+OptionalRecord : FDR.IJsonDocument
    member NotOptional: JsonProvider+HeterogeneousArray with get
    JsonRuntime.GetPropertyPacked(this, "notOptional")

    member OptionalBecauseEmptyString: JsonProvider+HeterogeneousArray option with get
    JsonRuntime.TryGetPropertyPacked(this, "optionalBecauseEmptyString")

    member OptionalBecauseMissing: JsonProvider+HeterogeneousArray option with get
    JsonRuntime.TryGetPropertyPacked(this, "optionalBecauseMissing")

    member OptionalBecauseNull: JsonProvider+HeterogeneousArray option with get
    JsonRuntime.TryGetPropertyPacked(this, "optionalBecauseNull")


class JsonProvider+RecordProperty : FDR.IJsonDocument
    member BoolProperty: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member DateProperty: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "dateProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member DecimalProperty: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "decimalProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FloatProperty: float with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "floatProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertFloat("", "", value.JsonOpt), value.JsonOpt)

    member GuidProperty: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "guidProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Int64Property: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "int64Property")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member IntProperty: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "intProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StringProperty: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "stringProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+HeterogeneousArray : FDR.IJsonDocument
    member A: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "a")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class JsonProvider+IntOrBoolean : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+IntOrBooleanOrArrayOrb : FDR.IJsonDocument
    member Array: JsonProvider+NumbersOrBooleanOrb option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Array", new Func<_,_>(id)))

    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: JsonProvider+HeterogeneousArray option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Record@b", new Func<_,_>(id)))


class JsonProvider+IntOrBooleanOrDateTime : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDateTime("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+NumbersOrBooleanOrString : FDR.IJsonDocument
    member Boolean: bool with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "Boolean")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", Some value.JsonValue), Some value.JsonValue)

    member Numbers: int[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+NumbersOrBooleanOrheterogeneousArray : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Numbers: int[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: JsonProvider+HeterogeneousArray option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Record@heterogeneousArray", new Func<_,_>(id)))


class JsonProvider+NumbersOrBooleanOrb : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Numbers: int[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: JsonProvider+HeterogeneousArray option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Record@b", new Func<_,_>(id)))


