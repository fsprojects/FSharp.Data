class XmlProvider
    static member AsyncGetSamples: () -> XmlProvider+Choice[] async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.CreateList(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Search.Atom.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Choice async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSamples: () -> XmlProvider+Choice[]
    XmlElement.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Search.Atom.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Choice
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Choice
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Choice
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)))

    static member Parse: text:string -> XmlProvider+Choice
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Choice : FDR.XmlElement
    member Entry: XmlProvider+Entry option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}entry", new Func<_,_>(id)))

    member Id: string option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}id", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                       let value = XmlRuntime.TryGetValue(t)
                                                                                       TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member ItemsPerPage: int option with get
    XmlRuntime.ConvertAsName(this, "{http://a9.com/-/spec/opensearch/1.1/}itemsPerPage", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                          let value = XmlRuntime.TryGetValue(t)
                                                                                                          TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertInteger("", value), value)))

    member Link: XmlProvider+Link2 option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}link", new Func<_,_>(id)))

    member Title: string option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}title", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                          let value = XmlRuntime.TryGetValue(t)
                                                                                          TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member Updated: System.DateTime option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}updated", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                            let value = XmlRuntime.TryGetValue(t)
                                                                                            TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTime("", value), value)))


class XmlProvider+Entry : FDR.XmlElement
    member Author: XmlProvider+Author with get
    XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}author")

    member Content: XmlProvider+Content with get
    XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}content")

    member Geo: XmlProvider+Geo with get
    XmlRuntime.GetChild(this, "{http://api.twitter.com/}geo")

    member Id: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}id"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Lang: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://api.twitter.com/}lang"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Links: XmlProvider+Link[] with get
    XmlRuntime.ConvertArray(this, "{http://www.w3.org/2005/Atom}link", new Func<_,_>(id)))

    member Metadata: XmlProvider+Metadata with get
    XmlRuntime.GetChild(this, "{http://api.twitter.com/}metadata")

    member Published: System.DateTime with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}published"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTime("", value), value)

    member Source: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://api.twitter.com/}source"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Title: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Updated: System.DateTime with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}updated"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTime("", value), value)


class XmlProvider+Link2 : FDR.XmlElement
    member Href: string with get
    let value = XmlRuntime.TryGetAttribute(this, "href")
    TextRuntime.GetNonOptionalValue("Attribute href", TextRuntime.ConvertString(value), value)

    member Rel: string with get
    let value = XmlRuntime.TryGetAttribute(this, "rel")
    TextRuntime.GetNonOptionalValue("Attribute rel", TextRuntime.ConvertString(value), value)

    member Type: string with get
    let value = XmlRuntime.TryGetAttribute(this, "type")
    TextRuntime.GetNonOptionalValue("Attribute type", TextRuntime.ConvertString(value), value)


class XmlProvider+Author : FDR.XmlElement
    member Name: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}name"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Uri: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}uri"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Content : FDR.XmlElement
    member Type: string with get
    let value = XmlRuntime.TryGetAttribute(this, "type")
    TextRuntime.GetNonOptionalValue("Attribute type", TextRuntime.ConvertString(value), value)

    member Value: string with get
    let value = XmlRuntime.TryGetValue(this)
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Geo : FDR.XmlElement

class XmlProvider+Link : FDR.XmlElement
    member Href: string with get
    let value = XmlRuntime.TryGetAttribute(this, "href")
    TextRuntime.GetNonOptionalValue("Attribute href", TextRuntime.ConvertString(value), value)

    member Rel: string with get
    let value = XmlRuntime.TryGetAttribute(this, "rel")
    TextRuntime.GetNonOptionalValue("Attribute rel", TextRuntime.ConvertString(value), value)

    member Type: string with get
    let value = XmlRuntime.TryGetAttribute(this, "type")
    TextRuntime.GetNonOptionalValue("Attribute type", TextRuntime.ConvertString(value), value)


class XmlProvider+Metadata : FDR.XmlElement
    member ResultType: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://api.twitter.com/}result_type"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


