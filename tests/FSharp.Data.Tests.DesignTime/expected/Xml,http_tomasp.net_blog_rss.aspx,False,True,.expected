class XmlProvider
    static member AsyncGetSample: () -> XmlProvider+Rss async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "http://tomasp.net/blog/rss.aspx"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Rss async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri), f)

    static member GetSample: () -> XmlProvider+Rss
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "http://tomasp.net/blog/rss.aspx")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Rss
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Rss
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Rss
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri)))

    static member Parse: text:string -> XmlProvider+Rss
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Rss : FDR.XmlElement
    member Channel: XmlProvider+Channel with get
    XmlRuntime.GetChild(this, "channel")

    member Version: decimal with get
    let value = XmlRuntime.TryGetAttribute(this, "version")
    TextRuntime.GetNonOptionalValue("Attribute version", TextRuntime.ConvertDecimal("", value), value)


class XmlProvider+Channel : FDR.XmlElement
    member Copyright: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "copyright"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Description: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "description"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Items: XmlProvider+Item[] with get
    XmlRuntime.ConvertArray(this, "item", new Func<_,_>(id)))

    member Link: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "link"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Title: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Item : FDR.XmlElement
    member Creator: string option with get
    XmlRuntime.ConvertOptional(this, "{http://dublincore.org/documents/dcmi-namespace/}creator", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                                  let value = XmlRuntime.TryGetValue(t)
                                                                                                                  TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member Description: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "description"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Link: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "link"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member PubDate: System.DateTime with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "pubDate"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTime("", value), value)

    member Summary: string option with get
    XmlRuntime.ConvertOptional(this, "{http://tomasp.net/rss/extensions}summary", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                   let value = XmlRuntime.TryGetValue(t)
                                                                                                   TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member Title: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


