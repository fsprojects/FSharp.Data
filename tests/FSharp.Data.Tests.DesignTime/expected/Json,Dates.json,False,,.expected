class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Dates.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Dates.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.IJsonDocument
    member Anniversary: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "anniversary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Birthdate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "birthdate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member NoTimeZone: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "NoTimeZone")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member UtcTime: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "UtcTime")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)


