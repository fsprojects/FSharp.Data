class XmlProvider
    static member AsyncGetSamples: () -> XmlProvider+Child[] async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.CreateList(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "missingInnerValue.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Child async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSamples: () -> XmlProvider+Child[]
    XmlElement.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "missingInnerValue.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Child
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Child
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Child
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)))

    static member Parse: text:string -> XmlProvider+Child
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Child : FDR.XmlElement
    member A: int option with get
    TextRuntime.ConvertInteger("", XmlRuntime.TryGetAttribute(this, "a"))

    member B: string option with get
    TextRuntime.ConvertString(XmlRuntime.TryGetAttribute(this, "b"))

    member Inner: XmlProvider+Inner option with get
    XmlRuntime.ConvertOptional(this, "inner", new Func<_,_>(id)))


class XmlProvider+Inner : FDR.XmlElement

