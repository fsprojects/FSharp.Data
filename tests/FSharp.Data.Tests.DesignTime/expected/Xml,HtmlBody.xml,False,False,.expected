class XmlProvider
    static member AsyncGetSample: () -> XmlProvider+Div async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "HtmlBody.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Div async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> XmlProvider+Div
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "HtmlBody.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Div
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Div
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Div
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)))

    static member Parse: text:string -> XmlProvider+Div
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Div : FDR.XmlElement
    member Divs: XmlProvider+Div2[] with get
    XmlRuntime.ConvertArray(this, "div", new Func<_,_>(id)))

    member Id: string with get
    let value = XmlRuntime.TryGetAttribute(this, "id")
    TextRuntime.GetNonOptionalValue("Attribute id", TextRuntime.ConvertString(value), value)

    member Span: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "span"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Div2 : FDR.XmlElement
    member Div: string option with get
    XmlRuntime.ConvertOptional(this, "div", new Func<_,_>(fun (t:XmlElement) -> 
                                                             let value = XmlRuntime.TryGetValue(t)
                                                             TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member Id: string with get
    let value = XmlRuntime.TryGetAttribute(this, "id")
    TextRuntime.GetNonOptionalValue("Attribute id", TextRuntime.ConvertString(value), value)

    member Spans: string[] with get
    XmlRuntime.ConvertArray(this, "span", new Func<_,_>(fun (t:XmlElement) -> 
                                                           let value = XmlRuntime.TryGetValue(t)
                                                           TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))


