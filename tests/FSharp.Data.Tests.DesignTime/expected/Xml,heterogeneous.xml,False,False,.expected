class XmlProvider
    static member AsyncGetSample: () -> XmlProvider+Test async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "heterogeneous.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Test async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri), f)

    static member GetSample: () -> XmlProvider+Test
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "heterogeneous.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Test
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Test
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Test
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" uri)))

    static member Parse: text:string -> XmlProvider+Test
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Test : FDR.XmlElement
    member Options: XmlProvider+Options[] with get
    XmlRuntime.ConvertArray(this, "options", new Func<_,_>(id)))


class XmlProvider+Options : FDR.XmlElement
    member Node: XmlProvider+Node with get
    XmlRuntime.GetChild(this, "node")


class XmlProvider+Node : FDR.XmlElement
    member Set: XmlProvider+SetChoice with get
    XmlRuntime.TryGetAttribute(this, "set")


class XmlProvider+SetChoice : string option
    member Boolean: bool option with get
    TextRuntime.ConvertBoolean("", this)

    member Number: int option with get
    TextRuntime.ConvertInteger("", this)

    member String: string option with get
    TextRuntime.ConvertString(this)


