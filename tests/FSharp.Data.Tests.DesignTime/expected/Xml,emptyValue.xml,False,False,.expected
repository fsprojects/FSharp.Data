class XmlProvider
    static member AsyncGetSample: () -> XmlProvider+Foo async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "emptyValue.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Foo async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> XmlProvider+Foo
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "emptyValue.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Foo
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Foo
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Foo
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)))

    static member Parse: text:string -> XmlProvider+Foo
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Foo : FDR.XmlElement
    member A: string with get
    let value = XmlRuntime.TryGetAttribute(this, "a")
    TextRuntime.GetNonOptionalValue("Attribute a", TextRuntime.ConvertString(value), value)


