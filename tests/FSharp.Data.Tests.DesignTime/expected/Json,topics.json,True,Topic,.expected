class JsonProvider
    static member AsyncLoad: uri:string -> JsonProvider+Topic[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonRuntime.ConvertArray(JsonDocument.Create(t, ""), new Func<_,_>(id))))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member Load: stream:System.IO.Stream -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StreamReader(stream)) :> TextReader), ""), new Func<_,_>(id)))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(reader, ""), new Func<_,_>(id)))

    static member Load: uri:string -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)), ""), new Func<_,_>(id)))

    static member Parse: text:string -> JsonProvider+Topic[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StringReader(text)) :> TextReader), ""), new Func<_,_>(id)))


class JsonProvider+Topic : FDR.IJsonDocument
    member Categories: JsonProvider+Category[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "categories"), new Func<_,_>(id)))

    member CategoryIds: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "category-ids"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member CourseIds: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "course-ids"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Courses: JsonProvider+Course[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "courses"), new Func<_,_>(id)))

    member Display: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "display")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Instructor: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "instructor")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Language: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "language")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LargeIcon: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "large_icon")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Photo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "photo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PreviewLink: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "preview_link")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SelfServiceCourseId: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "self_service_course_id")

    member ShortDescription: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ShortName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SmallIcon: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "small_icon")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SmallIconHover: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "small_icon_hover")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SubtitleLanguagesCsv: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "subtitle_languages_csv"))

    member Universities: JsonProvider+University[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "universities"), new Func<_,_>(id)))

    member UniversityIds: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "university-ids"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member UniversityLogo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "university_logo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Video: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "video")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Visibility: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "visibility")


class JsonProvider+Category : FDR.IJsonDocument
    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member MailingListId: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "mailing_list_id")

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ShortName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Course : FDR.IJsonDocument
    member AceCloseDate: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "ace_close_date")

    member AceOpenDate: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "ace_open_date")

    member AceSemesterHours: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "ace_semester_hours")

    member AceTrackPriceDisplay: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "ace_track_price_display")

    member Active: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "active")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member AuthReviewCompletionDate: FDR.JsonDocument option with get
    JsonRuntime.TryGetPropertyPacked(this, "auth_review_completion_date")

    member CertificateDescription: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "certificate_description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CertificatesReady: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "certificates_ready")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CheggSessionId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "chegg_session_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreatorId: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "creator_id")

    member Deployed: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "deployed")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member DurationString: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "duration_string")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member EligibleForAce: JsonProvider+BooleanChoice with get
    JsonRuntime.GetPropertyPacked(this, "eligible_for_ACE")

    member EligibleForCertificates: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "eligible_for_certificates")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member EligibleForSignatureTrack: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "eligible_for_signature_track")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member EndDate: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "end_date")

    member GradesReleaseDate: JsonProvider+DateTimeChoice with get
    JsonRuntime.GetPropertyPacked(this, "grades_release_date")

    member GradingPolicyDistinction: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "grading_policy_distinction")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member GradingPolicyNormal: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "grading_policy_normal")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member HomeLink: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "home_link")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Instructors: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "instructors"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Name: JsonProvider+IntOrString with get
    JsonRuntime.GetPropertyPacked(this, "name")

    member NotifiedSubscribers: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "notified_subscribers")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ProctoredExamCompletionDate: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "proctored_exam_completion_date")

    member Record: JsonProvider+Record with get
    JsonRuntime.GetPropertyPacked(this, "record")

    member SignatureTrackCertificateCombinedSignature: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track_certificate_combined_signature")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SignatureTrackCertificateDesignId: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "signature_track_certificate_design_id")

    member SignatureTrackCertificateSignatureBlurb: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track_certificate_signature_blurb")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SignatureTrackCloseTime: JsonProvider+DateTimeChoice with get
    JsonRuntime.GetPropertyPacked(this, "signature_track_close_time")

    member SignatureTrackLastChanceTime: JsonProvider+DateTimeChoice with get
    JsonRuntime.GetPropertyPacked(this, "signature_track_last_chance_time")

    member SignatureTrackOpenTime: JsonProvider+DateTimeChoice with get
    JsonRuntime.GetPropertyPacked(this, "signature_track_open_time")

    member SignatureTrackPrice: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "signature_track_price")

    member SignatureTrackRegistrationOpen: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track_registration_open")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member SignatureTrackRegularPrice: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "signature_track_regular_price")

    member StartDate: JsonProvider+DateTimeChoice with get
    JsonRuntime.GetPropertyPacked(this, "start_date")

    member StartDateString: JsonProvider+StringOrDateTime with get
    JsonRuntime.GetPropertyPacked(this, "start_date_string")

    member StartDay: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "start_day")

    member StartMonth: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "start_month")

    member StartYear: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "start_year")

    member StatementDesignId: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "statement_design_id")

    member Status: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Textbooks: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "textbooks")

    member TopicId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "topic_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member UniversityLogo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "university_logo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+IntChoice : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+University : FDR.IJsonDocument
    member AbbrName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "abbr_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member BackgroundColor: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "background_color")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Banner: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "banner")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ChinaMirror: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "china_mirror"))

    member ClassLogo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "class_logo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Display: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "display")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Favicon: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "favicon")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member HomeLink: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "home_link")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member LandingPageBanner: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "landing_page_banner")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Location: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "location")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LocationCity: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "location_city")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LocationCountry: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "location_country")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LocationLat: JsonProvider+DecimalChoice with get
    JsonRuntime.GetPropertyPacked(this, "location_lat")

    member LocationLng: JsonProvider+DecimalChoice with get
    JsonRuntime.GetPropertyPacked(this, "location_lng")

    member LocationState: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "location_state")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Logo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "logo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MailingListId: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "mailing_list_id")

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PartnerType: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "partner_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member PrimaryColor: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "primary_color")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member RectangularLogoSvg: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "rectangular_logo_svg")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ShortName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "short_name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SquareLogo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "square_logo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SquareLogoSource: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "square_logo_source")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SquareLogoSvg: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "square_logo_svg")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Website: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "website")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WebsiteFacebook: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "website_facebook")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WebsiteTwitter: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "website_twitter")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WebsiteYoutube: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "website_youtube")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Wordmark: FDR.JsonDocument with get
    JsonRuntime.GetPropertyPacked(this, "wordmark")


class JsonProvider+BooleanChoice : FDR.IJsonDocument
    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+DateTimeChoice : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDateTime("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+DecimalChoice : FDR.IJsonDocument
    member Number: decimal option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDecimal("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+IntOrString : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+Record : FDR.IJsonDocument
    member AceGrade: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "ace_grade")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member AchievementLevel: JsonProvider+IntChoice with get
    JsonRuntime.GetPropertyPacked(this, "achievement_level")

    member AuthenticatedOverall: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "authenticated_overall")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member GradeDistinction: JsonProvider+DecimalChoice with get
    JsonRuntime.GetPropertyPacked(this, "grade_distinction")

    member GradeNormal: JsonProvider+DecimalChoice with get
    JsonRuntime.GetPropertyPacked(this, "grade_normal")

    member IsEnrolledForProctoredExam: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "is_enrolled_for_proctored_exam")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member PassedAce: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "passed_ace")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ShareForWork: JsonProvider+BooleanChoice with get
    JsonRuntime.GetPropertyPacked(this, "share_for_work")

    member SignatureTrack: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "signature_track")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member VerifyCertId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "verify_cert_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WithGradeCertId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "with_grade_cert_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+StringOrDateTime : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDateTime("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


