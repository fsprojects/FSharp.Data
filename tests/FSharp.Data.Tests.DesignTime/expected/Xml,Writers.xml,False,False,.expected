class XmlProvider
    static member AsyncGetSample: () -> XmlProvider+Authors async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Writers.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Authors async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri), f)

    static member GetSample: () -> XmlProvider+Authors
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" "Writers.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Authors
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Authors
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Authors
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<SOURCE_DIRECTORY>\..\FSharp.Data.Tests\Data" "" uri)))

    static member Parse: text:string -> XmlProvider+Authors
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Authors : FDR.XmlElement
    member Authors: XmlProvider+Author[] with get
    XmlRuntime.ConvertArray(this, "author", new Func<_,_>(id)))

    member Topic: string with get
    let value = XmlRuntime.TryGetAttribute(this, "topic")
    TextRuntime.GetNonOptionalValue("Attribute topic", TextRuntime.ConvertString(value), value)


class XmlProvider+Author : FDR.XmlElement
    member Born: int option with get
    TextRuntime.ConvertInteger("", XmlRuntime.TryGetAttribute(this, "born"))

    member Name: string with get
    let value = XmlRuntime.TryGetAttribute(this, "name")
    TextRuntime.GetNonOptionalValue("Attribute name", TextRuntime.ConvertString(value), value)


