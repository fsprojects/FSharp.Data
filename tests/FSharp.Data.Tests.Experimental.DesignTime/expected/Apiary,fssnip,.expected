class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member Snippet: ApiaryProvider+Snippet with get
    (this :> InternalApiaryContext)


class ApiaryProvider+Snippet : FDR.InternalApiaryContext
    member AsyncGetSnippet: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Snippet2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/1/snippet/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+SnippetList[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/1/snippet"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetSnippet: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Snippet2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/1/snippet/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+SnippetList[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/1/snippet"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+Snippet2 : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Formatted: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "formatted")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Likes: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "likes")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Link: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "link")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Published: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "published")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Tags: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "tags"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SnippetList : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Likes: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "likes")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Link: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "link")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Published: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "published")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


