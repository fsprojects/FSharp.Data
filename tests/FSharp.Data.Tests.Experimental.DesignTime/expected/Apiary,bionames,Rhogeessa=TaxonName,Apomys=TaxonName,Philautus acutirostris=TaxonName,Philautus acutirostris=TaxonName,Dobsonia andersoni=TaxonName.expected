class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member ApiLookupPhp: query:string * string list -> headers:string * string list -> ApiaryProvider+ApiLookupPhp
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/bionames-api/api_lookup.php"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncApiLookupPhp: query:string * string list -> headers:string * string list -> ApiaryProvider+ApiLookupPhp async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/bionames-api/api_lookup.php"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSearch: taxonName:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Search async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/search/{TaxonName}"
                               Arguments = [| ("{TaxonName}",
                                               taxonName) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Authors: ApiaryProvider+Authors with get
    (this :> InternalApiaryContext)

    member Bionames: ApiaryProvider+Bionames with get
    (this :> InternalApiaryContext)

    member Id: ApiaryProvider+Id with get
    (this :> InternalApiaryContext)

    member Journals: ApiaryProvider+Journals with get
    (this :> InternalApiaryContext)

    member Name: ApiaryProvider+Name with get
    (this :> InternalApiaryContext)

    member Search: taxonName:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Search
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/search/{TaxonName}"
          Arguments = [| ("{TaxonName}",
                          taxonName) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Taxon: ApiaryProvider+Taxon with get
    (this :> InternalApiaryContext)


class ApiaryProvider+ApiLookupPhp : FDR.IJsonDocument
    member Author: ApiaryProvider+Author[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "author"), new Func<_,_>(id)))

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Identifier: FDR.ApiaryDocument with get
    JsonRuntime.GetPropertyPacked(this, "identifier")

    member Journal: ApiaryProvider+Journal with get
    JsonRuntime.GetPropertyPacked(this, "journal")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Authors : FDR.InternalApiaryContext
    member Giaretta: ApiaryProvider+Giaretta with get
    this

    member Lastname: ApiaryProvider+Lastname with get
    this

    member Manning: ApiaryProvider+Manning with get
    this

    member SGiaretta: ApiaryProvider+SGiaretta with get
    this


class ApiaryProvider+Bionames : FDR.InternalApiaryContext
    member OpenurlCtxVer9882004RfeIdBiostor23654RftValFmtInfoOfi: ApiaryProvider+OpenurlCtxVer9882004RfeIdBiostor23654RftValFmtInfoOfi with get
    this


class ApiaryProvider+Id : FDR.InternalApiaryContext
    member 7278b4840ef8b708f87625a5e6cc84d7: ApiaryProvider+7278b4840ef8b708f87625a5e6cc84d7 with get
    this

    member AsyncFfdaea1678d7dad01843234facb20e8d: query:string * string list -> headers:string * string list -> ApiaryProvider+IdFfdaea1678d7dad01843234facb20e8d async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/id/ffdaea1678d7dad01843234facb20e8d"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Doi: ApiaryProvider+Doi with get
    this

    member Ffdaea1678d7dad01843234facb20e8d: query:string * string list -> headers:string * string list -> ApiaryProvider+IdFfdaea1678d7dad01843234facb20e8d
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/id/ffdaea1678d7dad01843234facb20e8d"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Journals : FDR.InternalApiaryContext
    member Issn: ApiaryProvider+Issn with get
    this


class ApiaryProvider+Name : FDR.InternalApiaryContext
    member Apomys: ApiaryProvider+Apomys with get
    this

    member AsyncName: taxonName:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Name2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/name/{TaxonName}"
                               Arguments = [| ("{TaxonName}",
                                               taxonName) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member BufoA: ApiaryProvider+BufoA with get
    this

    member DobsoniaAndersoni: ApiaryProvider+DobsoniaAndersoni with get
    this

    member EuthymiaSaussurei: ApiaryProvider+EuthymiaSaussurei with get
    this

    member Name: taxonName:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Name2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/name/{TaxonName}"
          Arguments = [| ("{TaxonName}",
                          taxonName) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Search : FDR.IJsonDocument
    member Results: ApiaryProvider+Results with get
    JsonRuntime.GetPropertyPacked(this, "results")

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Taxon : FDR.InternalApiaryContext
    member Gbif: ApiaryProvider+Gbif with get
    this


class ApiaryProvider+7278b4840ef8b708f87625a5e6cc84d7 : FDR.InternalApiaryContext

class ApiaryProvider+Apomys : FDR.InternalApiaryContext

class ApiaryProvider+Author : FDR.IJsonDocument
    member Firstname: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "firstname")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Lastname: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lastname")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+BufoA : FDR.InternalApiaryContext
    member AsyncSuggestions: query:string * string list -> headers:string * string list -> ApiaryProvider+NameBufoASuggestions async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/name/Bufo a/suggestions"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Suggestions: query:string * string list -> headers:string * string list -> ApiaryProvider+NameBufoASuggestions
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/name/Bufo a/suggestions"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+DobsoniaAndersoni : FDR.InternalApiaryContext
    member AsyncDidyoumean: taxonName:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+NameDobsoniaAndersoniDidyoumean async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/name/{TaxonName}/didyoumean"
                               Arguments = [| ("{TaxonName}",
                                               taxonName) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Didyoumean: taxonName:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+NameDobsoniaAndersoniDidyoumean
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/name/{TaxonName}/didyoumean"
          Arguments = [| ("{TaxonName}",
                          taxonName) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Doi : FDR.InternalApiaryContext
    member 105479: ApiaryProvider+105479 with get
    this


class ApiaryProvider+EuthymiaSaussurei : FDR.InternalApiaryContext
    member AsyncRelated: query:string * string list -> headers:string * string list -> ApiaryProvider+NameEuthymiaSaussureiRelated async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/name/Euthymia saussurei/related"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Related: query:string * string list -> headers:string * string list -> ApiaryProvider+NameEuthymiaSaussureiRelated
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/name/Euthymia saussurei/related"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Gbif : FDR.InternalApiaryContext
    member 4812886: query:string * string list -> headers:string * string list -> ApiaryProvider+TaxonGbif4812886
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/taxon/gbif/4812886"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Async4812886: query:string * string list -> headers:string * string list -> ApiaryProvider+TaxonGbif4812886 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/taxon/gbif/4812886"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)


class ApiaryProvider+Giaretta : FDR.InternalApiaryContext

class ApiaryProvider+IdFfdaea1678d7dad01843234facb20e8d : FDR.IJsonDocument
    member Author: ApiaryProvider+Author[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "author"), new Func<_,_>(id)))

    member CitationString: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "citation_string")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Identifier: ApiaryProvider+Identifier[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "identifier"), new Func<_,_>(id)))

    member Journal: ApiaryProvider+Journal2 with get
    JsonRuntime.GetPropertyPacked(this, "journal")

    member Provenance: ApiaryProvider+Provenance with get
    JsonRuntime.GetPropertyPacked(this, "provenance")

    member Publisher: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "publisher")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Rev: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_rev")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Issn : FDR.InternalApiaryContext
    member 0006324: ApiaryProvider+0006324 with get
    this


class ApiaryProvider+Journal : FDR.IJsonDocument
    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Pages: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Volume: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "volume")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Lastname : FDR.InternalApiaryContext
    member AsyncSmith: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthorsLastnameSmith async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/authors/lastname/Smith"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Smith: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthorsLastnameSmith
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/authors/lastname/Smith"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Manning : FDR.InternalApiaryContext
    member AsyncCoauthors: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthorsManningCoauthors async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/authors/R B Manning/coauthors"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Coauthors: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthorsManningCoauthors
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/authors/R B Manning/coauthors"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Name2 : FDR.IJsonDocument
    member Clusters: ApiaryProvider+Cluster[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "clusters"), new Func<_,_>(id)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+OpenurlCtxVer9882004RfeIdBiostor23654RftValFmtInfoOfi : FDR.InternalApiaryContext
    member AsyncFmtKevMtxJournalGenreArticleRftAtitleNewGenusAndSpeciesOfMealybugFromThePhilippineIslands28Homoptera3Pseudococcidae29RftJtitleProceedingsOfTheBiologicalSocietyOfWashingtonRftIssn0006324RftVolume80RftSpage27RftEpage29RftAulastWilliamsRftAuWilliamsRftDate1967: query:string * string list -> headers:string * string list -> ApiaryProvider+BionamesOpenurlCtxVer9882004RfeIdBiostor23654RftValFmtInfoOfiFmtKevMtxJournalGenreArticleRftAtitleNewGenusAndSpeciesOfMealybugFromThePhilippineIslands28Homoptera3Pseudococcidae29RftJtitleProceedingsOfTheBiologicalSocietyOfWashingtonRftIssn0006324RftVolume80RftSpage27RftEpage29RftAulastWilliamsRftAuWilliamsRftDate1967 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/bionames/openurl?ctx_ver=Z39.88-2004&rfe_id=biostor%2F83654&rft_val_fmt=info:ofi/fmt:kev:mtx:journal&genre=article&rft.atitle=A+new+genus+and+species+of+mealybug+from+the+Philippine+Islands+%28Homoptera%3A+Pseudococcidae%29&rft.jtitle=Proceedings+of+The+Biological+Society+of+Washington&rft.issn=0006-324X&rft.volume=80&rft.spage=27&rft.epage=29&rft.aulast=Williams&rft.au=D+J+Williams&rft.date=1967"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member FmtKevMtxJournalGenreArticleRftAtitleNewGenusAndSpeciesOfMealybugFromThePhilippineIslands28Homoptera3Pseudococcidae29RftJtitleProceedingsOfTheBiologicalSocietyOfWashingtonRftIssn0006324RftVolume80RftSpage27RftEpage29RftAulastWilliamsRftAuWilliamsRftDate1967: query:string * string list -> headers:string * string list -> ApiaryProvider+BionamesOpenurlCtxVer9882004RfeIdBiostor23654RftValFmtInfoOfiFmtKevMtxJournalGenreArticleRftAtitleNewGenusAndSpeciesOfMealybugFromThePhilippineIslands28Homoptera3Pseudococcidae29RftJtitleProceedingsOfTheBiologicalSocietyOfWashingtonRftIssn0006324RftVolume80RftSpage27RftEpage29RftAulastWilliamsRftAuWilliamsRftDate1967
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/bionames/openurl?ctx_ver=Z39.88-2004&rfe_id=biostor%2F83654&rft_val_fmt=info:ofi/fmt:kev:mtx:journal&genre=article&rft.atitle=A+new+genus+and+species+of+mealybug+from+the+Philippine+Islands+%28Homoptera%3A+Pseudococcidae%29&rft.jtitle=Proceedings+of+The+Biological+Society+of+Washington&rft.issn=0006-324X&rft.volume=80&rft.spage=27&rft.epage=29&rft.aulast=Williams&rft.au=D+J+Williams&rft.date=1967"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Results : FDR.IJsonDocument
    member Facets: ApiaryProvider+Facets with get
    JsonRuntime.GetPropertyPacked(this, "facets")


class ApiaryProvider+SGiaretta : FDR.InternalApiaryContext
    member AsyncPublicationsFieldsTitleThumbnailYearPages: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthorsSGiarettaPublicationsFieldsTitleThumbnailYearPages async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/authors/A A sGiaretta/publications?fields=title,thumbnail,year,pages"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member PublicationsFieldsTitleThumbnailYearPages: query:string * string list -> headers:string * string list -> ApiaryProvider+AuthorsSGiarettaPublicationsFieldsTitleThumbnailYearPages
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/authors/A A sGiaretta/publications?fields=title,thumbnail,year,pages"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+0006324 : FDR.InternalApiaryContext
    member AsyncGeometry: query:string * string list -> headers:string * string list -> ApiaryProvider+JournalsIssn0006324Geometry async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/journals/issn/0006-324X/geometry"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Geometry: query:string * string list -> headers:string * string list -> ApiaryProvider+JournalsIssn0006324Geometry
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/journals/issn/0006-324X/geometry"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+105479 : FDR.InternalApiaryContext
    member AsyncSi009638011013284465: query:string * string list -> headers:string * string list -> ApiaryProvider+IdDoi105479Si009638011013284465 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/bionames-api/id/doi/10.5479/si.00963801.101-3284.465"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Si009638011013284465: query:string * string list -> headers:string * string list -> ApiaryProvider+IdDoi105479Si009638011013284465
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/bionames-api/id/doi/10.5479/si.00963801.101-3284.465"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+AuthorsLastnameSmith : FDR.IJsonDocument
    member Firstnames: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "firstnames"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuthorsManningCoauthors : FDR.IJsonDocument
    member Coauthors: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "coauthors"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuthorsSGiarettaPublicationsFieldsTitleThumbnailYearPages : FDR.IJsonDocument
    member Publications: ApiaryProvider+Publication[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "publications"), new Func<_,_>(id)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+BionamesOpenurlCtxVer9882004RfeIdBiostor23654RftValFmtInfoOfiFmtKevMtxJournalGenreArticleRftAtitleNewGenusAndSpeciesOfMealybugFromThePhilippineIslands28Homoptera3Pseudococcidae29RftJtitleProceedingsOfTheBiologicalSocietyOfWashingtonRftIssn0006324RftVolume80RftSpage27RftEpage29RftAulastWilliamsRftAuWilliamsRftDate1967 : FDR.IJsonDocument
    member ContextObject: ApiaryProvider+ContextObject with get
    JsonRuntime.GetPropertyPacked(this, "context_object")

    member Results: ApiaryProvider+Result[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "results"), new Func<_,_>(id)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Cluster : FDR.IJsonDocument
    member GenusPart: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "genusPart")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member NameComplete: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "nameComplete")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Names: ApiaryProvider+Name3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "names"), new Func<_,_>(id)))

    member NomenclaturalCode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "nomenclaturalCode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Rev: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_rev")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SpecificEpithet: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "specificEpithet")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TaxonAuthor: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "taxonAuthor")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Facets : FDR.IJsonDocument
    member Article: ApiaryProvider+Article with get
    JsonRuntime.GetPropertyPacked(this, "article")

    member Generic: ApiaryProvider+Generic with get
    JsonRuntime.GetPropertyPacked(this, "generic")

    member NameCluster: ApiaryProvider+NameCluster with get
    JsonRuntime.GetPropertyPacked(this, "nameCluster")

    member TaxonConcept: ApiaryProvider+TaxonConcept with get
    JsonRuntime.GetPropertyPacked(this, "taxonConcept")


class ApiaryProvider+Identifier : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Journal2 : FDR.IJsonDocument
    member Identifier: ApiaryProvider+Identifier[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "identifier"), new Func<_,_>(id)))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Pages: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+NameBufoASuggestions : FDR.IJsonDocument
    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Suggestions: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "suggestions"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+NameDobsoniaAndersoniDidyoumean : FDR.IJsonDocument
    member Names: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "names"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+NameEuthymiaSaussureiRelated : FDR.IJsonDocument
    member Related: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "related"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Provenance : FDR.IJsonDocument
    member Crossref: ApiaryProvider+Crossref with get
    JsonRuntime.GetPropertyPacked(this, "crossref")

    member Mysql: ApiaryProvider+Mysql with get
    JsonRuntime.GetPropertyPacked(this, "mysql")


class ApiaryProvider+TaxonGbif4812886 : FDR.IJsonDocument
    member Ancestors: ApiaryProvider+Ancestor[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "ancestors"), new Func<_,_>(id)))

    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CanonicalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "canonicalName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Children: ApiaryProvider+Child[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "children"), new Func<_,_>(id)))

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member NameAccordingTo: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "nameAccordingTo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ParentId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "parent_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Rev: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_rev")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ScientificName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "scientificName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Source: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "source")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SourceIdentifier: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sourceIdentifier")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TaxonRank: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "taxonRank")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Ancestor : FDR.IJsonDocument
    member Author: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "author"))

    member CanonicalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "canonicalName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ScientificName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "scientificName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SourceIdentifier: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sourceIdentifier")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TaxonRank: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "taxonRank")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Article : FDR.IJsonDocument
    member 160e947e2f9cc037d8d3355cf3bc1083: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "160e947e2f9cc037d8d3355cf3bc1083")

    member 1f702d6ade7ef44f6d5348954c70e5b3: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "1f702d6ade7ef44f6d5348954c70e5b3")

    member 2f407d2e908d4ae2b045b7ea61a3bf55: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "2f407d2e908d4ae2b045b7ea61a3bf55")

    member 681ea7fa138e3fc89701699983e87caf: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "681ea7fa138e3fc89701699983e87caf")

    member 8fa514961f972e19b106538f54c4a985: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "8fa514961f972e19b106538f54c4a985")

    member 9a98776716c5dbbe4a606ba8c979f846: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "9a98776716c5dbbe4a606ba8c979f846")

    member 9e842f089e0976d9982851948da8fe1e: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "9e842f089e0976d9982851948da8fe1e")


class ApiaryProvider+Child : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CanonicalName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "canonicalName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ScientificName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "scientificName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SourceIdentifier: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sourceIdentifier")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TaxonRank: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "taxonRank")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ContextObject : FDR.IJsonDocument
    member Referent: ApiaryProvider+Referent with get
    JsonRuntime.GetPropertyPacked(this, "referent")

    member ReferringEntity: ApiaryProvider+ReferringEntity with get
    JsonRuntime.GetPropertyPacked(this, "referring_entity")

    member Version: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "version")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Crossref : FDR.IJsonDocument
    member Time: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "time")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Generic : FDR.IJsonDocument
    member 885a1e02ad511a6f6b9feb7e6e94eff3: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "885a1e02ad511a6f6b9feb7e6e94eff3")


class ApiaryProvider+IdDoi105479Si009638011013284465 : FDR.IJsonDocument
    member Doc: ApiaryProvider+Doc with get
    JsonRuntime.GetPropertyPacked(this, "doc")

    member Id: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "key")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Value: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)


class ApiaryProvider+JournalsIssn0006324Geometry : FDR.IJsonDocument
    member Coordinates: decimal[][] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "coordinates"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDecimal("", Some t.JsonValue), Some t.JsonValue)))))

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Mysql : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Modified: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "modified")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Name3 : FDR.IJsonDocument
    member GenusPart: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "genusPart")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member NameComplete: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "nameComplete")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member NomenclaturalCode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "nomenclaturalCode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member RankString: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "rankString")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SpecificEpithet: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "specificEpithet")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TaxonAuthor: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "taxonAuthor"))


class ApiaryProvider+NameCluster : FDR.IJsonDocument
    member Cluster1268815: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/1268815")

    member Cluster1665550: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/1665550")

    member Cluster18036: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/18036")

    member Cluster2730132: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/2730132")

    member Cluster277699: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/277699")

    member Cluster427071: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/427071")

    member Cluster445712: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/445712")

    member Cluster4491271: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/4491271")

    member Cluster700163: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/700163")

    member Cluster940246: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "cluster/940246")


class ApiaryProvider+Publication : FDR.IJsonDocument
    member Pages: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ThumbnailUrl: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "thumbnail_url"))

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result : FDR.IJsonDocument
    member Id: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Match: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "match")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Reference: ApiaryProvider+Reference with get
    JsonRuntime.GetPropertyPacked(this, "reference")

    member Triple: ApiaryProvider+NumbersOrString with get
    JsonRuntime.GetPropertyPacked(this, "triple")


class ApiaryProvider+TaxonConcept : FDR.IJsonDocument
    member Gbif2432269: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "gbif/2432269")

    member Ncbi153294: ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 with get
    JsonRuntime.GetPropertyPacked(this, "ncbi/153294")


class ApiaryProvider+160e947e2f9cc037d8d3355cf3bc1083 : FDR.IJsonDocument
    member Count: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Term: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "term")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Doc : FDR.IJsonDocument
    member Author: ApiaryProvider+Author[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "author"), new Func<_,_>(id)))

    member CitationString: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "citation_string")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Identifier: ApiaryProvider+Identifier2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "identifier"), new Func<_,_>(id)))

    member Journal: ApiaryProvider+Journal2 with get
    JsonRuntime.GetPropertyPacked(this, "journal")

    member Provenance: ApiaryProvider+Provenance2 with get
    JsonRuntime.GetPropertyPacked(this, "provenance")

    member Publisher: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "publisher")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Rev: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_rev")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Thumbnail: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "thumbnail")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+NumbersOrString : FDR.IJsonDocument
    member GetNumbers: () -> int[]
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "String")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", Some value.JsonValue), Some value.JsonValue)


class ApiaryProvider+Reference : FDR.IJsonDocument
    member Author: ApiaryProvider+Author[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "author"), new Func<_,_>(id)))

    member CitationString: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "citation_string")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Identifier: ApiaryProvider+Identifier3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "identifier"), new Func<_,_>(id)))

    member Journal: ApiaryProvider+Journal3 with get
    JsonRuntime.GetPropertyPacked(this, "journal")

    member Provenance: ApiaryProvider+Provenance3 with get
    JsonRuntime.GetPropertyPacked(this, "provenance")

    member Rev: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "_rev")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Thumbnail: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "thumbnail")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Referent : FDR.IJsonDocument
    member Aulast: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "aulast")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Author: ApiaryProvider+Author2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "author"), new Func<_,_>(id)))

    member Date: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Genre: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "genre")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Journal: ApiaryProvider+Journal3 with get
    JsonRuntime.GetPropertyPacked(this, "journal")

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ReferringEntity : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Author2 : FDR.IJsonDocument
    member Forename: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "forename")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Lastname: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lastname")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Identifier2 : FDR.IJsonDocument
    member Id: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPacked(this, "id")

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Identifier3 : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Journal3 : FDR.IJsonDocument
    member Identifier: ApiaryProvider+Identifier[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "identifier"), new Func<_,_>(id)))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Pages: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "pages")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Volume: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "volume")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Provenance2 : FDR.IJsonDocument
    member Biostor: ApiaryProvider+Crossref with get
    JsonRuntime.GetPropertyPacked(this, "biostor")

    member Crossref: ApiaryProvider+Crossref with get
    JsonRuntime.GetPropertyPacked(this, "crossref")

    member Mysql: ApiaryProvider+Mysql with get
    JsonRuntime.GetPropertyPacked(this, "mysql")


class ApiaryProvider+Provenance3 : FDR.IJsonDocument
    member Biostor: ApiaryProvider+Biostor with get
    JsonRuntime.GetPropertyPacked(this, "biostor")

    member Mysql: ApiaryProvider+Mysql with get
    JsonRuntime.GetPropertyPacked(this, "mysql")


class ApiaryProvider+Biostor : FDR.IJsonDocument
    member Time: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "time")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+IntOrString : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


