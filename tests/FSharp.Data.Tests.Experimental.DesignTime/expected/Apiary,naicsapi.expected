class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member AsyncQ: year:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Q async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v0/q?year={year}"
                               Arguments = [| ("{year}",
                                               year) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncQ: year:string -> code:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Q2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v0/q?year={year}&code={code}"
                               Arguments = [| ("{year}",
                                               year)
                                              ("{code}",
                                               code) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncQ: year:string -> code:string -> above:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Q3[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v0/q?year={year}&code={code}&above={above}"
                               Arguments = [| ("{year}",
                                               year)
                                              ("{code}",
                                               code)
                                              ("{above}",
                                               above) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncQ: year:string -> code:string -> below:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Item[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v0/q?year={year}&code={code}&below={below}"
                               Arguments = [| ("{year}",
                                               year)
                                              ("{code}",
                                               code)
                                              ("{below}",
                                               below) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncS: year:string -> terms:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Root[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v0/s?year={year}&terms={terms}"
                               Arguments = [| ("{year}",
                                               year)
                                              ("{terms}",
                                               terms) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Q: year:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Q
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v0/q?year={year}"
          Arguments = [| ("{year}",
                          year) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Q: year:string -> code:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Q2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v0/q?year={year}&code={code}"
          Arguments = [| ("{year}",
                          year)
                         ("{code}",
                          code) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Q: year:string -> code:string -> above:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Q3[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/v0/q?year={year}&code={code}&above={above}"
                                   Arguments = [| ("{year}",
                                                   year)
                                                  ("{code}",
                                                   code)
                                                  ("{above}",
                                                   above) |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Q: year:string -> code:string -> below:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Item[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/v0/q?year={year}&code={code}&below={below}"
                                   Arguments = [| ("{year}",
                                                   year)
                                                  ("{code}",
                                                   code)
                                                  ("{below}",
                                                   below) |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member S: year:string -> terms:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Root[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Accept:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/v0/s?year={year}&terms={terms}"
                                   Arguments = [| ("{year}",
                                                   year)
                                                  ("{terms}",
                                                   terms) |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+Item : FDR.IJsonDocument
    member Code: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "code"))

    member SeqNo: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "seq_no"))

    member Title: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "title"))

    member Trilateral: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "trilateral"))


class ApiaryProvider+Q : FDR.IJsonDocument
    member Items: ApiaryProvider+Item[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "items"), new Func<_,_>(id)))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Year: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Q2 : FDR.IJsonDocument
    member Code: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Index: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "index"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member SeqNo: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "seq_no")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Q3 : FDR.IJsonDocument
    member Code: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member SeqNo: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "seq_no")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Trilateral: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "trilateral")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Root : FDR.IJsonDocument
    member Code: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Index: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "index"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member SeqNo: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "seq_no")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Title: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "title")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Trilateral: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "trilateral"))


