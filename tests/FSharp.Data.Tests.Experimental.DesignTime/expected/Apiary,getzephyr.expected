class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member AsyncAttachment: entityId:string -> entityType:string -> query:string * string list -> headers:string * string list -> FDR.IJsonDocument async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:multipart/form-data", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/jira_server/rest/zapi/latest/attachment?entityId={entityId}&entityType={entityType}"
                               Arguments = [| ("{entityId}",
                                               entityId)
                                              ("{entityType}",
                                               entityType) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetAudit: query:string * string list -> headers:string * string list -> ApiaryProvider+Audit2 async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/audit"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetIssues: query:string * string list -> headers:string * string list -> ApiaryProvider+Issues async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/issues"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncLicense: query:string * string list -> headers:string * string list -> ApiaryProvider+License async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/license"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncModuleInfo: query:string * string list -> headers:string * string list -> ApiaryProvider+ModuleInfo async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/moduleInfo"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSystemInfo: query:string * string list -> headers:string * string list -> ApiaryProvider+SystemInfo async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/systemInfo"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Attachment: ApiaryProvider+Attachment with get
    (this :> InternalApiaryContext)

    member Attachment: entityId:string -> entityType:string -> query:string * string list -> headers:string * string list -> FDR.IJsonDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:multipart/form-data", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/jira_server/rest/zapi/latest/attachment?entityId={entityId}&entityType={entityType}"
          Arguments = [| ("{entityId}",
                          entityId)
                         ("{entityType}",
                          entityType) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Cycle: ApiaryProvider+Cycle with get
    (this :> InternalApiaryContext)

    member Execution: ApiaryProvider+Execution with get
    (this :> InternalApiaryContext)

    member GetAudit: query:string * string list -> headers:string * string list -> ApiaryProvider+Audit2
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/audit"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member GetIssues: query:string * string list -> headers:string * string list -> ApiaryProvider+Issues
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/issues"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member License: query:string * string list -> headers:string * string list -> ApiaryProvider+License
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/license"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ModuleInfo: query:string * string list -> headers:string * string list -> ApiaryProvider+ModuleInfo
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/moduleInfo"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Picker: ApiaryProvider+Picker with get
    (this :> InternalApiaryContext)

    member StepResult: ApiaryProvider+StepResult with get
    (this :> InternalApiaryContext)

    member SystemInfo: query:string * string list -> headers:string * string list -> ApiaryProvider+SystemInfo
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/systemInfo"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Test: ApiaryProvider+Test with get
    (this :> InternalApiaryContext)

    member Teststep: ApiaryProvider+Teststep with get
    (this :> InternalApiaryContext)

    member Util: ApiaryProvider+Util with get
    (this :> InternalApiaryContext)

    member Zchart: ApiaryProvider+Zchart with get
    (this :> InternalApiaryContext)

    member Zql: ApiaryProvider+Zql with get
    (this :> InternalApiaryContext)


class ApiaryProvider+Attachment : FDR.InternalApiaryContext
    member AsyncGetAttachmentsByEntity: query:string * string list -> headers:string * string list -> ApiaryProvider+AttachmentAttachmentsByEntity async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/attachment/attachmentsByEntity"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "DELETE"
                               Path = "/jira_server/rest/zapi/latest/attachment/{id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetAttachmentsByEntity: query:string * string list -> headers:string * string list -> ApiaryProvider+AttachmentAttachmentsByEntity
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/attachment/attachmentsByEntity"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "DELETE"
          Path = "/jira_server/rest/zapi/latest/attachment/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Audit2
    member Value: ApiaryProvider+Audit[] with get
    (this :> ApiaryProvider+Audit[])


class ApiaryProvider+Cycle : FDR.InternalApiaryContext
    member AsyncGetCycle: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Cycle2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/cycle/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/cycle"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetCycle: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Cycle2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/cycle/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/cycle"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Execution : FDR.InternalApiaryContext
    member AsyncGetExecution: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Execution2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetExecution: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Execution2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Issues : FDR.IJsonDocument
    member Sections: ApiaryProvider+Section[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "sections"), new Func<_,_>(id)))


class ApiaryProvider+License : FDR.IJsonDocument
    member CustomerId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "customerId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExpDate: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expDate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member ExpDateFormatted: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expDateFormatted")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member IsEval: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "isEval")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member LicenseInformation: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "licenseInformation")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ModuleInfo : FDR.IJsonDocument
    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Picker : FDR.InternalApiaryContext
    member AsyncGetFilters: query:string * string list -> headers:string * string list -> ApiaryProvider+PickerFilters async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/picker/filters"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetFilters: query:string * string list -> headers:string * string list -> ApiaryProvider+PickerFilters
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/picker/filters"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+StepResult : FDR.InternalApiaryContext
    member AsyncGetStepResult: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+StepResult2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/stepResult/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+StepResult2[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/stepResult"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetStepResult: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+StepResult2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/stepResult/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+StepResult2[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/stepResult"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+SystemInfo : FDR.IJsonDocument
    member CustomerId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "customerId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member JiraAppServer: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "jira_app_server")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member JiraDbBuild: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "jira_db_build")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member JiraDbType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "jira_db_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member JiraVersion: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "jira_version")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member LicenseDescription: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "licenseDescription")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ZfjBuild: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "zfj_build")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ZfjVersion: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "zfj_version")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Test : FDR.InternalApiaryContext
    member AsyncGetCount: query:string * string list -> headers:string * string list -> ApiaryProvider+TestCount async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/test/count"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetCount: query:string * string list -> headers:string * string list -> ApiaryProvider+TestCount
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/test/count"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member MySearches: ApiaryProvider+MySearches with get
    this


class ApiaryProvider+Teststep : FDR.InternalApiaryContext
    member IssueId: ApiaryProvider+IssueId with get
    this


class ApiaryProvider+Util : FDR.InternalApiaryContext
    member AsyncCycleCriteriaInfo: query:string * string list -> headers:string * string list -> ApiaryProvider+UtilCycleCriteriaInfo async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/util/cycleCriteriaInfo"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetDashboard: query:string * string list -> headers:string * string list -> ApiaryProvider+Dashboard async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/util/dashboard"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncProjectList: query:string * string list -> headers:string * string list -> ApiaryProvider+UtilProjectList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/util/project-list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTestExecutionStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionStatus[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/util/testExecutionStatus"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTeststepExecutionStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionStatus[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/util/teststepExecutionStatus"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncVersionBoardList: query:string * string list -> headers:string * string list -> ApiaryProvider+UtilVersionBoardList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/util/versionBoard-list"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member CycleCriteriaInfo: query:string * string list -> headers:string * string list -> ApiaryProvider+UtilCycleCriteriaInfo
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/util/cycleCriteriaInfo"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member GetDashboard: query:string * string list -> headers:string * string list -> ApiaryProvider+Dashboard
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/util/dashboard"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member ProjectList: query:string * string list -> headers:string * string list -> ApiaryProvider+UtilProjectList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/util/project-list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member TestExecutionStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionStatus[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/util/testExecutionStatus"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member TeststepExecutionStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionStatus[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/util/teststepExecutionStatus"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member VersionBoardList: query:string * string list -> headers:string * string list -> ApiaryProvider+UtilVersionBoardList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/util/versionBoard-list"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Zchart : FDR.InternalApiaryContext
    member AsyncIssueStatuses: query:string * string list -> headers:string * string list -> ApiaryProvider+ZchartIssueStatuses async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zchart/issueStatuses"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTestsCreated: query:string * string list -> headers:string * string list -> ApiaryProvider+ZchartTestsCreated async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zchart/testsCreated"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member IssueStatuses: query:string * string list -> headers:string * string list -> ApiaryProvider+ZchartIssueStatuses
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zchart/issueStatuses"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member TestsCreated: query:string * string list -> headers:string * string list -> ApiaryProvider+ZchartTestsCreated
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zchart/testsCreated"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Zql : FDR.InternalApiaryContext
    member AsyncAutoCompleteZqlJson: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlAutoCompleteZqlJson async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/autoCompleteZQLJson"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncClauses: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlClauses async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/clauses"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExecuteSearch: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecuteSearch async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/executeSearch"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetAutocomplete: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlAutocomplete async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/autocomplete"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AutoCompleteZqlJson: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlAutoCompleteZqlJson
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zql/autoCompleteZQLJson"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Clauses: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlClauses
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zql/clauses"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ExecuteSearch: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecuteSearch
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zql/executeSearch"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ExecutionFilter: ApiaryProvider+ExecutionFilter with get
    this

    member GetAutocomplete: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlAutocomplete
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zql/autocomplete"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+AttachmentAttachmentsByEntity : FDR.IJsonDocument
    member Data: ApiaryProvider+Datum3[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))


class ApiaryProvider+Audit : FDR.IJsonDocument
    member AuditItems: ApiaryProvider+AuditItems with get
    JsonRuntime.GetPropertyPacked(this, "auditItems")

    member CreationDate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "creationDate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Creator: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "creator")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member EntityEvent: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "entityEvent")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member EntityId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "entityId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member EntityType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "entityType")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Cycle2 : FDR.IJsonDocument
    member AsyncCopy: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleCopy async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/cycle/{id}/copy"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExport: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleExport async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/cycle/{id}/export"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncMove: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleMove async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/cycle/{id}/move"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Build: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "build")

    member Copy: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleCopy
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/cycle/{id}/copy"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Environment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "environment")

    member Export: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleExport
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/cycle/{id}/export"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Move: query:string * string list -> headers:string * string list -> ApiaryProvider+CycleMove
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/cycle/{id}/move"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProjectId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VersionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+CycleList : FDR.IJsonDocument
    member 1: ApiaryProvider+1 with get
    JsonRuntime.GetPropertyPacked(this, "-1")

    member 12: ApiaryProvider+12 with get
    JsonRuntime.GetPropertyPacked(this, "1")

    member 2: ApiaryProvider+1 with get
    JsonRuntime.GetPropertyPacked(this, "2")

    member RecordsCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "recordsCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Dashboard
    member Value: ApiaryProvider+Component[] with get
    (this :> ApiaryProvider+Component[])


class ApiaryProvider+Execution2 : FDR.IJsonDocument
    member AddTestsToCycle: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionAddTestsToCycle
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/jira_server/rest/zapi/latest/execution/addTestsToCycle/"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member AsyncAddTestsToCycle: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionAddTestsToCycle async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/jira_server/rest/zapi/latest/execution/addTestsToCycle/"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncDefects: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionDefects async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution/{id}/defects"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncDeleteExecutions: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionDeleteExecutions async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "DELETE"
                               Path = "/jira_server/rest/zapi/latest/execution/deleteExecutions"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncExecute: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionExecute async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/execution/{id}/execute"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncGetCount: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionCount async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution/count/"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncIndexAll: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionIndexAll async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/jira_server/rest/zapi/latest/execution/indexAll"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncQuickExecute: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionQuickExecute async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/jira_server/rest/zapi/latest/execution/{id}/quickExecute"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncRefreshRemoteLinks: query:string * string list -> headers:string * string list -> FDR.IJsonDocument async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/jira_server/rest/zapi/latest/execution/refreshRemoteLinks/"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTopDefects: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionTopDefects async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution/topDefects"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncUpdateBulkStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionDeleteExecutions async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/execution/updateBulkStatus"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncUpdateWithBulkDefects: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionUpdateWithBulkDefects async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/execution/updateWithBulkDefects"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Defects: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionDefects
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution/{id}/defects"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member DeleteExecutions: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionDeleteExecutions
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "DELETE"
          Path = "/jira_server/rest/zapi/latest/execution/deleteExecutions"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Execute: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionExecute
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/execution/{id}/execute"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Execution: ApiaryProvider+Execution3 with get
    JsonRuntime.GetPropertyPacked(this, "execution")

    member GetCount: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionCount
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution/count/"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member IndexAll: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionIndexAll
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/jira_server/rest/zapi/latest/execution/indexAll"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member IndexStatus: ApiaryProvider+IndexStatus with get
    LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context

    member QuickExecute: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionQuickExecute
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/jira_server/rest/zapi/latest/execution/{id}/quickExecute"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member RefreshRemoteLinks: query:string * string list -> headers:string * string list -> FDR.IJsonDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/jira_server/rest/zapi/latest/execution/refreshRemoteLinks/"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member TopDefects: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionTopDefects
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution/topDefects"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member UpdateBulkStatus: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionDeleteExecutions
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/execution/updateBulkStatus"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member UpdateWithBulkDefects: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionUpdateWithBulkDefects
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/execution/updateWithBulkDefects"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+ExecutionFilter : FDR.InternalApiaryContext
    member AsyncGetExecutionFilter: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilter async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterList[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetExecutionFilter: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilter
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zql/executionFilter/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterList[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/zql/executionFilter/"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+ExecutionList : FDR.IJsonDocument
    member CurrentlySelectedExecutionId: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "currentlySelectedExecutionId")

    member Executions: ApiaryProvider+Execution4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executions"), new Func<_,_>(id)))

    member IssueId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member RecordsCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "recordsCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: ApiaryProvider+Status with get
    JsonRuntime.GetPropertyPacked(this, "status")


class ApiaryProvider+ExecutionStatus : FDR.IJsonDocument
    member Color: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "color")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+IssueId : FDR.InternalApiaryContext
    member AsyncGetIssueId: issueId:string -> id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+TeststepIssueIdIssueId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/teststep/{issueId}/{id}"
                               Arguments = [| ("{issueId}",
                                               issueId)
                                              ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+TeststepIssueIdIssueId[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/teststep/{issueId}/"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetIssueId: issueId:string -> id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+TeststepIssueIdIssueId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/teststep/{issueId}/{id}"
          Arguments = [| ("{issueId}",
                          issueId)
                         ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+TeststepIssueIdIssueId[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/teststep/{issueId}/"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+MySearches : FDR.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+TestMySearchesId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/test/mySearches/{id}/"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+TestMySearchesId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/test/mySearches/{id}/"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+PickerFilters : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Label: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "label")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Options: ApiaryProvider+Option[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "options"), new Func<_,_>(id)))

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Weight: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "weight")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Section : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Issues: ApiaryProvider+Issue[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "issues"), new Func<_,_>(id)))

    member Label: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "label")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Sub: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sub")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+StepResult2 : FDR.IJsonDocument
    member AsyncDefects: query:string * string list -> headers:string * string list -> ApiaryProvider+StepResultDefects async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/stepResult/{id}/defects"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncQuickExecute: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionQuickExecute async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/jira_server/rest/zapi/latest/stepResult/{id}/quickExecute"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Defects: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "defects"), new Func<_,_>(id)))

    member Defects: query:string * string list -> headers:string * string list -> ApiaryProvider+StepResultDefects
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/stepResult/{id}/defects"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member ExecutedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedOn: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedOn")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member ExecutionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExecutionStatus: ApiaryProvider+ExecutionStatus[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executionStatus"), new Func<_,_>(id)))

    member HtmlComment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "htmlComment")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member QuickExecute: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionQuickExecute
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/jira_server/rest/zapi/latest/stepResult/{id}/quickExecute"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Status: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StepId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "stepId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TestCount : FDR.IJsonDocument
    member Data: ApiaryProvider+Datum4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member GroupFld: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "groupFld")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UrlBase: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "urlBase")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+UtilCycleCriteriaInfo : FDR.IJsonDocument
    member Components: ApiaryProvider+Component[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "components"), new Func<_,_>(id)))

    member ExecutionStatuses: ApiaryProvider+13[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executionStatuses"), new Func<_,_>(id)))

    member IssueStatuses: ApiaryProvider+Component[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "issueStatuses"), new Func<_,_>(id)))

    member Labels: ApiaryProvider+Label[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "labels"), new Func<_,_>(id)))

    member Priorities: ApiaryProvider+Priority[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "priorities"), new Func<_,_>(id)))


class ApiaryProvider+UtilProjectList : FDR.IJsonDocument
    member Options: ApiaryProvider+IssueStatusesOptionsList[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "options"), new Func<_,_>(id)))


class ApiaryProvider+UtilVersionBoardList : FDR.IJsonDocument
    member VersionOptions: ApiaryProvider+IssueStatusesOptionsList[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "versionOptions"), new Func<_,_>(id)))


class ApiaryProvider+ZchartIssueStatuses : FDR.IJsonDocument
    member IssueStatusesOptionsList: ApiaryProvider+IssueStatusesOptionsList[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "IssueStatusesOptionsList"), new Func<_,_>(id)))


class ApiaryProvider+ZchartTestsCreated : FDR.IJsonDocument
    member TestsCreationCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "TestsCreationCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TestsCreationMap: ApiaryProvider+TestsCreationMap with get
    JsonRuntime.GetPropertyPacked(this, "TestsCreationMap")

    member TestsCreationPeriod: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "TestsCreationPeriod")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ZqlAutoCompleteZqlJson : FDR.IJsonDocument
    member Function: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "functionZ")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member JqlField: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "jqlFieldZ")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ReservedWords: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "reservedWords")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ZqlAutocomplete : FDR.IJsonDocument
    member Results: ApiaryProvider+Result[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "results"), new Func<_,_>(id)))


class ApiaryProvider+ZqlClauses : FDR.IJsonDocument
    member Clauses: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "clauses"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+ZqlExecuteSearch : FDR.IJsonDocument
    member CurrentIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currentIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExecutionIds: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executionIds"), new Func<_,_>(id)))

    member ExecutionStatuses: ApiaryProvider+ExecutionStatus[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executionStatuses"), new Func<_,_>(id)))

    member Executions: ApiaryProvider+Execution5[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executions"), new Func<_,_>(id)))

    member LinksNew: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "linksNew"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member MaxResultAllowed: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "maxResultAllowed")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Offset: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "offset")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StepExecutionStatuses: ApiaryProvider+ExecutionStatus[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "stepExecutionStatuses"), new Func<_,_>(id)))

    member TotalCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "totalCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate : FDR.IJsonDocument
    member Success: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+1 : FDR.IJsonDocument

class ApiaryProvider+12 : FDR.IJsonDocument
    member Build: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "build")

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member EndDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "endDate")

    member Environment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "environment")

    member ExecutionSummaries: ApiaryProvider+ExecutionSummaries with get
    JsonRuntime.GetPropertyPacked(this, "executionSummaries")

    member Expand: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expand")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProjectId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StartDate: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "startDate")

    member Started: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "started")

    member TotalExecuted: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "totalExecuted")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalExecutions: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "totalExecutions")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VersionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+13 : FDR.IJsonDocument
    member Color: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "color")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Desc: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "desc")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+AuditItems : FDR.IJsonDocument
    member Field: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "field")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member NewValue: ApiaryProvider+IntOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "newValue")

    member OldValue: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "oldValue"))


class ApiaryProvider+Component : FDR.IJsonDocument
    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+CycleCopy : FDR.IJsonDocument
    member Existing: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "existing")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Invalid: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "invalid")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProjectMismatch: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectMismatch")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Success: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VersionMismatch: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionMismatch")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+CycleExport : FDR.IJsonDocument
    member Url: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "url")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+CycleMove : FDR.IJsonDocument
    member Existing: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "existing")

    member Invalid: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "invalid")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ProjectMismatch: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectMismatch")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Success: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member VersionMismatch: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionMismatch")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Datum3 : FDR.IJsonDocument
    member Author: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "author")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member DateCreated: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "dateCreated")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FileIcon: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "fileIcon")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FileIconAltText: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "fileIconAltText")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FileId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "fileId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FileName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "fileName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FileSize: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "fileSize")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Datum4 : FDR.IJsonDocument
    member Cnt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cnt")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Execution3 : FDR.IJsonDocument
    member Comment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "comment")

    member Component: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "component")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CycleId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cycleId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CycleName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cycleName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Defects: ApiaryProvider+Defect[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "defects"), new Func<_,_>(id)))

    member ExecutedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedByDisplay: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedByDisplay")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedOn: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedOn")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member ExecutionStatus: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionStatus")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member HtmlComment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "htmlComment")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IssueId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IssueKey: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueKey")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Label: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "label")

    member ProjectId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Summary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VersionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VersionName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Execution4 : FDR.IJsonDocument
    member Comment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "comment")

    member Component: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "component")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CycleId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cycleId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CycleName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cycleName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedBy: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "executedBy"))

    member ExecutedByDisplay: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "executedByDisplay"))

    member ExecutedOn: ApiaryProvider+StringOrDateTime with get
    JsonRuntime.GetPropertyPackedOrNull(this, "executedOn")

    member ExecutionStatus: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionStatus")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member HtmlComment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "htmlComment")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IssueId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IssueKey: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueKey")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Label: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "label")

    member ProjectId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Summary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VersionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VersionName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Execution5 : FDR.IJsonDocument
    member Component: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "component"))

    member CreationDate: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "creationDate"))

    member CycleId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "cycleId"))

    member CycleName: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "cycleName"))

    member ExecutedBy: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "executedBy"))

    member ExecutedByUserName: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "executedByUserName"))

    member ExecutedOn: System.DateTime option with get
    JsonRuntime.ConvertDateTime("", JsonRuntime.TryGetPropertyUnpacked(this, "executedOn"))

    member Id: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "id"))

    member IssueKey: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "issueKey"))

    member Priority: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "priority"))

    member Project: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "project"))

    member ProjectKey: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "projectKey"))

    member Status: ApiaryProvider+ExecutionStatus option with get
    JsonRuntime.TryGetPropertyPacked(this, "status")

    member Version: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "version"))

    member VersionId: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "versionId"))


class ApiaryProvider+ExecutionAddTestsToCycle : FDR.IJsonDocument
    member Warn: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "warn")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionCount : FDR.IJsonDocument
    member Data: ApiaryProvider+Datum[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member GroupFld: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "groupFld")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StatusSeries: ApiaryProvider+StatusSeries with get
    JsonRuntime.GetPropertyPacked(this, "statusSeries")

    member UrlBase: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "urlBase")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionDefects : FDR.IJsonDocument
    member 1: ApiaryProvider+14 with get
    JsonRuntime.GetPropertyPacked(this, "1")


class ApiaryProvider+ExecutionDeleteExecutions : FDR.IJsonDocument
    member Error: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "error")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Success: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "success")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionExecute : FDR.IJsonDocument
    member Comment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "comment")

    member Component: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "component")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CycleId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cycleId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CycleName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cycleName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedByDisplay: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedByDisplay")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedOn: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedOn")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutionStatus: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionStatus")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member HtmlComment: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "htmlComment")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IssueId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IssueKey: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "issueKey")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Label: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "label")

    member ProjectId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "projectId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Summary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member VersionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member VersionName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "versionName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionIndexAll : FDR.IJsonDocument
    member Token: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "token")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionQuickExecute : FDR.IJsonDocument
    member 27: ApiaryProvider+27 with get
    JsonRuntime.GetPropertyPacked(this, "27")


class ApiaryProvider+ExecutionTopDefects : FDR.IJsonDocument
    member Data: ApiaryProvider+Datum2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))


class ApiaryProvider+ExecutionUpdateWithBulkDefects : FDR.IJsonDocument
    member 21: ApiaryProvider+1 with get
    JsonRuntime.GetPropertyPacked(this, "21")

    member 24: ApiaryProvider+1 with get
    JsonRuntime.GetPropertyPacked(this, "24")


class ApiaryProvider+IndexStatus : FDR.InternalApiaryContext
    member AsyncToken: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionIndexStatusToken async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/execution/indexStatus/{token}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Token: query:string * string list -> headers:string * string list -> ApiaryProvider+ExecutionIndexStatusToken
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/execution/indexStatus/{token}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Issue : FDR.IJsonDocument
    member Img: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "img")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "key")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member KeyHtml: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "keyHtml")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Summary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SummaryText: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summaryText")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+IssueStatusesOptionsList : FDR.IJsonDocument
    member Label: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "label")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Label : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Option : FDR.IJsonDocument
    member Icon: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "icon")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Label: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "label")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Priority : FDR.IJsonDocument
    member Desc: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "desc")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Result : FDR.IJsonDocument
    member DisplayName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "displayName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Value: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "value")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Status : FDR.IJsonDocument
    member 1: ApiaryProvider+15 with get
    JsonRuntime.GetPropertyPacked(this, "-1")

    member 12: ApiaryProvider+15 with get
    JsonRuntime.GetPropertyPacked(this, "1")

    member 2: ApiaryProvider+15 with get
    JsonRuntime.GetPropertyPacked(this, "2")

    member 3: ApiaryProvider+15 with get
    JsonRuntime.GetPropertyPacked(this, "3")

    member 4: ApiaryProvider+15 with get
    JsonRuntime.GetPropertyPacked(this, "4")


class ApiaryProvider+StepResultDefects : FDR.IJsonDocument
    member 28: ApiaryProvider+28 with get
    JsonRuntime.GetPropertyPacked(this, "28")


class ApiaryProvider+TestMySearchesId : FDR.IJsonDocument
    member Count: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TestsCreationMap : FDR.IJsonDocument
    member 1379743631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1379743631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1379830031889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1379830031889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1379916431889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1379916431889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380002831889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380002831889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380089231889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380089231889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380175631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380175631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380262031889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380262031889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380348431889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380348431889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380434831889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380434831889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380521231889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380521231889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380607631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380607631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380694031889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380694031889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380780431889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380780431889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380866831889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380866831889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1380953231889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1380953231889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381039631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381039631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381126031889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381126031889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381212431889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381212431889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381298831889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381298831889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381385231889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381385231889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381471631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381471631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381558031889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381558031889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381644431889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381644431889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381730831889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381730831889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381817231889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381817231889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381903631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381903631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1381990031889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1381990031889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1382076431889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1382076431889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1382162831889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1382162831889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1382249231889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1382249231889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1382335631889: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1382335631889")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TeststepIssueIdIssueId : FDR.IJsonDocument
    member Data: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member HtmlData: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "htmlData")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member HtmlResult: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "htmlResult")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member HtmlStep: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "htmlStep")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member OrderId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "orderId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Result: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "result")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Step: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "step")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ZqlExecutionFilterExecutionFilter : FDR.IJsonDocument
    member AsyncQuickSearch: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterQuickSearch[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/quickSearch"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncRename: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/rename"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSearch: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterSearch[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/search"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncToggleFav: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/toggleFav"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncUpdate: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/update"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncUser: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUser async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/jira_server/rest/zapi/latest/zql/executionFilter/user"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member CreatedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "createdBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreationDate: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "creationDate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member ExecutionCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FilterName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "filterName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IsFavorite: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "isFavorite")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Popularity: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Query: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "query")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member QuickSearch: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterQuickSearch[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/zql/executionFilter/quickSearch"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Rename: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/zql/executionFilter/rename"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Search: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterSearch[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/jira_server/rest/zapi/latest/zql/executionFilter/search"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member SharePerm: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sharePerm")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ToggleFav: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/zql/executionFilter/toggleFav"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Update: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUpdate
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/jira_server/rest/zapi/latest/zql/executionFilter/update"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member User: query:string * string list -> headers:string * string list -> ApiaryProvider+ZqlExecutionFilterExecutionFilterUser
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = LanguagePrimitives+IntrinsicFunctions.UnboxGeneric(this).Context
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/jira_server/rest/zapi/latest/zql/executionFilter/user"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+ZqlExecutionFilterList : FDR.IJsonDocument
    member CreatedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "createdBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreationDate: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "creationDate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member Desc: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "desc")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member FilterName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "filterName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IsFavorite: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "isFavorite")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member Query: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "query")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ScheduleCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "scheduleCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+14 : FDR.IJsonDocument
    member Zfj3: ApiaryProvider+Defect with get
    JsonRuntime.GetPropertyPacked(this, "ZFJ-3")

    member Zfj6: ApiaryProvider+Defect with get
    JsonRuntime.GetPropertyPacked(this, "ZFJ-6")


class ApiaryProvider+15 : FDR.IJsonDocument
    member Color: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "color")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+27 : FDR.IJsonDocument
    member ExecutedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutedOn: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executedOn")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ExecutionId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+28 : FDR.IJsonDocument
    member Zfj21: ApiaryProvider+Defect with get
    JsonRuntime.GetPropertyPacked(this, "ZFJ-21")


class ApiaryProvider+Datum : FDR.IJsonDocument
    member Cnt: ApiaryProvider+Cnt with get
    JsonRuntime.GetPropertyPacked(this, "cnt")

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Datum2 : FDR.IJsonDocument
    member AssociatedTestIds: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "associatedTestIds"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member DefectId: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "defectId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member DefectKey: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "defectKey")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member DefectStatus: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "defectStatus")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member DefectSummary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "defectSummary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TestCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "testCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Defect : FDR.IJsonDocument
    member Key: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "key")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Summary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionIndexStatusToken : FDR.IJsonDocument
    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Took: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "took")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionSummaries : FDR.IJsonDocument
    member ExecutionSummary: ApiaryProvider+ExecutionSummary[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "executionSummary"), new Func<_,_>(id)))


class ApiaryProvider+IntOrString : FDR.IJsonDocument
    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+StatusSeries : FDR.IJsonDocument
    member 1: ApiaryProvider+13 with get
    JsonRuntime.GetPropertyPacked(this, "-1")

    member 12: ApiaryProvider+13 with get
    JsonRuntime.GetPropertyPacked(this, "1")

    member 2: ApiaryProvider+13 with get
    JsonRuntime.GetPropertyPacked(this, "2")

    member 3: ApiaryProvider+13 with get
    JsonRuntime.GetPropertyPacked(this, "3")

    member 4: ApiaryProvider+13 with get
    JsonRuntime.GetPropertyPacked(this, "4")


class ApiaryProvider+StringOrDateTime : FDR.IJsonDocument
    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertDateTime("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class ApiaryProvider+ZqlExecutionFilterExecutionFilterQuickSearch : FDR.IJsonDocument
    member CreatedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "createdBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreationDate: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "creationDate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member FilterName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "filterName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Query: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "query")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ZqlExecutionFilterExecutionFilterSearch : FDR.IJsonDocument
    member CreatedBy: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "createdBy")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreationDate: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "creationDate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member CurrentIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currentIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member ExecutionCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "executionCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FilterName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "filterName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IsFavorite: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "isFavorite")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member LinksNew: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "linksNew"), new Func<_,_>(id)))

    member MaxResultAllowed: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "maxResultAllowed")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Popularity: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "popularity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Query: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "query")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SharePerm: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sharePerm")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TotalCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "totalCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ZqlExecutionFilterExecutionFilterUser : FDR.IJsonDocument
    member LoggedInUser: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "LOGGED_IN_USER")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Cnt : FDR.IJsonDocument
    member 1: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "-1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 12: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member 2: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "2")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 3: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "3")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member 4: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "4")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Total: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "total")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+ExecutionSummary : FDR.IJsonDocument
    member Count: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member StatusColor: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "statusColor")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StatusDescription: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "statusDescription")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StatusKey: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "statusKey")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StatusName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "statusName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


