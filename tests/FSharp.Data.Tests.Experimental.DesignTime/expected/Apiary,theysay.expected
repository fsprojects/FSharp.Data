class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member AsyncChunkparse: query:string * string list -> headers:string * string list -> ApiaryProvider+Chunkparse[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/chunkparse"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncComparison: query:string * string list -> headers:string * string list -> ApiaryProvider+Comparison[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/comparison"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncDepparse: query:string * string list -> headers:string * string list -> ApiaryProvider+Depparse[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/depparse"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncFeedback: query:string * string list -> headers:string * string list -> FDR.IJsonDocument async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/feedback"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncIntent: query:string * string list -> headers:string * string list -> ApiaryProvider+Intent[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/intent"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncNamedentity: query:string * string list -> headers:string * string list -> ApiaryProvider+Namedentity[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/namedentity"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPostag: query:string * string list -> headers:string * string list -> ApiaryProvider+Postag[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/postag"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncRisk: query:string * string list -> headers:string * string list -> ApiaryProvider+Risk[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/risk"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSpeculation: query:string * string list -> headers:string * string list -> ApiaryProvider+Speculation[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/speculation"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSummary: query:string * string list -> headers:string * string list -> ApiaryProvider+Summary[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v1/summary"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncUsagestatsFrom20130201To20130213: query:string * string list -> headers:string * string list -> ApiaryProvider+UsagestatsFrom20130201To20130213 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v1/usagestats?from=2013-02-01&to=2013-02-13"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Chunkparse: query:string * string list -> headers:string * string list -> ApiaryProvider+Chunkparse[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/chunkparse"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Comparison: query:string * string list -> headers:string * string list -> ApiaryProvider+Comparison[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/comparison"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Depparse: query:string * string list -> headers:string * string list -> ApiaryProvider+Depparse[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/depparse"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Feedback: query:string * string list -> headers:string * string list -> FDR.IJsonDocument
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v1/feedback"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Intent: query:string * string list -> headers:string * string list -> ApiaryProvider+Intent[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/intent"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Namedentity: query:string * string list -> headers:string * string list -> ApiaryProvider+Namedentity[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/namedentity"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Postag: query:string * string list -> headers:string * string list -> ApiaryProvider+Postag[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/postag"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Resources: ApiaryProvider+Resources with get
    (this :> InternalApiaryContext)

    member Risk: query:string * string list -> headers:string * string list -> ApiaryProvider+Risk[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/risk"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Speculation: query:string * string list -> headers:string * string list -> ApiaryProvider+Speculation[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/speculation"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Summary: query:string * string list -> headers:string * string list -> ApiaryProvider+Summary[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = (this :> InternalApiaryContext)
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "POST"
                                   Path = "/v1/summary"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member UsagestatsFrom20130201To20130213: query:string * string list -> headers:string * string list -> ApiaryProvider+UsagestatsFrom20130201To20130213
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v1/usagestats?from=2013-02-01&to=2013-02-13"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Chunkparse : FDR.IJsonDocument
    member Chunk: ApiaryProvider+Chunk with get
    JsonRuntime.GetPropertyPacked(this, "chunk")

    member Head: ApiaryProvider+Head with get
    JsonRuntime.GetPropertyPacked(this, "head")


class ApiaryProvider+Comparison : FDR.IJsonDocument
    member ComparisonType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "comparisonType")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member End: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member SentenceIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Start: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Depparse : FDR.IJsonDocument
    member Dependency: ApiaryProvider+Dependency with get
    JsonRuntime.GetPropertyPacked(this, "dependency")

    member Dependent: ApiaryProvider+Dependent with get
    JsonRuntime.GetPropertyPacked(this, "dependent")

    member Governor: ApiaryProvider+Dependent option with get
    JsonRuntime.TryGetPropertyPacked(this, "governor")


class ApiaryProvider+Intent : FDR.IJsonDocument
    member End: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member IntentType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "intentType")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SentenceIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Start: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Namedentity : FDR.IJsonDocument
    member End: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Head: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "head")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member HeadIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "headIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member NamedEntityTypes: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "namedEntityTypes"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Sentence: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentence")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SentenceHtml: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceHtml")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Start: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Postag : FDR.IJsonDocument
    member PosTag: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "posTag")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosTaggedWord: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "posTaggedWord")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SentenceIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Stem: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "stem")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WordIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "wordIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Resources : FDR.InternalApiaryContext
    member Lexicons: ApiaryProvider+Lexicons with get
    this

    member Taxonomies: ApiaryProvider+Taxonomies with get
    this


class ApiaryProvider+Risk : FDR.IJsonDocument
    member End: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member RiskType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "riskType")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SentenceIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Start: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Speculation : FDR.IJsonDocument
    member End: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member SentenceIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member SpeculationType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "speculationType")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Start: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Summary : FDR.IJsonDocument
    member Summary: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "summary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+UsagestatsFrom20130201To20130213 : FDR.IJsonDocument
    member DailyUsage: ApiaryProvider+DailyUsage[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPacked(this, "dailyUsage"), new Func<_,_>(id)))

    member From: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "from")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member RequestCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "requestCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member To: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "to")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member Username: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "username")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Chunk : FDR.IJsonDocument
    member ChunkType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "chunkType")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member End: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member SentenceIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "sentenceIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Start: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+DailyUsage : FDR.IJsonDocument
    member Date: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "date")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member RequestCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "requestCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Dependency : FDR.IJsonDocument
    member Predicate: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "predicate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Relation: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "relation")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Dependent : FDR.IJsonDocument
    member Stem: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "stem")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WordIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "wordIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Head : FDR.IJsonDocument
    member PosTag: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "posTag")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PosTaggedWord: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "posTaggedWord")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Stem: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "stem")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member WordIndex: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "wordIndex")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Lexicons : FDR.InternalApiaryContext
    member Sentiment: ApiaryProvider+Sentiment with get
    this


class ApiaryProvider+Taxonomies : FDR.InternalApiaryContext
    member AsyncEntities: query:string * string list -> headers:string * string list -> ApiaryProvider+ResourcesTaxonomiesEntityEntity[] async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v1/resources/taxonomies/entities"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Entities: query:string * string list -> headers:string * string list -> ApiaryProvider+ResourcesTaxonomiesEntityEntity[]
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/v1/resources/taxonomies/entities"
                                   Arguments = [| |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))

    member Entity: ApiaryProvider+Entity with get
    this


class ApiaryProvider+Entity : FDR.InternalApiaryContext
    member AsyncGetEntity: objectId:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+ResourcesTaxonomiesEntityEntity async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v1/resources/taxonomies/entity/{ objectID }"
                               Arguments = [| ("{ objectID }",
                                               objectId) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetEntity: objectId:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+ResourcesTaxonomiesEntityEntity
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v1/resources/taxonomies/entity/{ objectID }"
          Arguments = [| ("{ objectID }",
                          objectId) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+ResourcesTaxonomiesEntityEntity : FDR.IJsonDocument
    member Category: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "category")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MatchPattern: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "matchPattern")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Sentiment : FDR.InternalApiaryContext
    member AdjectiveAdverbNounVerb: ApiaryProvider+AdjectiveAdverbNounVerb with get
    this

    member AsyncGetAdjectivesAdverbsNounsVerbs: adjectivesAdverbsNounsVerbs:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+AdjectivesAdverbsNounsVerbs async
    let f = new Func<_,_>(fun (t:ApiaryDocument) -> JsonRuntime.ConvertArray(t, new Func<_,_>(id))))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v1/resources/lexicons/sentiment/{ adjectives | adverbs | nouns | verbs }"
                               Arguments = [| ("{ adjectives | adverbs | nouns | verbs }",
                                               adjectivesAdverbsNounsVerbs) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetAdjectivesAdverbsNounsVerbs: adjectivesAdverbsNounsVerbs:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+AdjectivesAdverbsNounsVerbs
    JsonRuntime.ConvertArray(let patternInput = 
                                 let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                                 let headers, query = patternInput
                                 let apiCtx = this
                                 (apiCtx :> ApiaryOperations),
                                 { Method = "GET"
                                   Path = "/v1/resources/lexicons/sentiment/{ adjectives | adverbs | nouns | verbs }"
                                   Arguments = [| ("{ adjectives | adverbs | nouns | verbs }",
                                                   adjectivesAdverbsNounsVerbs) |]
                                   Headers = headers
                                   Query = query }
                             let apiCtx, args = patternInput
                             apiCtx.InvokeOperation(args), new Func<_,_>(id)))


class ApiaryProvider+AdjectiveAdverbNounVerb : FDR.InternalApiaryContext
    member AsyncGetObjectId: adjectiveAdverbNounVerb:string -> objectId:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+ResourcesLexiconsSentimentAdjectivesAdverbsNounsVerb async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v1/resources/lexicons/sentiment/{ adjective | adverb | noun | verb }/{ objectID }"
                               Arguments = [| ("{ adjective | adverb | noun | verb }",
                                               adjectiveAdverbNounVerb)
                                              ("{ objectID }",
                                               objectId) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetObjectId: adjectiveAdverbNounVerb:string -> objectId:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+ResourcesLexiconsSentimentAdjectivesAdverbsNounsVerb
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Content-Type:application/json", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v1/resources/lexicons/sentiment/{ adjective | adverb | noun | verb }/{ objectID }"
          Arguments = [| ("{ adjective | adverb | noun | verb }",
                          adjectiveAdverbNounVerb)
                         ("{ objectID }",
                          objectId) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+AdjectivesAdverbsNounsVerbs
    member Value: ApiaryProvider+ResourcesLexiconsSentimentAdjectivesAdverbsNounsVerb[] with get
    (this :> ApiaryProvider+ResourcesLexiconsSentimentAdjectivesAdverbsNounsVerb[])


class ApiaryProvider+ResourcesLexiconsSentimentAdjectivesAdverbsNounsVerb : FDR.IJsonDocument
    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Polarity: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "polarity")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Text: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "text")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


