class ApiaryProvider : FDR.ApiaryContext
    new : rootUrl:string -> ApiaryProvider
    (new ApiaryContext(rootUrl))

    member AsyncClients: email:string -> description:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Clients async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v2/clients?email={email}&description={description}"
                               Arguments = [| ("{email}",
                                               email)
                                              ("{description}",
                                               description) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncClients: count:string -> offset:string -> payment:string -> email:string -> createdAt:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Clients3 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/clients?count={count}&offset={offset}&payment={payment}&email={email}&created_at={created_at}"
                               Arguments = [| ("{count}",
                                               count)
                                              ("{offset}",
                                               offset)
                                              ("{payment}",
                                               payment)
                                              ("{email}",
                                               email)
                                              ("{created_at}",
                                               createdAt) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncOffers: amount:string -> currency:string -> interval:string -> name:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Offers async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v2/offers?amount={amount}&currency={currency}&interval={interval}&name={name}"
                               Arguments = [| ("{amount}",
                                               amount)
                                              ("{currency}",
                                               currency)
                                              ("{interval}",
                                               interval)
                                              ("{name}",
                                               name) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncOffers: count:string -> offset:string -> interval:string -> amount:string -> createdAt:string -> trialPeriodDays:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Offers3 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/offers?count={count}&offset={offset}&interval={interval}&amount={amount}&created_at={created_at}&trial_period_days={trial_period_days}"
                               Arguments = [| ("{count}",
                                               count)
                                              ("{offset}",
                                               offset)
                                              ("{interval}",
                                               interval)
                                              ("{amount}",
                                               amount)
                                              ("{created_at}",
                                               createdAt)
                                              ("{trial_period_days}",
                                               trialPeriodDays) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPayments: type:string -> code:string -> account:string -> holder:string -> client:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Payments async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v2/payments?type={type}&code={code}&account={account}&holder={holder}&client={client}"
                               Arguments = [| ("{type}",
                                               type)
                                              ("{code}",
                                               code)
                                              ("{account}",
                                               account)
                                              ("{holder}",
                                               holder)
                                              ("{client}",
                                               client) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncPayments: token:string -> client:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Payments2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v2/payments?token={token}&client={client}"
                               Arguments = [| ("{token}",
                                               token)
                                              ("{client}",
                                               client) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncRefunds: count:string -> offset:string -> transaction:string -> client:string -> amount:string -> createdAt:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Refunds2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/refunds?count={count}&offset={offset}&transaction={transaction}&client={client}&amount={amount}&created_at={created_at}"
                               Arguments = [| ("{count}",
                                               count)
                                              ("{offset}",
                                               offset)
                                              ("{transaction}",
                                               transaction)
                                              ("{client}",
                                               client)
                                              ("{amount}",
                                               amount)
                                              ("{created_at}",
                                               createdAt) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSubscriptions: client:string -> offer:string -> payment:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Subscriptions async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v2/subscriptions?client={client}&offer={offer}&payment={payment}"
                               Arguments = [| ("{client}",
                                               client)
                                              ("{offer}",
                                               offer)
                                              ("{payment}",
                                               payment) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncSubscriptions: count:string -> offset:string -> offer:string -> canceledAt:string -> createdAt:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Subscriptions3 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/subscriptions?count={count}&offset={offset}&offer={offer}&canceled_at={canceled_at}&created_at={created_at}"
                               Arguments = [| ("{count}",
                                               count)
                                              ("{offset}",
                                               offset)
                                              ("{offer}",
                                               offer)
                                              ("{canceled_at}",
                                               canceledAt)
                                              ("{created_at}",
                                               createdAt) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTransactions: amount:string -> currency:string -> token:string -> payment:string -> client:string -> preauthorization:string -> description:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Transactions async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "POST"
                               Path = "/v2/transactions?amount={amount}&currency={currency}&token={token}&payment={payment}&client={client}&preauthorization={preauthorization}&description={description}"
                               Arguments = [| ("{amount}",
                                               amount)
                                              ("{currency}",
                                               currency)
                                              ("{token}",
                                               token)
                                              ("{payment}",
                                               payment)
                                              ("{client}",
                                               client)
                                              ("{preauthorization}",
                                               preauthorization)
                                              ("{description}",
                                               description) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncTransactions: amount:string -> currency:string -> count:string -> offset:string -> order:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Transactions3 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = (this :> InternalApiaryContext)
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/transactions?amount={amount}&currency={currency}&count={count}&offset={offset}&order={order}"
                               Arguments = [| ("{amount}",
                                               amount)
                                              ("{currency}",
                                               currency)
                                              ("{count}",
                                               count)
                                              ("{offset}",
                                               offset)
                                              ("{order}",
                                               order) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Clients: email:string -> description:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Clients
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v2/clients?email={email}&description={description}"
          Arguments = [| ("{email}",
                          email)
                         ("{description}",
                          description) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Clients: ApiaryProvider+Clients2 with get
    (this :> InternalApiaryContext)

    member Clients: count:string -> offset:string -> payment:string -> email:string -> createdAt:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Clients3
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/clients?count={count}&offset={offset}&payment={payment}&email={email}&created_at={created_at}"
          Arguments = [| ("{count}",
                          count)
                         ("{offset}",
                          offset)
                         ("{payment}",
                          payment)
                         ("{email}",
                          email)
                         ("{created_at}",
                          createdAt) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Offers: amount:string -> currency:string -> interval:string -> name:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Offers
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v2/offers?amount={amount}&currency={currency}&interval={interval}&name={name}"
          Arguments = [| ("{amount}",
                          amount)
                         ("{currency}",
                          currency)
                         ("{interval}",
                          interval)
                         ("{name}",
                          name) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Offers: ApiaryProvider+Offers2 with get
    (this :> InternalApiaryContext)

    member Offers: count:string -> offset:string -> interval:string -> amount:string -> createdAt:string -> trialPeriodDays:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Offers3
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/offers?count={count}&offset={offset}&interval={interval}&amount={amount}&created_at={created_at}&trial_period_days={trial_period_days}"
          Arguments = [| ("{count}",
                          count)
                         ("{offset}",
                          offset)
                         ("{interval}",
                          interval)
                         ("{amount}",
                          amount)
                         ("{created_at}",
                          createdAt)
                         ("{trial_period_days}",
                          trialPeriodDays) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Payments: type:string -> code:string -> account:string -> holder:string -> client:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Payments
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v2/payments?type={type}&code={code}&account={account}&holder={holder}&client={client}"
          Arguments = [| ("{type}",
                          type)
                         ("{code}",
                          code)
                         ("{account}",
                          account)
                         ("{holder}",
                          holder)
                         ("{client}",
                          client) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Payments: token:string -> client:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Payments2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v2/payments?token={token}&client={client}"
          Arguments = [| ("{token}",
                          token)
                         ("{client}",
                          client) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Payments: ApiaryProvider+Payments3 with get
    (this :> InternalApiaryContext)

    member Refunds: ApiaryProvider+Refunds with get
    (this :> InternalApiaryContext)

    member Refunds: count:string -> offset:string -> transaction:string -> client:string -> amount:string -> createdAt:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Refunds2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/refunds?count={count}&offset={offset}&transaction={transaction}&client={client}&amount={amount}&created_at={created_at}"
          Arguments = [| ("{count}",
                          count)
                         ("{offset}",
                          offset)
                         ("{transaction}",
                          transaction)
                         ("{client}",
                          client)
                         ("{amount}",
                          amount)
                         ("{created_at}",
                          createdAt) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Subscriptions: client:string -> offer:string -> payment:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Subscriptions
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v2/subscriptions?client={client}&offer={offer}&payment={payment}"
          Arguments = [| ("{client}",
                          client)
                         ("{offer}",
                          offer)
                         ("{payment}",
                          payment) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Subscriptions: ApiaryProvider+Subscriptions2 with get
    (this :> InternalApiaryContext)

    member Subscriptions: count:string -> offset:string -> offer:string -> canceledAt:string -> createdAt:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Subscriptions3
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/subscriptions?count={count}&offset={offset}&offer={offer}&canceled_at={canceled_at}&created_at={created_at}"
          Arguments = [| ("{count}",
                          count)
                         ("{offset}",
                          offset)
                         ("{offer}",
                          offer)
                         ("{canceled_at}",
                          canceledAt)
                         ("{created_at}",
                          createdAt) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Transactions: amount:string -> currency:string -> token:string -> payment:string -> client:string -> preauthorization:string -> description:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Transactions
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "POST"
          Path = "/v2/transactions?amount={amount}&currency={currency}&token={token}&payment={payment}&client={client}&preauthorization={preauthorization}&description={description}"
          Arguments = [| ("{amount}",
                          amount)
                         ("{currency}",
                          currency)
                         ("{token}",
                          token)
                         ("{payment}",
                          payment)
                         ("{client}",
                          client)
                         ("{preauthorization}",
                          preauthorization)
                         ("{description}",
                          description) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member Transactions: ApiaryProvider+Transactions2 with get
    (this :> InternalApiaryContext)

    member Transactions: amount:string -> currency:string -> count:string -> offset:string -> order:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Transactions3
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = (this :> InternalApiaryContext)
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/transactions?amount={amount}&currency={currency}&count={count}&offset={offset}&order={order}"
          Arguments = [| ("{amount}",
                          amount)
                         ("{currency}",
                          currency)
                         ("{count}",
                          count)
                         ("{offset}",
                          offset)
                         ("{order}",
                          order) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Clients : FDR.IJsonDocument
    member Data: ApiaryProvider+Data7 with get
    JsonRuntime.GetPropertyPacked(this, "data")


class ApiaryProvider+Clients2 : FDR.InternalApiaryContext
    member AsyncGetId: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Clients async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/clients/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncIdEmailDescription: query:string * string list -> headers:string * string list -> ApiaryProvider+Clients async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/v2/clients/{id}{?email,description}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetId: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Clients
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/clients/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member IdEmailDescription: query:string * string list -> headers:string * string list -> ApiaryProvider+Clients
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/v2/clients/{id}{?email,description}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Clients3 : FDR.IJsonDocument
    member Data: ApiaryProvider+Client[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member DataCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Offers : FDR.IJsonDocument
    member Data: ApiaryProvider+Offer with get
    JsonRuntime.GetPropertyPacked(this, "data")


class ApiaryProvider+Offers2 : FDR.InternalApiaryContext
    member AsyncGetId: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Offers async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/offers/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncIdName: query:string * string list -> headers:string * string list -> ApiaryProvider+Offers async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/v2/offers/{id}{?name}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetId: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Offers
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/offers/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member IdName: query:string * string list -> headers:string * string list -> ApiaryProvider+Offers
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/v2/offers/{id}{?name}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Offers3 : FDR.IJsonDocument
    member Data: ApiaryProvider+Offer[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member DataCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Payments : FDR.IJsonDocument
    member Data: ApiaryProvider+Data3 with get
    JsonRuntime.GetPropertyPacked(this, "data")


class ApiaryProvider+Payments2 : FDR.IJsonDocument
    member Data: ApiaryProvider+Data4 with get
    JsonRuntime.GetPropertyPacked(this, "data")


class ApiaryProvider+Payments3 : FDR.InternalApiaryContext
    member AsyncGetPayments: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Payments2 async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/payments/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncList: query:string * string list -> headers:string * string list -> ApiaryProvider+PaymentsList async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/payments"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetPayments: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+Payments2
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/payments/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member List: query:string * string list -> headers:string * string list -> ApiaryProvider+PaymentsList
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/payments"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Refunds : FDR.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+RefundsId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/refunds/{id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncIdAmount: query:string * string list -> headers:string * string list -> ApiaryProvider+RefundsIdAmount async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/refunds/{id}{?amount}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+RefundsId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/refunds/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member IdAmount: query:string * string list -> headers:string * string list -> ApiaryProvider+RefundsIdAmount
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/refunds/{id}{?amount}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Refunds2 : FDR.IJsonDocument
    member Data: ApiaryProvider+Datum2[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member DataCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Subscriptions : FDR.IJsonDocument
    member Data: ApiaryProvider+Data8 with get
    JsonRuntime.GetPropertyPacked(this, "data")

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Subscriptions2 : FDR.InternalApiaryContext
    member AsyncGetId: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+SubscriptionsId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/subscriptions/{id}"
                               Arguments = [| ("{id}",
                                               id) |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member AsyncIdCancelAtPeriodEndOfferPayment: query:string * string list -> headers:string * string list -> ApiaryProvider+SubscriptionsId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "PUT"
                               Path = "/v2/subscriptions/{id}{?cancel_at_period_end,offer,payment}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member GetId: id:string -> query:string * string list -> headers:string * string list -> ApiaryProvider+SubscriptionsId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/subscriptions/{id}"
          Arguments = [| ("{id}",
                          id) |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)

    member IdCancelAtPeriodEndOfferPayment: query:string * string list -> headers:string * string list -> ApiaryProvider+SubscriptionsId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "PUT"
          Path = "/v2/subscriptions/{id}{?cancel_at_period_end,offer,payment}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Subscriptions3 : FDR.IJsonDocument
    member Data: ApiaryProvider+Data9[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member DataCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Transactions : FDR.IJsonDocument
    member Data: ApiaryProvider+Data with get
    JsonRuntime.GetPropertyPacked(this, "data")

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Transactions2 : FDR.InternalApiaryContext
    member AsyncId: query:string * string list -> headers:string * string list -> ApiaryProvider+TransactionsId async
    let f = new Func<_,_>(id))
    TextRuntime.AsyncMap(let patternInput = 
                             let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
                             let headers, query = patternInput
                             let apiCtx = this
                             (apiCtx :> ApiaryOperations),
                             { Method = "GET"
                               Path = "/v2/transactions/{id}"
                               Arguments = [| |]
                               Headers = headers
                               Query = query }
                         let apiCtx, args = patternInput
                         apiCtx.AsyncInvokeOperation(args), f)

    member Id: query:string * string list -> headers:string * string list -> ApiaryProvider+TransactionsId
    let patternInput = 
        let patternInput = ApiaryRuntime.ProcessParameters("Authorization:Basic <YOUR-BASE64-ENCODED-PRIVATE-API-KEY-WITH-TRAILING-COLON>", headers, query)
        let headers, query = patternInput
        let apiCtx = this
        (apiCtx :> ApiaryOperations),
        { Method = "GET"
          Path = "/v2/transactions/{id}"
          Arguments = [| |]
          Headers = headers
          Query = query }
    let apiCtx, args = patternInput
    apiCtx.InvokeOperation(args)


class ApiaryProvider+Transactions3 : FDR.IJsonDocument
    member Data: ApiaryProvider+Datum[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member DataCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Client : FDR.IJsonDocument
    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Email: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "email")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Payment: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "payment"), new Func<_,_>(id)))

    member Subscription: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "subscription")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Client: ApiaryProvider+Client with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Currency: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currency")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Invoices: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "invoices"), new Func<_,_>(id)))

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member OriginAmount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "origin_amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member Preauthorization: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "preauthorization")

    member Refunds: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "refunds")

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data3 : FDR.IJsonDocument
    member Account: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "account")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Client: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "client")

    member Code: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Holder: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "holder")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data4 : FDR.IJsonDocument
    member CardHolder: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "card_holder")

    member CardType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "card_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Client: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "client")

    member Country: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "country")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExpireMonth: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expire_month")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExpireYear: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expire_year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Last4: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "last4")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data7 : FDR.IJsonDocument
    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Email: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "email")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Payment: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "payment"), new Func<_,_>(id)))

    member Subscription: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "subscription")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data8 : FDR.IJsonDocument
    member CancelAtPeriodEnd: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cancel_at_period_end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CanceledAt: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "canceled_at")

    member Client: ApiaryProvider+Client4 with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member NextCaptureAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "next_capture_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Offer: ApiaryProvider+Offer with get
    JsonRuntime.GetPropertyPacked(this, "offer")

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member TrialEnd: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "trial_end")

    member TrialStart: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "trial_start")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data9 : FDR.IJsonDocument
    member CancelAtPeriodEnd: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cancel_at_period_end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CanceledAt: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "canceled_at")

    member Client: ApiaryProvider+Client5 with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member NextCaptureAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "next_capture_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Offer: ApiaryProvider+Offer with get
    JsonRuntime.GetPropertyPacked(this, "offer")

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member TrialEnd: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "trial_end")

    member TrialStart: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "trial_start")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Datum : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Client: ApiaryProvider+Client3 with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Currency: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currency")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Invoices: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "invoices"), new Func<_,_>(id)))

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member OriginAmount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "origin_amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member Preauthorization: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "preauthorization")

    member Refunds: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "refunds")

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Datum2 : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Transaction: ApiaryProvider+Transaction2 with get
    JsonRuntime.GetPropertyPacked(this, "transaction")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Offer : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Currency: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currency")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Interval: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "interval")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member SubscriptionCount: ApiaryProvider+SubscriptionCount with get
    JsonRuntime.GetPropertyPacked(this, "subscription_count")

    member TrialPeriodDays: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "trial_period_days")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+PaymentsList : FDR.IJsonDocument
    member Data: ApiaryProvider+Data4[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "data"), new Func<_,_>(id)))

    member DataCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "data_count")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+RefundsId : FDR.IJsonDocument
    member Data: ApiaryProvider+Data6 with get
    JsonRuntime.GetPropertyPacked(this, "data")

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+RefundsIdAmount : FDR.IJsonDocument
    member Data: ApiaryProvider+Data5 with get
    JsonRuntime.GetPropertyPacked(this, "data")

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SubscriptionsId : FDR.IJsonDocument
    member Data: ApiaryProvider+Data9 with get
    JsonRuntime.GetPropertyPacked(this, "data")

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+TransactionsId : FDR.IJsonDocument
    member Data: ApiaryProvider+Data2 with get
    JsonRuntime.GetPropertyPacked(this, "data")

    member Mode: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Client3 : FDR.IJsonDocument
    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "description"))

    member Email: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "email"))

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Payment: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "payment"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Subscription: ApiaryProvider+Subscription[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "subscription"), new Func<_,_>(id)))

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Client4 : FDR.IJsonDocument
    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Email: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "email")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "payment"), new Func<_,_>(id)))

    member Subscription: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "subscription"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Client5 : FDR.IJsonDocument
    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Email: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "email")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "payment"), new Func<_,_>(id)))

    member Subscription: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "subscription"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data2 : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Client: ApiaryProvider+Client2 with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Currency: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currency")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Invoices: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "invoices"), new Func<_,_>(id)))

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member OriginAmount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "origin_amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member Preauthorization: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "preauthorization")

    member Refunds: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "refunds")

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data5 : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Transaction: ApiaryProvider+Data2 with get
    JsonRuntime.GetPropertyPacked(this, "transaction")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Data6 : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Transaction: ApiaryProvider+Transaction with get
    JsonRuntime.GetPropertyPacked(this, "transaction")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Payment : FDR.IJsonDocument
    member CardHolder: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "card_holder")

    member CardType: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "card_type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Client: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "client")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Country: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "country")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExpireMonth: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expire_month")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member ExpireYear: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "expire_year")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Last4: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "last4")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Type: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "type")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+SubscriptionCount : FDR.IJsonDocument
    member Active: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "active")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Inactive: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "inactive")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Transaction2 : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Client: ApiaryProvider+Client2 with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Currency: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currency")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string option with get
    JsonRuntime.ConvertString("", JsonRuntime.TryGetPropertyUnpacked(this, "description"))

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Invoices: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "invoices"), new Func<_,_>(id)))

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member OriginAmount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "origin_amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member Preauthorization: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "preauthorization")

    member Refunds: ApiaryProvider+Refund[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "refunds"), new Func<_,_>(id)))

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Client2 : FDR.IJsonDocument
    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Email: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "email")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Payment: string[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "payment"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path, JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))

    member Subscription: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "subscription")

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Refund : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Description: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "description")

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Subscription : FDR.IJsonDocument
    member CancelAtPeriodEnd: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "cancel_at_period_end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member CanceledAt: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "canceled_at")

    member Client: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "client")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member NextCaptureAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "next_capture_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Offer: ApiaryProvider+Offer with get
    JsonRuntime.GetPropertyPacked(this, "offer")

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member TrialEnd: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "trial_end")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member TrialStart: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "trial_start")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class ApiaryProvider+Transaction : FDR.IJsonDocument
    member Amount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Client: ApiaryProvider+Client2 with get
    JsonRuntime.GetPropertyPacked(this, "client")

    member CreatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "created_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Currency: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "currency")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Description: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "description")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Invoices: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "invoices"), new Func<_,_>(id)))

    member Livemode: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "livemode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member OriginAmount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "origin_amount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Payment: ApiaryProvider+Payment with get
    JsonRuntime.GetPropertyPacked(this, "payment")

    member Preauthorization: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "preauthorization")

    member Refunds: ApiaryProvider+Refund[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "refunds"), new Func<_,_>(id)))

    member ResponseCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "response_code")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Status: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "status")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member UpdatedAt: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "updated_at")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


