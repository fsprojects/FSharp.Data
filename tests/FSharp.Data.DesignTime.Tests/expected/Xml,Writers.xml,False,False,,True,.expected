class XmlProvider : obj
    static member AsyncGetSample: () -> XmlProvider+Authors async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "Writers.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Authors async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSample: () -> XmlProvider+Authors
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "Writers.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Authors
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Authors
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Authors
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Authors
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Authors : FDR.BaseTypes.XmlElement
    new : topic:string -> authors:XmlProvider+Author[] -> XmlProvider+Authors
    XmlRuntime.CreateRecord("authors", 
                            [| ("topic",
                                (topic :> obj)) |], 
                            [| ("author",
                                (authors :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Authors
    XmlElement.Create(xElement)

    member Authors: XmlProvider+Author[] with get
    XmlRuntime.ConvertArray(this, "author", new Func<_,_>(id)))

    member Topic: string with get
    let value = XmlRuntime.TryGetAttribute(this, "topic")
    TextRuntime.GetNonOptionalValue("Attribute topic", TextRuntime.ConvertString(value), value)


class XmlProvider+Author : FDR.BaseTypes.XmlElement
    new : name:string -> born:int option -> XmlProvider+Author
    XmlRuntime.CreateRecord("author", 
                            [| ("name",
                                (name :> obj))
                               ("born",
                                (born :> obj)) |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Author
    XmlElement.Create(xElement)

    member Born: int option with get
    TextRuntime.ConvertInteger("", XmlRuntime.TryGetAttribute(this, "born"))

    member Name: string with get
    let value = XmlRuntime.TryGetAttribute(this, "name")
    TextRuntime.GetNonOptionalValue("Attribute name", TextRuntime.ConvertString(value), value)


