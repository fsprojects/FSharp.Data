[<[TypeProviderEditorHideMethods()]>]
class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "MSFT.csv")), ",", '"', true, false, 0, false)

    static member AsyncGetSample: () -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[6])
                                                                       TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "MSFT.csv"), f)

    static member AsyncLoad: uri:string -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[6])
                                                                       TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri), f)

    static member GetSample: () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "MSFT.csv")), ",", '"', true, false, 0, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StreamReader(stream)) :> TextReader), ",", '"', true, false, 0, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, reader, ",", '"', true, false, 0, false)

    static member Load: uri:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri)), ",", '"', true, false, 0, false)

    static member Parse: text:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Date", TextRuntime.ConvertDateTime("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Open", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("High", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Low", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Close", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Volume", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("Adj Close", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("", Some (let t1,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,t4,_,_,_ = row in t4))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,t5,_,_ = row in t5))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,t6,_ = row in t6))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,t7 = row in t7)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StringReader(text)) :> TextReader), ",", '"', true, false, 0, false)


[<[TypeProviderEditorHideMethods()]>]
class CsvProvider+Row : System.DateTime * decimal * decimal * decimal * decimal * int * decimal
    member ``Adj Close``: decimal with get
    (let _,_,_,_,_,_,t7 = this in t7)

    member Close: decimal with get
    (let _,_,_,_,t5,_,_ = this in t5)

    member Date: System.DateTime with get
    (let t1,_,_,_,_,_,_ = this in t1)

    member High: decimal with get
    (let _,_,t3,_,_,_,_ = this in t3)

    member Low: decimal with get
    (let _,_,_,t4,_,_,_ = this in t4)

    member Open: decimal with get
    (let _,t2,_,_,_,_,_ = this in t2)

    member Volume: int with get
    (let _,_,_,_,_,t6,_ = this in t6)


