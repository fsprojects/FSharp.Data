class XmlProvider : obj
    static member AsyncGetSample: () -> XmlProvider+Ordercontainer async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "projects.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Ordercontainer async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSample: () -> XmlProvider+Ordercontainer
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "projects.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Ordercontainer
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Ordercontainer
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Ordercontainer
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Ordercontainer
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Ordercontainer : FDR.BaseTypes.XmlElement
    new : background:XmlProvider+Background -> project:XmlProvider+Project -> XmlProvider+Ordercontainer
    XmlRuntime.CreateRecord("ordercontainer", 
                            [| |], 
                            [| ("backgrounds|background",
                                (background :> obj))
                               ("project",
                                (project :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Ordercontainer
    XmlElement.Create(xElement)

    member Background: XmlProvider+Background with get
    XmlRuntime.GetChild(this, "backgrounds|background")

    member Project: XmlProvider+Project with get
    XmlRuntime.GetChild(this, "project")


class XmlProvider+Background : FDR.BaseTypes.XmlElement
    new : title:string -> XmlProvider+Background
    XmlRuntime.CreateRecord("background", 
                            [| |], 
                            [| ("title",
                                (title :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Background
    XmlElement.Create(xElement)

    member Title: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Project : FDR.BaseTypes.XmlElement
    new : title:string -> XmlProvider+Project
    XmlRuntime.CreateRecord("project", 
                            [| |], 
                            [| ("title",
                                (title :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Project
    XmlElement.Create(xElement)

    member Title: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


