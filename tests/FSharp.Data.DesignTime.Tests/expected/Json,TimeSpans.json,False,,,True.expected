class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "TimeSpans.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "TimeSpans.json")))

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader)

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)))

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : positiveWithDayWithFraction:System.TimeSpan -> positiveWithoutDayWithoutFraction:System.TimeSpan -> negativeWithDayWithFraction:System.TimeSpan -> timespanOneTickGreaterThanMaxValue:string -> timespanOneTickLessThanMinValue:string -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("positiveWithDayWithFraction",
                                 (positiveWithDayWithFraction :> obj))
                                ("positiveWithoutDayWithoutFraction",
                                 (positiveWithoutDayWithoutFraction :> obj))
                                ("negativeWithDayWithFraction",
                                 (negativeWithDayWithFraction :> obj))
                                ("timespanOneTickGreaterThanMaxValue",
                                 (timespanOneTickGreaterThanMaxValue :> obj))
                                ("timespanOneTickLessThanMinValue",
                                 (timespanOneTickLessThanMinValue :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member NegativeWithDayWithFraction: System.TimeSpan with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "negativeWithDayWithFraction")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertTimeSpan("", value.JsonOpt), value.JsonOpt)

    member PositiveWithDayWithFraction: System.TimeSpan with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "positiveWithDayWithFraction")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertTimeSpan("", value.JsonOpt), value.JsonOpt)

    member PositiveWithoutDayWithoutFraction: System.TimeSpan with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "positiveWithoutDayWithoutFraction")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertTimeSpan("", value.JsonOpt), value.JsonOpt)

    member TimespanOneTickGreaterThanMaxValue: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "timespanOneTickGreaterThanMaxValue")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member TimespanOneTickLessThanMinValue: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "timespanOneTickLessThanMinValue")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


