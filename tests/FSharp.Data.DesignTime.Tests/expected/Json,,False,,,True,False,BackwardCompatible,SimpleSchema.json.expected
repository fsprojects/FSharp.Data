class JsonProvider : obj
    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON Schema" "" uri), f)

    static member GetSchema: () -> System.Xml.Schema.XmlSchemaSet
    JsonDocument.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON Schema" "" "SimpleSchema.json")))

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader)

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON Schema" "" uri)))

    static member Load: value:JsonValue -> JsonProvider+Root
    JsonDocument.Create(value, "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader))

    static member ParseList: text:string -> JsonProvider+JsonProvider+Root[]
    JsonDocument.CreateList(((new StringReader(text)) :> TextReader))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : age:int -> firstName:string -> isCool:bool -> lastName:string -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("age",
                                 (age :> obj))
                                ("firstName",
                                 (firstName :> obj))
                                ("isCool",
                                 (isCool :> obj))
                                ("lastName",
                                 (lastName :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Age: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "age")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FirstName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "firstName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member IsCool: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "isCool")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member LastName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lastName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


