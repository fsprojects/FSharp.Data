class XsdProvider
    static member AsyncGetSample: () -> XsdProvider+Schema async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" "" "msdnSampleSchema.xsd"), f)

    static member AsyncLoad: uri:string -> XsdProvider+Schema async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" "" uri), f)

    static member GetSample: () -> XsdProvider+Schema
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" "" "msdnSampleSchema.xsd")))

    static member Load: stream:System.IO.Stream -> XsdProvider+Schema
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XsdProvider+Schema
    XmlElement.Create(reader)

    static member Load: uri:string -> XsdProvider+Schema
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" @"<RESOLUTION_FOLDER>" "XSD" "" uri)))

    static member Parse: text:string -> XsdProvider+Schema
    XmlElement.Create(((new StringReader(text)) :> TextReader))

    static member ParsePurchaseOrder: text:string -> XsdProvider+PurchaseOrder
    XmlElement.Create(let t = text
                      let doc = XDocument.Parse(t)
                      let t = IfThenElse (Call (None, op_Equality,
                  [Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                             get_Root, [])),
                                                 get_Name, [])), get_LocalName,
                                     [])), ToLower, []), Value ("purchaseorder")]),
            Let (newRoot,
                 NewObject (XElement,
                            Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                                      get_Root,
                                                                      [])),
                                                          get_Name, [])),
                                              get_Namespace, [])), GetName,
                                  [Value ("root__")])),
                 Sequential (Call (Some (newRoot), Add,
                                   [Coerce (Call (Some (doc), get_Root, []),
                                            Object)]),
                             Let (newDoc,
                                  NewObject (XDocument,
                                             Call (Some (doc), get_Declaration,
                                                   []), NewArray (Object)),
                                  Sequential (Call (Some (newDoc), Add,
                                                    [Coerce (newRoot, Object)]),
                                              Call (Some (doc), ToString, []))))),
            t)
                      ((new StringReader(t)) :> TextReader))

    static member ParsePurchaseOrderType: text:string -> XsdProvider+PurchaseOrderType
    XmlElement.Create(let t = text
                      let doc = XDocument.Parse(t)
                      let t = IfThenElse (Call (None, op_Equality,
                  [Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                             get_Root, [])),
                                                 get_Name, [])), get_LocalName,
                                     [])), ToLower, []),
                   Value ("purchaseordertype")]),
            Let (newRoot,
                 NewObject (XElement,
                            Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                                      get_Root,
                                                                      [])),
                                                          get_Name, [])),
                                              get_Namespace, [])), GetName,
                                  [Value ("root__")])),
                 Sequential (Call (Some (newRoot), Add,
                                   [Coerce (Call (Some (doc), get_Root, []),
                                            Object)]),
                             Let (newDoc,
                                  NewObject (XDocument,
                                             Call (Some (doc), get_Declaration,
                                                   []), NewArray (Object)),
                                  Sequential (Call (Some (newDoc), Add,
                                                    [Coerce (newRoot, Object)]),
                                              Call (Some (doc), ToString, []))))),
            t)
                      ((new StringReader(t)) :> TextReader))

    static member ParseUsAddress: text:string -> XsdProvider+UsAddress
    XmlElement.Create(let t = text
                      let doc = XDocument.Parse(t)
                      let t = IfThenElse (Call (None, op_Equality,
                  [Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                             get_Root, [])),
                                                 get_Name, [])), get_LocalName,
                                     [])), ToLower, []), Value ("usaddress")]),
            Let (newRoot,
                 NewObject (XElement,
                            Call (Some (Call (Some (Call (Some (Call (Some (doc),
                                                                      get_Root,
                                                                      [])),
                                                          get_Name, [])),
                                              get_Namespace, [])), GetName,
                                  [Value ("root__")])),
                 Sequential (Call (Some (newRoot), Add,
                                   [Coerce (Call (Some (doc), get_Root, []),
                                            Object)]),
                             Let (newDoc,
                                  NewObject (XDocument,
                                             Call (Some (doc), get_Declaration,
                                                   []), NewArray (Object)),
                                  Sequential (Call (Some (newDoc), Add,
                                                    [Coerce (newRoot, Object)]),
                                              Call (Some (doc), ToString, []))))),
            t)
                      ((new StringReader(t)) :> TextReader))


class XsdProvider+PurchaseOrder : FDR.BaseTypes.XmlElement
    new : orderDate:System.DateTime -> billTo:XsdProvider+UsAddress -> shipToes:XsdProvider+UsAddress[] -> XsdProvider+PurchaseOrder
    XmlRuntime.CreateRecord("PurchaseOrder", 
                            [| ("OrderDate",
                                (orderDate :> obj)) |], 
                            [| ("{http://tempuri.org/PurchaseOrderSchema.xsd}BillTo",
                                (billTo :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}ShipTo",
                                (shipToes :> obj)) |], "en-US")

    new : xElement:System.Xml.Linq.XElement -> XsdProvider+PurchaseOrder
    XmlElement.Create(xElement)

    member BillTo: XsdProvider+UsAddress with get
    XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}BillTo")

    member OrderDate: System.DateTime with get
    let value = XmlRuntime.TryGetAttribute(this, "OrderDate")
    TextRuntime.GetNonOptionalValue("Attribute OrderDate", TextRuntime.ConvertDateTime("en-US", value), value)

    member ShipToes: XsdProvider+UsAddress[] with get
    XmlRuntime.ConvertArray(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}ShipTo", new Func<_,_>(id)))


class XsdProvider+PurchaseOrderType : FDR.BaseTypes.XmlElement
    new : orderDate:System.DateTime -> billTo:XsdProvider+UsAddress -> shipToes:XsdProvider+UsAddress[] -> XsdProvider+PurchaseOrderType
    XmlRuntime.CreateRecord("{http://tempuri.org/PurchaseOrderSchema.xsd}PurchaseOrderType", 
                            [| ("OrderDate",
                                (orderDate :> obj)) |], 
                            [| ("{http://tempuri.org/PurchaseOrderSchema.xsd}BillTo",
                                (billTo :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}ShipTo",
                                (shipToes :> obj)) |], "en-US")

    new : xElement:System.Xml.Linq.XElement -> XsdProvider+PurchaseOrderType
    XmlElement.Create(xElement)

    member BillTo: XsdProvider+UsAddress with get
    XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}BillTo")

    member OrderDate: System.DateTime with get
    let value = XmlRuntime.TryGetAttribute(this, "OrderDate")
    TextRuntime.GetNonOptionalValue("Attribute OrderDate", TextRuntime.ConvertDateTime("en-US", value), value)

    member ShipToes: XsdProvider+UsAddress[] with get
    XmlRuntime.ConvertArray(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}ShipTo", new Func<_,_>(id)))


class XsdProvider+Schema : FDR.BaseTypes.XmlElement
    new : purchaseOrder:XsdProvider+PurchaseOrder -> purchaseOrderType:XsdProvider+PurchaseOrderType -> usAddress:XsdProvider+UsAddress -> XsdProvider+Schema
    XmlRuntime.CreateRecord("Schema", 
                            [| |], 
                            [| ("PurchaseOrder",
                                (purchaseOrder :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}PurchaseOrderType",
                                (purchaseOrderType :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}USAddress",
                                (usAddress :> obj)) |], "en-US")

    new : xElement:System.Xml.Linq.XElement -> XsdProvider+Schema
    XmlElement.Create(xElement)

    member PurchaseOrder: XsdProvider+PurchaseOrder with get
    XmlRuntime.GetChild(this, "PurchaseOrder")

    member PurchaseOrderType: XsdProvider+PurchaseOrderType with get
    XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}PurchaseOrderType")

    member UsAddress: XsdProvider+UsAddress with get
    XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}USAddress")


class XsdProvider+UsAddress : FDR.BaseTypes.XmlElement
    new : country:string -> zip:int -> state:string -> city:string -> street:string -> name:string -> XsdProvider+UsAddress
    XmlRuntime.CreateRecord("{http://tempuri.org/PurchaseOrderSchema.xsd}USAddress", 
                            [| ("country",
                                (country :> obj)) |], 
                            [| ("{http://tempuri.org/PurchaseOrderSchema.xsd}zip",
                                (zip :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}state",
                                (state :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}city",
                                (city :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}street",
                                (street :> obj))
                               ("{http://tempuri.org/PurchaseOrderSchema.xsd}name",
                                (name :> obj)) |], "en-US")

    new : xElement:System.Xml.Linq.XElement -> XsdProvider+UsAddress
    XmlElement.Create(xElement)

    member City: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}city"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Country: string with get
    let value = XmlRuntime.TryGetAttribute(this, "country")
    TextRuntime.GetNonOptionalValue("Attribute country", TextRuntime.ConvertString(value), value)

    member Name: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}name"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member State: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}state"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Street: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}street"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Zip: int with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://tempuri.org/PurchaseOrderSchema.xsd}zip"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertInteger("en-US", value), value)


