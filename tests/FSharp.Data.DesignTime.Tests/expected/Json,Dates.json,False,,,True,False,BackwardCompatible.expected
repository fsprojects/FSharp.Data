class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "Dates.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "Dates.json")))

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader)

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)))

    static member Load: value:JsonValue -> JsonProvider+Root
    JsonDocument.Create(value, "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader))

    static member ParseList: text:string -> JsonProvider+JsonProvider+Root[]
    JsonDocument.CreateList(((new StringReader(text)) :> TextReader))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : birthdate:System.DateTime -> anniversary:System.DateTimeOffset -> noTimeZone:System.DateTime -> utcTime:System.DateTimeOffset -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("birthdate",
                                 (birthdate :> obj),
                                 1)
                                ("anniversary",
                                 (anniversary :> obj),
                                 1)
                                ("NoTimeZone",
                                 (noTimeZone :> obj),
                                 1)
                                ("UtcTime",
                                 (utcTime :> obj),
                                 1) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Anniversary: System.DateTimeOffset with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "anniversary")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTimeOffset("", value.JsonOpt), value.JsonOpt)

    member Birthdate: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "birthdate")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member NoTimeZone: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "NoTimeZone")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member UtcTime: System.DateTimeOffset with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "UtcTime")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTimeOffset("", value.JsonOpt), value.JsonOpt)


