class XmlProvider : obj
    static member AsyncGetSample: () -> XmlProvider+Xs async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "TypeInference.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Xs async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSample: () -> XmlProvider+Xs
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "TypeInference.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Xs
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Xs
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Xs
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Xs
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Xs : FDR.BaseTypes.XmlElement
    new : xs:XmlProvider+X[] -> XmlProvider+Xs
    XmlRuntime.CreateRecord("XS", 
                            [| |], 
                            [| ("X",
                                (xs :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Xs
    XmlElement.Create(xElement)

    member Xs: XmlProvider+X[] with get
    XmlRuntime.ConvertArray(this, "X", new Func<_,_>(id)))


class XmlProvider+X : FDR.BaseTypes.XmlElement
    new : intLike:int -> boolLike:bool -> jsonLike:XmlProvider+JsonLike -> XmlProvider+X
    XmlRuntime.CreateRecord("X", 
                            [| ("intLike",
                                (intLike :> obj)) |], 
                            [| ("boolLike",
                                (boolLike :> obj))
                               ("jsonLike",
                                (jsonLike :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+X
    XmlElement.Create(xElement)

    member BoolLike: bool with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "boolLike"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertBoolean(value), value)

    member IntLike: int with get
    let value = XmlRuntime.TryGetAttribute(this, "intLike")
    TextRuntime.GetNonOptionalValue("Attribute intLike", TextRuntime.ConvertInteger("", value), value)

    member JsonLike: XmlProvider+JsonLike with get
    XmlRuntime.GetJsonValue(XmlRuntime.GetChild(this, "jsonLike"))


class XmlProvider+JsonLike : FDR.BaseTypes.IJsonDocument
    new : a:int -> XmlProvider+JsonLike
    JsonRuntime.CreateRecord([| ("a",
                                 (a :> obj)) |], "")

    new : jsonValue:JsonValue -> XmlProvider+JsonLike
    JsonDocument.Create(jsonValue, "")

    member A: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "a")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


