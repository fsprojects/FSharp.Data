class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "" "Nested.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "" "Nested.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.IJsonDocument
    new : main:JsonProvider+Main -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("main",
                                 (main :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Main: JsonProvider+Main with get
    JsonRuntime.GetPropertyPacked(this, "main")


class JsonProvider+Main : FDR.IJsonDocument
    new : firstName:string -> lastName:string -> age:int -> isCool:bool -> JsonProvider+Main
    JsonRuntime.CreateRecord([| ("firstName",
                                 (firstName :> obj))
                                ("lastName",
                                 (lastName :> obj))
                                ("age",
                                 (age :> obj))
                                ("isCool",
                                 (isCool :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Main
    JsonDocument.Create(jsonValue, "")

    member Age: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "age")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FirstName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "firstName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member IsCool: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "isCool")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member LastName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lastName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


