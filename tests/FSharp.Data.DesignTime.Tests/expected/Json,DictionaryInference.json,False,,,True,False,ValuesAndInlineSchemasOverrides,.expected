class JsonProvider : obj
    static member AsyncGetSamples: () -> JsonProvider+JsonProvider+Root[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonRuntime.ConvertArray(JsonDocument.Create(t), new Func<_,_>(id))))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "DictionaryInference.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+JsonProvider+Root[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonRuntime.ConvertArray(JsonDocument.Create(t), new Func<_,_>(id))))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSamples: () -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "DictionaryInference.json"))), new Func<_,_>(id)))

    static member Load: stream:System.IO.Stream -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StreamReader(stream)) :> TextReader)), new Func<_,_>(id)))

    static member Load: reader:System.IO.TextReader -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(reader), new Func<_,_>(id)))

    static member Load: uri:string -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri))), new Func<_,_>(id)))

    static member Load: value:JsonValue -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(value, ""), new Func<_,_>(id)))

    static member Parse: text:string -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StringReader(text)) :> TextReader)), new Func<_,_>(id)))

    static member ParseList: text:string -> JsonProvider+JsonProvider+JsonProvider+Root[][]
    JsonRuntime.ConvertArray(JsonDocument.CreateList(((new StringReader(text)) :> TextReader)), new Func<_,_>(id)))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : rec:JsonProvider+Rec -> rec2:JsonProvider+Rec2 -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("rec",
                                 (rec :> obj))
                                ("rec2",
                                 (rec2 :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Rec: JsonProvider+Rec with get
    JsonRuntime.GetPropertyPacked(this, "rec")

    member Rec2: JsonProvider+Rec2 with get
    JsonRuntime.GetPropertyPacked(this, "rec2")


class JsonProvider+Rec : FDR.BaseTypes.IJsonDocument
    new : 0:int -> 1:int option -> JsonProvider+Rec
    JsonRuntime.CreateRecord([| ("0",
                                 (0 :> obj))
                                ("1",
                                 (1 :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Rec
    JsonDocument.Create(jsonValue, "")

    member 0: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "0")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member 1: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "1"))


class JsonProvider+Rec2 : FDR.BaseTypes.IJsonDocument
    new : 0:JsonProvider+0 option -> 1:JsonProvider+0 -> JsonProvider+Rec2
    JsonRuntime.CreateRecord([| ("0",
                                 (0 :> obj))
                                ("1",
                                 (1 :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Rec2
    JsonDocument.Create(jsonValue, "")

    member 0: JsonProvider+0 option with get
    JsonRuntime.TryGetPropertyPacked(this, "0")

    member 1: JsonProvider+0 with get
    JsonRuntime.GetPropertyPacked(this, "1")


class JsonProvider+0 : FDR.BaseTypes.IJsonDocument
    new : a:int -> JsonProvider+0
    JsonRuntime.CreateRecord([| ("a",
                                 (a :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+0
    JsonDocument.Create(jsonValue, "")

    member A: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "a")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


