class JsonProvider : obj
    static member AsyncGetSamples: () -> JsonProvider+JsonProvider+Root[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonRuntime.ConvertArray(JsonDocument.Create(t), new Func<_,_>(id))))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "TypeInference.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+JsonProvider+Root[] async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonRuntime.ConvertArray(JsonDocument.Create(t), new Func<_,_>(id))))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSamples: () -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "TypeInference.json"))), new Func<_,_>(id)))

    static member Load: stream:System.IO.Stream -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StreamReader(stream)) :> TextReader)), new Func<_,_>(id)))

    static member Load: reader:System.IO.TextReader -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(reader), new Func<_,_>(id)))

    static member Load: uri:string -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri))), new Func<_,_>(id)))

    static member Load: value:JsonValue -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(value, ""), new Func<_,_>(id)))

    static member Parse: text:string -> JsonProvider+JsonProvider+Root[]
    JsonRuntime.ConvertArray(JsonDocument.Create(((new StringReader(text)) :> TextReader)), new Func<_,_>(id)))

    static member ParseList: text:string -> JsonProvider+JsonProvider+JsonProvider+Root[][]
    JsonRuntime.ConvertArray(JsonDocument.CreateList(((new StringReader(text)) :> TextReader)), new Func<_,_>(id)))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : intLike:string -> boolLike1:decimal -> boolLike2:string -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("intLike",
                                 (intLike :> obj))
                                ("boolLike1",
                                 (boolLike1 :> obj))
                                ("boolLike2",
                                 (boolLike2 :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member BoolLike1: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolLike1")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member BoolLike2: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolLike2")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member IntLike: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "intLike")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


