[<[TypeProviderEditorHideMethods()]>]
class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "SmallTest.csv")), ",", '"', true, false, 0, false)

    static member AsyncGetSample: () -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                                                     [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "SmallTest.csv"), f)

    static member AsyncLoad: uri:string -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                                                     [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri), f)

    static member GetSample: () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "SmallTest.csv")), ",", '"', true, false, 0, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StreamReader(stream)) :> TextReader), ",", '"', true, false, 0, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, reader, ",", '"', true, false, 0, false)

    static member Load: uri:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri)), ",", '"', true, false, 0, false)

    static member Parse: text:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Distance", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Time", TextRuntime.ConvertDecimal("", value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_ = row in t1))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,t2,_ = row in t2))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,t3 = row in t3)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StringReader(text)) :> TextReader), ",", '"', true, false, 0, false)


[<[TypeProviderEditorHideMethods()]>]
class CsvProvider+Row : string * decimal * decimal
    member Distance: decimal<metre> with get
    (let _,t2,_ = this in t2)

    member Name: string with get
    (let t1,_,_ = this in t1)

    member Time: decimal<s> with get
    (let _,_,t3 = this in t3)


