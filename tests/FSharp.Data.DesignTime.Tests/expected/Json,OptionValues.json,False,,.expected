class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "" "OptionValues.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "" "OptionValues.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.IJsonDocument
    new : authors:JsonProvider+Author[] -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("authors",
                                 (authors :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Authors: JsonProvider+Author[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "authors"), new Func<_,_>(id)))


class JsonProvider+Author : FDR.IJsonDocument
    new : name:string -> age:int option -> JsonProvider+Author
    JsonRuntime.CreateRecord([| ("name",
                                 (name :> obj))
                                ("age",
                                 (age :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Author
    JsonDocument.Create(jsonValue, "")

    member Age: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "age"))

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


