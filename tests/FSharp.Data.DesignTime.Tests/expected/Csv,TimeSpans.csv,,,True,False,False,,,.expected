class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : rows:CsvProvider+Row seq -> CsvProvider
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.CreateEmpty(rowToStringArray, rows, Some [| "positiveWithDayWithFraction"
                                                           "positiveWithoutDayWithoutFraction"
                                                           "negativeWithDayWithFraction"
                                                           "timespanOneTickGreaterThanMaxValue"
                                                           "timespanOneTickLessThanMinValue" |], 5, ",", '"')

    new : () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "CSV" "" "TimeSpans.csv")), ",", '"', true, false, 0, false)

    static member AsyncGetSample: () -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "CSV" "" "TimeSpans.csv"), f)

    static member AsyncLoad: uri:string -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "CSV" "" uri), f)

    static member GetSample: () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "CSV" "" "TimeSpans.csv")), ",", '"', true, false, 0, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StreamReader(stream)) :> TextReader), ",", '"', true, false, 0, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, reader, ",", '"', true, false, 0, false)

    static member Load: uri:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "CSV" "" uri)), ",", '"', true, false, 0, false)

    static member Parse: text:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertTimeSpanBack("", Some (let t1,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,t2,_,_,_ = row in t2))
                                               TextRuntime.ConvertTimeSpanBack("", Some (let _,_,t3,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5 = row in t5)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StringReader(text)) :> TextReader), ",", '"', true, false, 0, false)

    static member ParseRows: text:string -> CsvProvider+Row[]
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("positiveWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("positiveWithoutDayWithoutFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("negativeWithDayWithFraction", TextRuntime.ConvertTimeSpan("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickGreaterThanMaxValue", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("timespanOneTickLessThanMinValue", TextRuntime.ConvertString(value), value))
    CsvFile<_>.ParseRows(text, stringArrayToRow, ",", '"', false)


class CsvProvider+Row : System.TimeSpan * System.TimeSpan * System.TimeSpan * string * string
    new : positiveWithDayWithFraction:System.TimeSpan -> positiveWithoutDayWithoutFraction:System.TimeSpan -> negativeWithDayWithFraction:System.TimeSpan -> timespanOneTickGreaterThanMaxValue:string -> timespanOneTickLessThanMinValue:string -> CsvProvider+Row
    positiveWithDayWithFraction,
    positiveWithoutDayWithoutFraction,
    negativeWithDayWithFraction,
    timespanOneTickGreaterThanMaxValue,
    timespanOneTickLessThanMinValue

    member NegativeWithDayWithFraction: System.TimeSpan with get
    (let _,_,t3,_,_ = this in t3)

    member PositiveWithDayWithFraction: System.TimeSpan with get
    (let t1,_,_,_,_ = this in t1)

    member PositiveWithoutDayWithoutFraction: System.TimeSpan with get
    (let _,t2,_,_,_ = this in t2)

    member TimespanOneTickGreaterThanMaxValue: string with get
    (let _,_,_,t4,_ = this in t4)

    member TimespanOneTickLessThanMinValue: string with get
    (let _,_,_,_,t5 = this in t5)


