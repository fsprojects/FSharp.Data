class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : rows:CsvProvider+Row seq -> CsvProvider
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.CreateEmpty(rowToStringArray, rows, None, 6, "	", '"')

    new : () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "CSV" "" "LastFM.tsv")), "	", '"', false, false, 0, false)

    static member AsyncGetSample: () -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                                                       TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, "	", '"', false, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "CSV" "" "LastFM.tsv"), f)

    static member AsyncLoad: uri:string -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                                                       TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, "	", '"', false, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "CSV" "" uri), f)

    static member GetSample: () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "CSV" "" "LastFM.tsv")), "	", '"', false, false, 0, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StreamReader(stream)) :> TextReader), "	", '"', false, false, 0, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, reader, "	", '"', false, false, 0, false)

    static member Load: uri:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "CSV" "" uri)), "	", '"', false, false, 0, false)

    static member Parse: text:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertStringBack(Some (let t1,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertDateTimeOffsetBack("", Some (let _,t2,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertGuidBack((let _,_,t3,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6 = row in t6)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StringReader(text)) :> TextReader), "	", '"', false, false, 0, false)

    static member ParseRows: text:string -> CsvProvider+Row[]
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Column1", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Column2", TextRuntime.ConvertDateTimeOffset("", value), value),
                                              TextRuntime.ConvertGuid(TextConversions.AsString(row.[2])),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Column4", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Column5", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Column6", TextRuntime.ConvertString(value), value))
    CsvFile<_>.ParseRows(text, stringArrayToRow, "	", '"', false)


class CsvProvider+Row : string * System.DateTimeOffset * System.Guid option * string * string * string
    new : column1:string -> column2:System.DateTimeOffset -> column3:System.Guid option -> column4:string -> column5:string -> column6:string -> CsvProvider+Row
    column1,
    column2,
    column3,
    column4,
    column5,
    column6

    member Column1: string with get
    (let t1,_,_,_,_,_ = this in t1)

    member Column2: System.DateTimeOffset with get
    (let _,t2,_,_,_,_ = this in t2)

    member Column3: System.Guid option with get
    (let _,_,t3,_,_,_ = this in t3)

    member Column4: string with get
    (let _,_,_,t4,_,_ = this in t4)

    member Column5: string with get
    (let _,_,_,_,t5,_ = this in t5)

    member Column6: string with get
    (let _,_,_,_,_,t6 = this in t6)


