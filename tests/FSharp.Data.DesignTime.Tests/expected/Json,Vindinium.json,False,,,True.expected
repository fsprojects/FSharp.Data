class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "Vindinium.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "Vindinium.json")))

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader)

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)))

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : game:JsonProvider+Game -> hero:JsonProvider+Hero -> token:string -> viewUrl:string -> playUrl:string -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("game",
                                 (game :> obj))
                                ("hero",
                                 (hero :> obj))
                                ("token",
                                 (token :> obj))
                                ("viewUrl",
                                 (viewUrl :> obj))
                                ("playUrl",
                                 (playUrl :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Game: JsonProvider+Game with get
    JsonRuntime.GetPropertyPacked(this, "game")

    member Hero: JsonProvider+Hero with get
    JsonRuntime.GetPropertyPacked(this, "hero")

    member PlayUrl: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "playUrl")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Token: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "token")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member ViewUrl: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "viewUrl")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Game : FDR.BaseTypes.IJsonDocument
    new : id:string -> turn:int -> maxTurns:int -> heroes:JsonProvider+Hero[] -> board:JsonProvider+Board -> finished:bool -> JsonProvider+Game
    JsonRuntime.CreateRecord([| ("id",
                                 (id :> obj))
                                ("turn",
                                 (turn :> obj))
                                ("maxTurns",
                                 (maxTurns :> obj))
                                ("heroes",
                                 (heroes :> obj))
                                ("board",
                                 (board :> obj))
                                ("finished",
                                 (finished :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Game
    JsonDocument.Create(jsonValue, "")

    member Board: JsonProvider+Board with get
    JsonRuntime.GetPropertyPacked(this, "board")

    member Finished: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "finished")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Heroes: JsonProvider+Hero[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "heroes"), new Func<_,_>(id)))

    member Id: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member MaxTurns: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "maxTurns")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Turn: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "turn")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Hero : FDR.BaseTypes.IJsonDocument
    new : id:int -> name:string -> userId:string -> elo:int -> pos:JsonProvider+Pos -> life:int -> gold:int -> mineCount:int -> spawnPos:JsonProvider+Pos -> crashed:bool -> JsonProvider+Hero
    JsonRuntime.CreateRecord([| ("id",
                                 (id :> obj))
                                ("name",
                                 (name :> obj))
                                ("userId",
                                 (userId :> obj))
                                ("elo",
                                 (elo :> obj))
                                ("pos",
                                 (pos :> obj))
                                ("life",
                                 (life :> obj))
                                ("gold",
                                 (gold :> obj))
                                ("mineCount",
                                 (mineCount :> obj))
                                ("spawnPos",
                                 (spawnPos :> obj))
                                ("crashed",
                                 (crashed :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Hero
    JsonDocument.Create(jsonValue, "")

    member Crashed: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "crashed")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean(value.JsonOpt), value.JsonOpt)

    member Elo: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "elo")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Gold: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "gold")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Id: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "id")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Life: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "life")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member MineCount: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "mineCount")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Name: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "name")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member Pos: JsonProvider+Pos with get
    JsonRuntime.GetPropertyPacked(this, "pos")

    member SpawnPos: JsonProvider+Pos with get
    JsonRuntime.GetPropertyPacked(this, "spawnPos")

    member UserId: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "userId")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Board : FDR.BaseTypes.IJsonDocument
    new : size:int -> tiles:string -> JsonProvider+Board
    JsonRuntime.CreateRecord([| ("size",
                                 (size :> obj))
                                ("tiles",
                                 (tiles :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Board
    JsonDocument.Create(jsonValue, "")

    member Size: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "size")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Tiles: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "tiles")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Pos : FDR.BaseTypes.IJsonDocument
    new : x:int -> y:int -> JsonProvider+Pos
    JsonRuntime.CreateRecord([| ("x",
                                 (x :> obj))
                                ("y",
                                 (y :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Pos
    JsonDocument.Create(jsonValue, "")

    member X: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "x")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member Y: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "y")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


