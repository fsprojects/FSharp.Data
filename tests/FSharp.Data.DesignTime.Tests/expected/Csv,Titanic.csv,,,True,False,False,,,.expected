[<[TypeProviderEditorHideMethods()]>]
class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[11])
                                              TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "Titanic.csv")), ",", '"', true, false, 0, false)

    static member AsyncGetSample: () -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                                                       let value = TextConversions.AsString(row.[6])
                                                                       TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[7])
                                                                       TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[8])
                                                                       TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[9])
                                                                       TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[10])
                                                                       TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[11])
                                                                       TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                                                        TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "Titanic.csv"), f)

    static member AsyncLoad: uri:string -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                                                       let value = TextConversions.AsString(row.[6])
                                                                       TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[7])
                                                                       TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                                                       let value = TextConversions.AsString(row.[8])
                                                                       TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[9])
                                                                       TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                                                       let value = TextConversions.AsString(row.[10])
                                                                       TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[11])
                                                                       TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                                                        TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                                                        TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                                                        TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri), f)

    static member GetSample: () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[11])
                                              TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "Titanic.csv")), ",", '"', true, false, 0, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[11])
                                              TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StreamReader(stream)) :> TextReader), ",", '"', true, false, 0, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[11])
                                              TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, reader, ",", '"', true, false, 0, false)

    static member Load: uri:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[11])
                                              TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri)), ",", '"', true, false, 0, false)

    static member Parse: text:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("PassengerId", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("Survived", TextRuntime.ConvertBoolean(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("Pclass", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("Name", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("Sex", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("Age", TextRuntime.ConvertFloat("", "", value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("SibSp", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("Parch", TextRuntime.ConvertInteger("", value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("Ticket", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("Fare", TextRuntime.ConvertDecimal("", value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("Cabin", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[11])
                                              TextRuntime.GetNonOptionalValue("Embarked", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertIntegerBack("", Some (let t1,_,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertBooleanBack(Some (let _,t2,_,_,_,_,_,_,_,_,_,_ = row in t2), false)
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,t3,_,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertFloatBack("", "", Some (let _,_,_,_,_,t6,_,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,t7,_,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertIntegerBack("", Some (let _,_,_,_,_,_,_,t8,_,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_,_ = row in t9))
                                               TextRuntime.ConvertDecimalBack("", Some (let _,_,_,_,_,_,_,_,_,t10,_,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11,_ = row in t11))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,_,t12 = row in t12)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StringReader(text)) :> TextReader), ",", '"', true, false, 0, false)


[<[TypeProviderEditorHideMethods()]>]
class CsvProvider+Row : int * bool * int * string * string * float * int * int * string * decimal * string * string
    member Age: float with get
    (let _,_,_,_,_,t6,_,_,_,_,_,_ = this in t6)

    member Cabin: string with get
    (let _,_,_,_,_,_,_,_,_,_,t11,_ = this in t11)

    member Embarked: string with get
    (let _,_,_,_,_,_,_,_,_,_,_,t12 = this in t12)

    member Fare: decimal with get
    (let _,_,_,_,_,_,_,_,_,t10,_,_ = this in t10)

    member Name: string with get
    (let _,_,_,t4,_,_,_,_,_,_,_,_ = this in t4)

    member Parch: int with get
    (let _,_,_,_,_,_,_,t8,_,_,_,_ = this in t8)

    member PassengerId: int with get
    (let t1,_,_,_,_,_,_,_,_,_,_,_ = this in t1)

    member Pclass: int with get
    (let _,_,t3,_,_,_,_,_,_,_,_,_ = this in t3)

    member Sex: string with get
    (let _,_,_,_,t5,_,_,_,_,_,_,_ = this in t5)

    member SibSp: int with get
    (let _,_,_,_,_,_,t7,_,_,_,_,_ = this in t7)

    member Survived: bool with get
    (let _,t2,_,_,_,_,_,_,_,_,_,_ = this in t2)

    member Ticket: string with get
    (let _,_,_,_,_,_,_,_,t9,_,_,_ = this in t9)


