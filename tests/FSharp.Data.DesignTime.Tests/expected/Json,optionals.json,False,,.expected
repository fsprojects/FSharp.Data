class JsonProvider
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "" "optionals.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t, ""))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "JSON" "" "optionals.json")), "")

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader), "")

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader, "")

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "JSON" "" uri)), "")

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader), "")


class JsonProvider+Root : FDR.IJsonDocument
    new : recordProperty:JsonProvider+RecordProperty -> nullProperty:JsonValue -> emptyStringProperty:JsonValue -> emptyArrayProperty:JsonValue[] -> oneElementArrayProperty:int[] -> multipleElementsArrayProperty:int[] -> arrayOfObjects:JsonProvider+ArrayOfObject[] -> optionalPrimitives:JsonProvider+OptionalPrimitive[] -> optionalRecords:JsonProvider+OptionalRecord[] -> heterogeneousArray:JsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray -> heterogeneousRecords:JsonProvider+HeterogeneousRecord[] -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("recordProperty",
                                 (recordProperty :> obj))
                                ("nullProperty",
                                 (nullProperty :> obj))
                                ("emptyStringProperty",
                                 (emptyStringProperty :> obj))
                                ("emptyArrayProperty",
                                 (emptyArrayProperty :> obj))
                                ("oneElementArrayProperty",
                                 (oneElementArrayProperty :> obj))
                                ("multipleElementsArrayProperty",
                                 (multipleElementsArrayProperty :> obj))
                                ("arrayOfObjects",
                                 (arrayOfObjects :> obj))
                                ("optionalPrimitives",
                                 (optionalPrimitives :> obj))
                                ("optionalRecords",
                                 (optionalRecords :> obj))
                                ("heterogeneousArray",
                                 (heterogeneousArray :> obj))
                                ("heterogeneousRecords",
                                 (heterogeneousRecords :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member ArrayOfObjects: JsonProvider+ArrayOfObject[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "arrayOfObjects"), new Func<_,_>(id)))

    member EmptyArrayProperty: FDR.IJsonDocument[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "emptyArrayProperty"), new Func<_,_>(id)))

    member EmptyStringProperty: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "emptyStringProperty")

    member HeterogeneousArray: JsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousArray")

    member HeterogeneousRecords: JsonProvider+HeterogeneousRecord[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousRecords"), new Func<_,_>(id)))

    member MultipleElementsArrayProperty: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "multipleElementsArrayProperty"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member NullProperty: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "nullProperty")

    member OneElementArrayProperty: int[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "oneElementArrayProperty"), new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member OptionalPrimitives: JsonProvider+OptionalPrimitive[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "optionalPrimitives"), new Func<_,_>(id)))

    member OptionalRecords: JsonProvider+OptionalRecord[] with get
    JsonRuntime.ConvertArray(JsonRuntime.GetPropertyPackedOrNull(this, "optionalRecords"), new Func<_,_>(id)))

    member RecordProperty: JsonProvider+RecordProperty with get
    JsonRuntime.GetPropertyPacked(this, "recordProperty")


class JsonProvider+ArrayOfObject : FDR.IJsonDocument
    new : heterogeneousArrayProperty:JsonProvider+NumbersOrBooleanOrString -> heterogeneousProperty:JsonProvider+IntOrBooleanOrDateTime -> heterogeneousOptionalProperty:JsonProvider+IntOrBoolean -> JsonProvider+ArrayOfObject
    JsonRuntime.CreateRecord([| ("heterogeneousArrayProperty",
                                 (heterogeneousArrayProperty :> obj))
                                ("heterogeneousProperty",
                                 (heterogeneousProperty :> obj))
                                ("heterogeneousOptionalProperty",
                                 (heterogeneousOptionalProperty :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+ArrayOfObject
    JsonDocument.Create(jsonValue, "")

    member HeterogeneousArrayProperty: JsonProvider+NumbersOrBooleanOrString with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousArrayProperty")

    member HeterogeneousOptionalProperty: JsonProvider+IntOrBoolean with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousOptionalProperty")

    member HeterogeneousProperty: JsonProvider+IntOrBooleanOrDateTime with get
    JsonRuntime.GetPropertyPackedOrNull(this, "heterogeneousProperty")


class JsonProvider+HeterogeneousRecord : FDR.IJsonDocument
    new : b:JsonProvider+IntOrBooleanOrArrayOrB -> JsonProvider+HeterogeneousRecord
    JsonRuntime.CreateRecord([| ("b",
                                 (b :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+HeterogeneousRecord
    JsonDocument.Create(jsonValue, "")

    member B: JsonProvider+IntOrBooleanOrArrayOrB with get
    JsonRuntime.GetPropertyPackedOrNull(this, "b")


class JsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray : FDR.IJsonDocument
    new : number:int -> boolean:bool -> arrays:JsonProvider+NumbersOrBooleanOrHeterogeneousArray[] -> record:JsonProvider+OptionalBecauseMissing -> JsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray
    JsonRuntime.CreateArray([| (number :> obj)
                               (boolean :> obj)
                               (arrays :> obj)
                               (record :> obj) |], "")

    new : jsonValue:JsonValue -> JsonProvider+IntOrBooleanOrArraysOrHeterogeneousArray
    JsonDocument.Create(jsonValue, "")

    member Arrays: JsonProvider+NumbersOrBooleanOrHeterogeneousArray[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Array", new Func<_,_>(id)))

    member Boolean: bool with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "Boolean")
    JsonRuntime.GetNonOptionalValue(value.Path(), JsonRuntime.ConvertBoolean("", Some value.JsonValue), Some value.JsonValue)

    member Number: int with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "Number")
    JsonRuntime.GetNonOptionalValue(value.Path(), JsonRuntime.ConvertInteger("", Some value.JsonValue), Some value.JsonValue)

    member Record: JsonProvider+OptionalBecauseMissing with get
    JsonRuntime.GetArrayChildByTypeTag(this, "", "Record@heterogeneousArray")


class JsonProvider+OptionalPrimitive : FDR.IJsonDocument
    new : optionalBecauseMissing:int option -> optionalBecauseNull:int option -> optionalBecauseEmptyString:int option -> notOptional:int -> nullNotOptional:JsonValue -> JsonProvider+OptionalPrimitive
    JsonRuntime.CreateRecord([| ("optionalBecauseMissing",
                                 (optionalBecauseMissing :> obj))
                                ("optionalBecauseNull",
                                 (optionalBecauseNull :> obj))
                                ("optionalBecauseEmptyString",
                                 (optionalBecauseEmptyString :> obj))
                                ("notOptional",
                                 (notOptional :> obj))
                                ("nullNotOptional",
                                 (nullNotOptional :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+OptionalPrimitive
    JsonDocument.Create(jsonValue, "")

    member NotOptional: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "notOptional")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member NullNotOptional: FDR.IJsonDocument with get
    JsonRuntime.GetPropertyPackedOrNull(this, "nullNotOptional")

    member OptionalBecauseEmptyString: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseEmptyString"))

    member OptionalBecauseMissing: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseMissing"))

    member OptionalBecauseNull: int option with get
    JsonRuntime.ConvertInteger("", JsonRuntime.TryGetPropertyUnpacked(this, "optionalBecauseNull"))


class JsonProvider+OptionalRecord : FDR.IJsonDocument
    new : optionalBecauseMissing:JsonProvider+OptionalBecauseMissing option -> optionalBecauseNull:JsonProvider+OptionalBecauseMissing option -> optionalBecauseEmptyString:JsonProvider+OptionalBecauseMissing option -> notOptional:JsonProvider+OptionalBecauseMissing -> JsonProvider+OptionalRecord
    JsonRuntime.CreateRecord([| ("optionalBecauseMissing",
                                 (optionalBecauseMissing :> obj))
                                ("optionalBecauseNull",
                                 (optionalBecauseNull :> obj))
                                ("optionalBecauseEmptyString",
                                 (optionalBecauseEmptyString :> obj))
                                ("notOptional",
                                 (notOptional :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+OptionalRecord
    JsonDocument.Create(jsonValue, "")

    member NotOptional: JsonProvider+OptionalBecauseMissing with get
    JsonRuntime.GetPropertyPacked(this, "notOptional")

    member OptionalBecauseEmptyString: JsonProvider+OptionalBecauseMissing option with get
    JsonRuntime.TryGetPropertyPacked(this, "optionalBecauseEmptyString")

    member OptionalBecauseMissing: JsonProvider+OptionalBecauseMissing option with get
    JsonRuntime.TryGetPropertyPacked(this, "optionalBecauseMissing")

    member OptionalBecauseNull: JsonProvider+OptionalBecauseMissing option with get
    JsonRuntime.TryGetPropertyPacked(this, "optionalBecauseNull")


class JsonProvider+RecordProperty : FDR.IJsonDocument
    new : stringProperty:string -> intProperty:int -> int64Property:int64 -> decimalProperty:decimal -> floatProperty:float -> boolProperty:bool -> dateProperty:System.DateTime -> guidProperty:System.Guid -> JsonProvider+RecordProperty
    JsonRuntime.CreateRecord([| ("stringProperty",
                                 (stringProperty :> obj))
                                ("intProperty",
                                 (intProperty :> obj))
                                ("int64Property",
                                 (int64Property :> obj))
                                ("decimalProperty",
                                 (decimalProperty :> obj))
                                ("floatProperty",
                                 (floatProperty :> obj))
                                ("boolProperty",
                                 (boolProperty :> obj))
                                ("dateProperty",
                                 (dateProperty :> obj))
                                ("guidProperty",
                                 (guidProperty :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+RecordProperty
    JsonDocument.Create(jsonValue, "")

    member BoolProperty: bool with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "boolProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertBoolean("", value.JsonOpt), value.JsonOpt)

    member DateProperty: System.DateTime with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "dateProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDateTime("", value.JsonOpt), value.JsonOpt)

    member DecimalProperty: decimal with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "decimalProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertDecimal("", value.JsonOpt), value.JsonOpt)

    member FloatProperty: float with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "floatProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertFloat("", "", value.JsonOpt), value.JsonOpt)

    member GuidProperty: System.Guid with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "guidProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertGuid(value.JsonOpt), value.JsonOpt)

    member Int64Property: int64 with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "int64Property")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger64("", value.JsonOpt), value.JsonOpt)

    member IntProperty: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "intProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member StringProperty: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "stringProperty")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+IntOrBoolean : FDR.IJsonDocument
    new : number:int -> JsonProvider+IntOrBoolean
    JsonRuntime.CreateValue((number :> obj), "")

    new : boolean:bool -> JsonProvider+IntOrBoolean
    JsonRuntime.CreateValue((boolean :> obj), "")

    new : () -> JsonProvider+IntOrBoolean
    JsonRuntime.CreateValue(null, "")

    new : jsonValue:JsonValue -> JsonProvider+IntOrBoolean
    JsonDocument.Create(jsonValue, "")

    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+IntOrBooleanOrArrayOrB : FDR.IJsonDocument
    new : number:int -> JsonProvider+IntOrBooleanOrArrayOrB
    JsonRuntime.CreateValue((number :> obj), "")

    new : boolean:bool -> JsonProvider+IntOrBooleanOrArrayOrB
    JsonRuntime.CreateValue((boolean :> obj), "")

    new : array:JsonProvider+NumbersOrBooleanOrB -> JsonProvider+IntOrBooleanOrArrayOrB
    JsonRuntime.CreateValue((array :> obj), "")

    new : record:JsonProvider+OptionalBecauseMissing -> JsonProvider+IntOrBooleanOrArrayOrB
    JsonRuntime.CreateValue((record :> obj), "")

    new : () -> JsonProvider+IntOrBooleanOrArrayOrB
    JsonRuntime.CreateValue(null, "")

    new : jsonValue:JsonValue -> JsonProvider+IntOrBooleanOrArrayOrB
    JsonDocument.Create(jsonValue, "")

    member Array: JsonProvider+NumbersOrBooleanOrB option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Array", new Func<_,_>(id)))

    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: JsonProvider+OptionalBecauseMissing option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Record@b", new Func<_,_>(id)))


class JsonProvider+IntOrBooleanOrDateTime : FDR.IJsonDocument
    new : number:int -> JsonProvider+IntOrBooleanOrDateTime
    JsonRuntime.CreateValue((number :> obj), "")

    new : boolean:bool -> JsonProvider+IntOrBooleanOrDateTime
    JsonRuntime.CreateValue((boolean :> obj), "")

    new : dateTime:System.DateTime -> JsonProvider+IntOrBooleanOrDateTime
    JsonRuntime.CreateValue((dateTime :> obj), "")

    new : () -> JsonProvider+IntOrBooleanOrDateTime
    JsonRuntime.CreateValue(null, "")

    new : jsonValue:JsonValue -> JsonProvider+IntOrBooleanOrDateTime
    JsonDocument.Create(jsonValue, "")

    member Boolean: bool option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member DateTime: System.DateTime option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "DateTime", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertDateTime("", Some t.JsonValue), Some t.JsonValue)))

    member Number: int option with get
    JsonRuntime.TryGetValueByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+NumbersOrBooleanOrHeterogeneousArray : FDR.IJsonDocument
    new : numbers:int[] -> boolean:bool option -> record:JsonProvider+OptionalBecauseMissing option -> JsonProvider+NumbersOrBooleanOrHeterogeneousArray
    JsonRuntime.CreateArray([| (numbers :> obj)
                               (boolean :> obj)
                               (record :> obj) |], "")

    new : jsonValue:JsonValue -> JsonProvider+NumbersOrBooleanOrHeterogeneousArray
    JsonDocument.Create(jsonValue, "")

    member Boolean: bool option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Numbers: int[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: JsonProvider+OptionalBecauseMissing option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Record@heterogeneousArray", new Func<_,_>(id)))


class JsonProvider+NumbersOrBooleanOrString : FDR.IJsonDocument
    new : numbers:int[] -> boolean:bool -> string:string option -> JsonProvider+NumbersOrBooleanOrString
    JsonRuntime.CreateArray([| (numbers :> obj)
                               (boolean :> obj)
                               (string :> obj) |], "")

    new : jsonValue:JsonValue -> JsonProvider+NumbersOrBooleanOrString
    JsonDocument.Create(jsonValue, "")

    member Boolean: bool with get
    let value = JsonRuntime.GetArrayChildByTypeTag(this, "", "Boolean")
    JsonRuntime.GetNonOptionalValue(value.Path(), JsonRuntime.ConvertBoolean("", Some value.JsonValue), Some value.JsonValue)

    member Numbers: int[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member String: string option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "String", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertString("", Some t.JsonValue), Some t.JsonValue)))


class JsonProvider+OptionalBecauseMissing : FDR.IJsonDocument
    new : a:int -> JsonProvider+OptionalBecauseMissing
    JsonRuntime.CreateRecord([| ("a",
                                 (a :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+OptionalBecauseMissing
    JsonDocument.Create(jsonValue, "")

    member A: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "a")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)


class JsonProvider+NumbersOrBooleanOrB : FDR.IJsonDocument
    new : numbers:int[] -> boolean:bool option -> record:JsonProvider+OptionalBecauseMissing option -> JsonProvider+NumbersOrBooleanOrB
    JsonRuntime.CreateArray([| (numbers :> obj)
                               (boolean :> obj)
                               (record :> obj) |], "")

    new : jsonValue:JsonValue -> JsonProvider+NumbersOrBooleanOrB
    JsonDocument.Create(jsonValue, "")

    member Boolean: bool option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Boolean", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertBoolean("", Some t.JsonValue), Some t.JsonValue)))

    member Numbers: int[] with get
    JsonRuntime.GetArrayChildrenByTypeTag(this, "", "Number", new Func<_,_>(fun (t:IJsonDocument) -> JsonRuntime.GetNonOptionalValue(t.Path(), JsonRuntime.ConvertInteger("", Some t.JsonValue), Some t.JsonValue)))

    member Record: JsonProvider+OptionalBecauseMissing option with get
    JsonRuntime.TryGetArrayChildByTypeTag(this, "", "Record@b", new Func<_,_>(id)))


