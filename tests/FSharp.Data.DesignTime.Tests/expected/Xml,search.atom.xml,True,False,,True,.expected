class XmlProvider : obj
    static member AsyncGetSamples: () -> XmlProvider+Choice[] async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.CreateList(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "search.atom.xml"), f)

    static member AsyncLoad: uri:string -> XmlProvider+Choice async
    let f = new Func<_,_>(fun (t:TextReader) -> XmlElement.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri), f)

    static member GetSamples: () -> XmlProvider+Choice[]
    XmlElement.CreateList(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "XML" "" "search.atom.xml")))

    static member Load: stream:System.IO.Stream -> XmlProvider+Choice
    XmlElement.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> XmlProvider+Choice
    XmlElement.Create(reader)

    static member Load: uri:string -> XmlProvider+Choice
    XmlElement.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "XML" "" uri)))

    static member Parse: text:string -> XmlProvider+Choice
    XmlElement.Create(((new StringReader(text)) :> TextReader))


class XmlProvider+Choice : FDR.BaseTypes.XmlElement
    new : itemsPerPage:int -> XmlProvider+Choice
    XmlRuntime.CreateValue("{http://a9.com/-/spec/opensearch/1.1/}itemsPerPage", (itemsPerPage :> obj), "")

    new : entry:XmlProvider+Entry -> XmlProvider+Choice
    entry

    new : id:string -> XmlProvider+Choice
    XmlRuntime.CreateValue("{http://www.w3.org/2005/Atom}id", (id :> obj), "")

    new : link:XmlProvider+Link2 -> XmlProvider+Choice
    link

    new : title:string -> XmlProvider+Choice
    XmlRuntime.CreateValue("{http://www.w3.org/2005/Atom}title", (title :> obj), "")

    new : updated:System.DateTimeOffset -> XmlProvider+Choice
    XmlRuntime.CreateValue("{http://www.w3.org/2005/Atom}updated", (updated :> obj), "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Choice
    XmlElement.Create(xElement)

    member Entry: XmlProvider+Entry option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}entry", new Func<_,_>(id)))

    member Id: string option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}id", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                       let value = XmlRuntime.TryGetValue(t)
                                                                                       TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member ItemsPerPage: int option with get
    XmlRuntime.ConvertAsName(this, "{http://a9.com/-/spec/opensearch/1.1/}itemsPerPage", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                                          let value = XmlRuntime.TryGetValue(t)
                                                                                                          TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertInteger("", value), value)))

    member Link: XmlProvider+Link2 option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}link", new Func<_,_>(id)))

    member Title: string option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}title", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                          let value = XmlRuntime.TryGetValue(t)
                                                                                          TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)))

    member Updated: System.DateTimeOffset option with get
    XmlRuntime.ConvertAsName(this, "{http://www.w3.org/2005/Atom}updated", new Func<_,_>(fun (t:XmlElement) -> 
                                                                                            let value = XmlRuntime.TryGetValue(t)
                                                                                            TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTimeOffset("", value), value)))


class XmlProvider+Entry : FDR.BaseTypes.XmlElement
    new : id:string -> published:System.DateTimeOffset -> links:XmlProvider+Link[] -> title:string -> content:XmlProvider+Content -> updated:System.DateTimeOffset -> geo:XmlProvider+Geo -> metadata:XmlProvider+Metadata -> source:string -> lang:string -> author:XmlProvider+Author -> XmlProvider+Entry
    XmlRuntime.CreateRecord("{http://www.w3.org/2005/Atom}entry", 
                            [| |], 
                            [| ("{http://www.w3.org/2005/Atom}id",
                                (id :> obj))
                               ("{http://www.w3.org/2005/Atom}published",
                                (published :> obj))
                               ("{http://www.w3.org/2005/Atom}link",
                                (links :> obj))
                               ("{http://www.w3.org/2005/Atom}title",
                                (title :> obj))
                               ("{http://www.w3.org/2005/Atom}content",
                                (content :> obj))
                               ("{http://www.w3.org/2005/Atom}updated",
                                (updated :> obj))
                               ("{http://api.twitter.com/}geo",
                                (geo :> obj))
                               ("{http://api.twitter.com/}metadata",
                                (metadata :> obj))
                               ("{http://api.twitter.com/}source",
                                (source :> obj))
                               ("{http://api.twitter.com/}lang",
                                (lang :> obj))
                               ("{http://www.w3.org/2005/Atom}author",
                                (author :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Entry
    XmlElement.Create(xElement)

    member Author: XmlProvider+Author with get
    XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}author")

    member Content: XmlProvider+Content with get
    XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}content")

    member Geo: XmlProvider+Geo with get
    XmlRuntime.GetChild(this, "{http://api.twitter.com/}geo")

    member Id: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}id"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Lang: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://api.twitter.com/}lang"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Links: XmlProvider+Link[] with get
    XmlRuntime.ConvertArray(this, "{http://www.w3.org/2005/Atom}link", new Func<_,_>(id)))

    member Metadata: XmlProvider+Metadata with get
    XmlRuntime.GetChild(this, "{http://api.twitter.com/}metadata")

    member Published: System.DateTimeOffset with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}published"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTimeOffset("", value), value)

    member Source: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://api.twitter.com/}source"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Title: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}title"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Updated: System.DateTimeOffset with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}updated"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertDateTimeOffset("", value), value)


class XmlProvider+Link2 : FDR.BaseTypes.XmlElement
    new : type:string -> href:string -> rel:string -> XmlProvider+Link2
    XmlRuntime.CreateRecord("{http://www.w3.org/2005/Atom}link", 
                            [| ("type",
                                (type :> obj))
                               ("href",
                                (href :> obj))
                               ("rel",
                                (rel :> obj)) |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Link2
    XmlElement.Create(xElement)

    member Href: string with get
    let value = XmlRuntime.TryGetAttribute(this, "href")
    TextRuntime.GetNonOptionalValue("Attribute href", TextRuntime.ConvertString(value), value)

    member Rel: string with get
    let value = XmlRuntime.TryGetAttribute(this, "rel")
    TextRuntime.GetNonOptionalValue("Attribute rel", TextRuntime.ConvertString(value), value)

    member Type: string with get
    let value = XmlRuntime.TryGetAttribute(this, "type")
    TextRuntime.GetNonOptionalValue("Attribute type", TextRuntime.ConvertString(value), value)


class XmlProvider+Author : FDR.BaseTypes.XmlElement
    new : name:string -> uri:string -> XmlProvider+Author
    XmlRuntime.CreateRecord("{http://www.w3.org/2005/Atom}author", 
                            [| |], 
                            [| ("{http://www.w3.org/2005/Atom}name",
                                (name :> obj))
                               ("{http://www.w3.org/2005/Atom}uri",
                                (uri :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Author
    XmlElement.Create(xElement)

    member Name: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}name"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)

    member Uri: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://www.w3.org/2005/Atom}uri"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Content : FDR.BaseTypes.XmlElement
    new : type:string -> value:string -> XmlProvider+Content
    XmlRuntime.CreateRecord("{http://www.w3.org/2005/Atom}content", 
                            [| ("type",
                                (type :> obj)) |], 
                            [| ("",
                                (value :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Content
    XmlElement.Create(xElement)

    member Type: string with get
    let value = XmlRuntime.TryGetAttribute(this, "type")
    TextRuntime.GetNonOptionalValue("Attribute type", TextRuntime.ConvertString(value), value)

    member Value: string with get
    let value = XmlRuntime.TryGetValue(this)
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


class XmlProvider+Geo : FDR.BaseTypes.XmlElement
    new : () -> XmlProvider+Geo
    XmlRuntime.CreateRecord("{http://api.twitter.com/}geo", 
                            [| |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Geo
    XmlElement.Create(xElement)


class XmlProvider+Link : FDR.BaseTypes.XmlElement
    new : type:string -> href:string -> rel:string -> XmlProvider+Link
    XmlRuntime.CreateRecord("{http://www.w3.org/2005/Atom}link", 
                            [| ("type",
                                (type :> obj))
                               ("href",
                                (href :> obj))
                               ("rel",
                                (rel :> obj)) |], 
                            [| |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Link
    XmlElement.Create(xElement)

    member Href: string with get
    let value = XmlRuntime.TryGetAttribute(this, "href")
    TextRuntime.GetNonOptionalValue("Attribute href", TextRuntime.ConvertString(value), value)

    member Rel: string with get
    let value = XmlRuntime.TryGetAttribute(this, "rel")
    TextRuntime.GetNonOptionalValue("Attribute rel", TextRuntime.ConvertString(value), value)

    member Type: string with get
    let value = XmlRuntime.TryGetAttribute(this, "type")
    TextRuntime.GetNonOptionalValue("Attribute type", TextRuntime.ConvertString(value), value)


class XmlProvider+Metadata : FDR.BaseTypes.XmlElement
    new : resultType:string -> XmlProvider+Metadata
    XmlRuntime.CreateRecord("{http://api.twitter.com/}metadata", 
                            [| |], 
                            [| ("{http://api.twitter.com/}result_type",
                                (resultType :> obj)) |], "")

    new : xElement:System.Xml.Linq.XElement -> XmlProvider+Metadata
    XmlElement.Create(xElement)

    member ResultType: string with get
    let value = XmlRuntime.TryGetValue(XmlRuntime.GetChild(this, "{http://api.twitter.com/}result_type"))
    TextRuntime.GetNonOptionalValue("Value", TextRuntime.ConvertString(value), value)


