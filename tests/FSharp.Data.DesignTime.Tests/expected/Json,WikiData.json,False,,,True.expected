class JsonProvider : obj
    static member AsyncGetSample: () -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "WikiData.json"), f)

    static member AsyncLoad: uri:string -> JsonProvider+Root async
    let f = new Func<_,_>(fun (t:TextReader) -> JsonDocument.Create(t))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri), f)

    static member GetSample: () -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules "<RESOLUTION_FOLDER>" "" "JSON" "" "WikiData.json")))

    static member Load: stream:System.IO.Stream -> JsonProvider+Root
    JsonDocument.Create(((new StreamReader(stream)) :> TextReader))

    static member Load: reader:System.IO.TextReader -> JsonProvider+Root
    JsonDocument.Create(reader)

    static member Load: uri:string -> JsonProvider+Root
    JsonDocument.Create(FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false "<RESOLUTION_FOLDER>" "" "JSON" "" uri)))

    static member Parse: text:string -> JsonProvider+Root
    JsonDocument.Create(((new StringReader(text)) :> TextReader))


class JsonProvider+Root : FDR.BaseTypes.IJsonDocument
    new : firstName:string -> lastName:string -> age:int -> address:JsonProvider+Address -> JsonProvider+Root
    JsonRuntime.CreateRecord([| ("firstName",
                                 (firstName :> obj))
                                ("lastName",
                                 (lastName :> obj))
                                ("age",
                                 (age :> obj))
                                ("address",
                                 (address :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Root
    JsonDocument.Create(jsonValue, "")

    member Address: JsonProvider+Address with get
    JsonRuntime.GetPropertyPacked(this, "address")

    member Age: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "age")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member FirstName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "firstName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member LastName: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "lastName")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


class JsonProvider+Address : FDR.BaseTypes.IJsonDocument
    new : streetAddress:string -> city:string -> state:string -> postalCode:int -> JsonProvider+Address
    JsonRuntime.CreateRecord([| ("streetAddress",
                                 (streetAddress :> obj))
                                ("city",
                                 (city :> obj))
                                ("state",
                                 (state :> obj))
                                ("postalCode",
                                 (postalCode :> obj)) |], "")

    new : jsonValue:JsonValue -> JsonProvider+Address
    JsonDocument.Create(jsonValue, "")

    member City: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "city")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member PostalCode: int with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "postalCode")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertInteger("", value.JsonOpt), value.JsonOpt)

    member State: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "state")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)

    member StreetAddress: string with get
    let value = JsonRuntime.TryGetPropertyUnpackedWithPath(this, "streetAddress")
    JsonRuntime.GetNonOptionalValue(value.Path, JsonRuntime.ConvertString("", value.JsonOpt), value.JsonOpt)


