[<[TypeProviderEditorHideMethods()]>]
class CsvProvider : FDR.CsvFile<CsvProvider+Row>
    new : () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "DnbHistoriskeKurser.csv")), ",", '"', true, false, 0, false)

    static member AsyncGetSample: () -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[6])
                                                                       TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[7])
                                                                       TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[8])
                                                                       TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[9])
                                                                       TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[10])
                                                                       TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "DnbHistoriskeKurser.csv"), f)

    static member AsyncLoad: uri:string -> CsvProvider async
    let f = new Func<_,_>(fun (t:TextReader) -> 
                             let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                                                       let value = TextConversions.AsString(row.[0])
                                                                       TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                                                       let value = TextConversions.AsString(row.[1])
                                                                       TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[2])
                                                                       TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[3])
                                                                       TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[4])
                                                                       TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[5])
                                                                       TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[6])
                                                                       TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[7])
                                                                       TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[8])
                                                                       TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[9])
                                                                       TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                                                       let value = TextConversions.AsString(row.[10])
                                                                       TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
                             let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                                                     [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                                                        TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                                                        TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
                             CsvFile<_>.Create(stringArrayToRow, rowToStringArray, t, ",", '"', true, false, 0, false))
    TextRuntime.AsyncMap((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri), f)

    static member GetSample: () -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntimeWithDesignTimeRules @"<RESOLUTION_FOLDER>" "" "CSV" "" "DnbHistoriskeKurser.csv")), ",", '"', true, false, 0, false)

    static member Load: stream:System.IO.Stream -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StreamReader(stream)) :> TextReader), ",", '"', true, false, 0, false)

    static member Load: reader:System.IO.TextReader -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, reader, ",", '"', true, false, 0, false)

    static member Load: uri:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, FSharpAsync.RunSynchronously((IO.asyncReadTextAtRuntime false @"<RESOLUTION_FOLDER>" "" "CSV" "" uri)), ",", '"', true, false, 0, false)

    static member Parse: text:string -> CsvProvider
    let stringArrayToRow = new Func<_,_,_>(fun (parent:obj) (row:string[]) -> 
                                              let value = TextConversions.AsString(row.[0])
                                              TextRuntime.GetNonOptionalValue("Dato", TextRuntime.ConvertDateTime("nb-NO", value), value),
                                              let value = TextConversions.AsString(row.[1])
                                              TextRuntime.GetNonOptionalValue("USD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[2])
                                              TextRuntime.GetNonOptionalValue("EUR", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[3])
                                              TextRuntime.GetNonOptionalValue("SEK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[4])
                                              TextRuntime.GetNonOptionalValue("DKK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[5])
                                              TextRuntime.GetNonOptionalValue("GBP", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[6])
                                              TextRuntime.GetNonOptionalValue("CHF", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[7])
                                              TextRuntime.GetNonOptionalValue("JPY", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[8])
                                              TextRuntime.GetNonOptionalValue("CAD", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[9])
                                              TextRuntime.GetNonOptionalValue("ISK", TextRuntime.ConvertString(value), value),
                                              let value = TextConversions.AsString(row.[10])
                                              TextRuntime.GetNonOptionalValue("AUD", TextRuntime.ConvertString(value), value))
    let rowToStringArray = new Func<_,_>(fun (row:_ * _ * _ * _ * _ * _ * _ * _) -> 
                                            [| TextRuntime.ConvertDateTimeBack("nb-NO", Some (let t1,_,_,_,_,_,_,_,_,_,_ = row in t1))
                                               TextRuntime.ConvertStringBack(Some (let _,t2,_,_,_,_,_,_,_,_,_ = row in t2))
                                               TextRuntime.ConvertStringBack(Some (let _,_,t3,_,_,_,_,_,_,_,_ = row in t3))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,t4,_,_,_,_,_,_,_ = row in t4))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,t5,_,_,_,_,_,_ = row in t5))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,t6,_,_,_,_,_ = row in t6))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,t7,_,_,_,_ = row in t7))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,t8,_,_,_ = row in t8))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,t9,_,_ = row in t9))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,t10,_ = row in t10))
                                               TextRuntime.ConvertStringBack(Some (let _,_,_,_,_,_,_,_,_,_,t11 = row in t11)) |])
    CsvFile<_>.Create(stringArrayToRow, rowToStringArray, ((new StringReader(text)) :> TextReader), ",", '"', true, false, 0, false)


[<[TypeProviderEditorHideMethods()]>]
class CsvProvider+Row : System.DateTime * string * string * string * string * string * string * string * string * string * string
    member AUD: string with get
    (let _,_,_,_,_,_,_,_,_,_,t11 = this in t11)

    member CAD: string with get
    (let _,_,_,_,_,_,_,_,t9,_,_ = this in t9)

    member CHF: string with get
    (let _,_,_,_,_,_,t7,_,_,_,_ = this in t7)

    member DKK: string with get
    (let _,_,_,_,t5,_,_,_,_,_,_ = this in t5)

    member Dato: System.DateTime with get
    (let t1,_,_,_,_,_,_,_,_,_,_ = this in t1)

    member EUR: string with get
    (let _,_,t3,_,_,_,_,_,_,_,_ = this in t3)

    member GBP: string with get
    (let _,_,_,_,_,t6,_,_,_,_,_ = this in t6)

    member ISK: string with get
    (let _,_,_,_,_,_,_,_,_,t10,_ = this in t10)

    member JPY: string with get
    (let _,_,_,_,_,_,_,t8,_,_,_ = this in t8)

    member SEK: string with get
    (let _,_,_,t4,_,_,_,_,_,_,_ = this in t4)

    member USD: string with get
    (let _,t2,_,_,_,_,_,_,_,_,_ = this in t2)


